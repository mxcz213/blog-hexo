{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1568186647363},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1568186647370},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1568186647365},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1568186647364},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1568186647372},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1568186647373},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1568186647371},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1568186647374},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1568186647375},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1568186647376},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1568186647380},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1568186647380},{"_id":"themes/next/_config.yml","hash":"527936a204248fe020da62df54a6715ac5992b19","modified":1568187679604},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1568186647378},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1568186647701},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1568186647377},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1568186647337},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1568186647320},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1568186361941},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1568186647367},{"_id":"themes/next/.git/index","hash":"a26dcb14c6907ee44d6191c77a803b6bcd9de0bc","modified":1568186647988},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1568186647368},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1568186647369},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1568186647370},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1568186647383},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1568186647382},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1568186647384},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1568186647386},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1568186647385},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1568186647385},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1568186647388},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1568186647389},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1568186647390},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1568186647391},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1568186647392},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1568186647392},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1568186647394},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1568186647393},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1568186647395},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1568186647396},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1568186647400},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1568186647696},{"_id":"themes/next/.git/packed-refs","hash":"3bb2e8e3fad44742d3e3bfadfb0b4d791fe9fe9e","modified":1568186647303},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1568186647694},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1568186647695},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1568186647699},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1568186647697},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1568186647698},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1568186647702},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1568186647704},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1568186647700},{"_id":"source/_posts/ES6-class实现一个简易Promise.md","hash":"21e8b9d54e19e1fc2258d1e2855b0554e9959efb","modified":1568365712653},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1568186647984},{"_id":"source/_posts/HTTP发送请求建立TCP连接需要的三次握手.md","hash":"ba1961aab43e56806eafa766a5131cd994e04f7a","modified":1568365718802},{"_id":"source/_posts/ES6-promise版的Ajax封装.md","hash":"2033e71fda0bc531fc06d1cf1c2c263421de2432","modified":1568365714446},{"_id":"source/_posts/Javascript数组方法总结（一）.md","hash":"1c5ca28c6f5ea1f4b7b341822bb802f5b38f20b3","modified":1568365717799},{"_id":"source/_posts/Javascript数组方法总结（二）.md","hash":"ccac71ff71a99977f6dc52b89e953e974c7df8c1","modified":1568365718667},{"_id":"source/_posts/React事件系统.md","hash":"8b627c33391e2ebc1a5af2998811eb486918d7bf","modified":1568365713182},{"_id":"source/_posts/Tree-Shaking-和ES6-module.md","hash":"1d60ac55cca65c90e8516634a1506c9823e36d9b","modified":1568365717250},{"_id":"source/_posts/UglifyJS-Webpack-Plugin.md","hash":"76745586e9b293fc5ba0a0989274144b11129fa2","modified":1568365718682},{"_id":"source/_posts/TypeScript-Node实现下载简书文章图片工具.md","hash":"f67ad1a76931dbd70e8adf2bbadc1844b2ffd986","modified":1568365717851},{"_id":"source/_posts/css实现垂直居中，三栏布局.md","hash":"42a2651f13117a5f291e85717ca6f3fb2747c759","modified":1568365717502},{"_id":"source/_posts/css3实现一个小loading和加载进度动画.md","hash":"3f54fabc763de2f743636285144d245d1353aa8e","modified":1568365718525},{"_id":"source/_posts/git-rebase-操作总结（合并git-commit的message）.md","hash":"e836b107f89163d2eddc941419add544d87c8212","modified":1568365713185},{"_id":"source/_posts/git-命令行操作.md","hash":"1d88fa54eddde2a91afadc669545210baf037c67","modified":1568365714208},{"_id":"source/_posts/mini-css-extract-plugin.md","hash":"206f0e1bbd4125a2aaad798ef84672b315eddeb4","modified":1568365718195},{"_id":"source/_posts/npm-发布一个简单的-TypeScript-模块.md","hash":"6b6cb142a7f7bde32922080dfbe4f0353ffca87c","modified":1568365718094},{"_id":"source/_posts/vue入门.md","hash":"a2ee9645db96baae5b12b2b33856e1e76841516c","modified":1568365718282},{"_id":"source/_posts/webpack-4-中-tree-shaking-生产环境配置.md","hash":"cd4aa1a8c6cf7450b0baf292baded11ea013bbd1","modified":1568365717512},{"_id":"source/_posts/webpack-4-搭建-React-架构：-antd-中后台项目架构（一）.md","hash":"2fd31292ebb4fa67c619ced4d71fff7360a3fb57","modified":1568365717620},{"_id":"source/_posts/webpack-4-搭建-React-架构：使用React-新特性-Hook（四）.md","hash":"7977ef97ccf19ba1492cc685335ec102949d674a","modified":1568365718093},{"_id":"source/_posts/webpack-4-搭建-React-架构：使用Typescript（五）.md","hash":"3aa8b0b99deddcceb0a8cf914269d0c9d277a29b","modified":1568365718690},{"_id":"source/_posts/webpack-4-搭建-React-架构：实现热更新（二）.md","hash":"10a548ad1df7c6dfdfb4a1666a0607422f3f899c","modified":1568365717813},{"_id":"source/_posts/webpack-4-搭建-React-架构：引入Redux（三）.md","hash":"9748f94b2c632fa3161121ccb860bec15ad62eac","modified":1568365718122},{"_id":"source/_posts/webpack-React中配置-TypeScript.md","hash":"1390a453de28554e33dfcac8752cda8b4d1dce39","modified":1568365718829},{"_id":"source/_posts/数据存储：cookie、sessionStorage、localStorage、IndexedDB.md","hash":"650ce663c7e2afbc753e6582b5e1fec45046c633","modified":1568365717766},{"_id":"source/_posts/正则表达式.md","hash":"34530e1b2cafcad17c15b6c8c294878300acc9fe","modified":1568365713184},{"_id":"source/_posts/ES6-promise版的Jsonp封装.md","hash":"521a2afe4bc662924db74daaff01872ec1a9532d","modified":1568365718200},{"_id":"source/_posts/（Node-mongo系列）Node-js操作mongoDB数据库（二）.md","hash":"ddcdd621dddf503d16ba6bb1bd22ee1cf94791df","modified":1568365713183},{"_id":"source/_posts/（Node-mongo系列）Puppeteer爬取网页数据并写入文件（三）.md","hash":"927dc86c33e2941f3fde2b64438917e5f1f7d3d3","modified":1568365716954},{"_id":"source/_posts/线上分享webpack（每人一元）总结：资源加载.md","hash":"ba4671729d233df26586a10d6b15da3d960a3b25","modified":1568365716992},{"_id":"source/_posts/（一）egg-js快速人门跑出hello-world.md","hash":"c649839b346bf8967c3ed00ce2b8da38052a30a0","modified":1568365718659},{"_id":"source/_posts/（Node-mongo系列）mongoDB-windows安装教程（一）.md","hash":"9b335f4df6cec17bb1050bb268d051bc43e68028","modified":1568365716582},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1568186647986},{"_id":"source/_posts/（二）egg-js与前端打通做到前后端分离.md","hash":"372351c28c1522a6b4aa13242f12f3d1fe3b4f0b","modified":1568365717387},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1568186647987},{"_id":"source/_posts/（一）egg-js快速人门，跑出hello-world.md","hash":"c2a445e183db548973bb9bcf49000f8179242a5e","modified":1568341093128},{"_id":"source/_posts/（三）egg作为后端接口，get,post,jsonp，给前端调用.md","hash":"4aeb90225d0b23af887e82d56e2e442175692905","modified":1568341092646},{"_id":"source/_posts/（二）egg-js与前端打通，做到前后端分离.md","hash":"e6dfee174c303a9b688b0bd8de68ca5a16d9f480","modified":1568341093161},{"_id":"source/images/avatar.jpg","hash":"afe46a66a4cd62d3d5162cde1c5ae5ac3ca8309e","modified":1568187542034},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1567389431125},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647831},{"_id":"themes/next/.git/logs/HEAD","hash":"882e705041de102c60c3c0cb4ff3b5872926c9ff","modified":1568186647328},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1568186362043},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1568186647399},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1568186647402},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1568186647403},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1568186647416},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1568186647404},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1568186647405},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1568186647406},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1568186647418},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1568186647419},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1568186647420},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1568186647479},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1568186647398},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1568186647530},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1568186647476},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1568186647631},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1568186647532},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1568186647633},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1568186647679},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1568186647646},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1568186647680},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1568186647683},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1568186647685},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1568186647682},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1568186647680},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1568186647684},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1568186647831},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1568186647834},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1568186647833},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1568186647837},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1568186647838},{"_id":"themes/next/source/images/avatar.jpg","hash":"afe46a66a4cd62d3d5162cde1c5ae5ac3ca8309e","modified":1568187542034},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1568186647836},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1568186647839},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1568186647844},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1568186647845},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1568186647835},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1568186647843},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1568186647840},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1568186647841},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1568186647842},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1568186647846},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1568186647848},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1568186647850},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1568186647849},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1568186647847},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1568186647706},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1568186647707},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1568186647708},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1568186647709},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1568186647710},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1568186647711},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1568186647712},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1568186647713},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1568186647714},{"_id":"source/images/_posts/5541401-04adfdbce9885f8c.png","hash":"c77dc94fa36603771cd0c2e5c16804c6bd0d412b","modified":1568364918921},{"_id":"source/images/_posts/5541401-0916651d61c55783.png","hash":"88078048bc00030e6701ad2bd19175f9eaf6b774","modified":1568364919601},{"_id":"source/images/_posts/5541401-0ecc46ba30717a76.png","hash":"8d960a18b7aac06d4a9fd74889d14e3c21ffd3a3","modified":1568364921667},{"_id":"source/images/_posts/5541401-119c0110f85bc4cc.png","hash":"dbde1c9d02a4bd0a3f6b2c792a15496aeb719ca3","modified":1568364921025},{"_id":"source/images/_posts/5541401-10c475e52b8b1090.png","hash":"cb28771a540bde8bf78b2a0aab56226ed8eea4a2","modified":1568364921299},{"_id":"source/images/_posts/5541401-1359667d1e1b6583.png","hash":"e076318f2c0a039ceb9677a2c87f8691eadb813e","modified":1568364921203},{"_id":"source/images/_posts/5541401-1976ea2c3124540e.png","hash":"437ed050ca2c80ca32863aca269e53932149fb0d","modified":1568364917735},{"_id":"source/images/_posts/5541401-19b40e33ba687c03.png","hash":"08984a9ab0eb4c75d6fbb425f5163fd924bd1698","modified":1568364919672},{"_id":"source/images/_posts/5541401-1db7ffea8265f5b4.png","hash":"37901f947c60d7d799cd56cbb1f1c629e7ffe78c","modified":1568364921221},{"_id":"source/images/_posts/5541401-207823dd8b0e1b15.png","hash":"fc5c11dd11c5ef4b3bc0379d761b01aff837d247","modified":1568364919580},{"_id":"source/images/_posts/5541401-230a3a67a3eee35e.png","hash":"cea2fad8f4ac9dc657ab2be480a2a1a0d8bcb340","modified":1568364920990},{"_id":"source/images/_posts/5541401-2ab2184c178a770c.png","hash":"05bc2f3f55225a021458dae2ce254ce09a1ed604","modified":1568364917619},{"_id":"source/images/_posts/5541401-278a8c30cec3941d.png","hash":"c448060132ef2c35e610a25638934560ef97bd35","modified":1568364917486},{"_id":"source/images/_posts/5541401-1e01bb1787538324.png","hash":"a7fae6e11d5239d72e799b54481e5d320061858b","modified":1568364917983},{"_id":"source/images/_posts/5541401-32c6b9118806b502.png","hash":"32c0cd65e29625300c73447ab83845ff4d2be906","modified":1568364920750},{"_id":"source/images/_posts/5541401-40401014e511e1f6.png","hash":"ee9307ea1cbdbb61504f96ee162872709950aa69","modified":1568364918167},{"_id":"source/images/_posts/5541401-388c6135ed7f331f.png","hash":"a1c7ce5592932b84b47c287259e0b6898a875f88","modified":1568364917129},{"_id":"source/images/_posts/5541401-46213915c185376b.png","hash":"918e55ac96af17957a2b8117f37b032811bf209f","modified":1568364921090},{"_id":"source/images/_posts/5541401-469960a7950e912f.png","hash":"99bd42cedff73d13108af321a593bf10a36cf782","modified":1568364920643},{"_id":"source/images/_posts/5541401-47cad3231359456a.png","hash":"f9fb8d2e26f90f189707af731bc31896317030ff","modified":1568364917152},{"_id":"source/images/_posts/5541401-40ab1ea0f4f32607.png","hash":"a3b46bf3bad4bc91cf4053ee218aff1117677e49","modified":1568364918952},{"_id":"source/images/_posts/5541401-4d7807089fea4e83.png","hash":"9975718628012b212a44699c076483f821117fb1","modified":1568364919496},{"_id":"source/images/_posts/5541401-573416b9297583ca.png","hash":"04567b00aa9617812cbaf8c3f173ad1c603fa89b","modified":1568364921070},{"_id":"source/images/_posts/5541401-5d70f55a86c2f268.png","hash":"4de05074d35a8613ed5ae9c5785102c1b05e471f","modified":1568364917758},{"_id":"source/images/_posts/5541401-5f043705f714e4a7.png","hash":"fb0366d8cc111d8d5f14d192224c12b488d4cfa7","modified":1568364921116},{"_id":"source/images/_posts/5541401-5018e7c683816a6b.png","hash":"a5bd9e724a76f52773b5a1769baf0d83c11555a3","modified":1568364921051},{"_id":"source/images/_posts/5541401-6aaaf8aa15ca47b2.png","hash":"fa868ec6104e4a018b327950ef113d992f089c39","modified":1568364920353},{"_id":"source/images/_posts/5541401-7e72b9433fdb3ecc.png","hash":"c1910a2409fec7d0d760290f7cd7a48877536250","modified":1568364921006},{"_id":"source/images/_posts/5541401-7e505696cd334f23.png","hash":"11b24b10c1d7688dba6369114157e3bf4ea4fcbb","modified":1568364917596},{"_id":"source/images/_posts/5541401-80009db61e4fc12e.png","hash":"aa654a1c5b7857774d002ac5a3b5abaa916af6e8","modified":1568364917182},{"_id":"source/images/_posts/5541401-865886e5ab2925c6.png","hash":"3691338402a49f31ad40e1a1dcba5a8e12a3e84d","modified":1568364920881},{"_id":"source/images/_posts/5541401-82f8a7f5759df618.png","hash":"f2782da83774a658e02b172c2e12baade038aba8","modified":1568364919011},{"_id":"source/images/_posts/5541401-8f2e28a34109899b.png","hash":"6d3a5c91984da93f247381d138aad4cc4a65ad48","modified":1568364920784},{"_id":"source/images/_posts/5541401-911537487ec48180.png","hash":"dc62e2f5808c6ec0681d94178379230759583f6f","modified":1568364917639},{"_id":"source/images/_posts/5541401-8fa4183c3accfaac.png","hash":"7f8563eead454e4e58023c4561834402838678f2","modified":1568364919357},{"_id":"source/images/_posts/5541401-8fc3f058914e0b1e.png","hash":"df4be46fca7f183f5f58a7774badb76f4c19ac13","modified":1568364921263},{"_id":"source/images/_posts/5541401-94d7de55e8f4bb2d.png","hash":"eab28de00384792399d341736caea7e377d727ab","modified":1568364920581},{"_id":"source/images/_posts/5541401-97ad22738e484256.png","hash":"c71b5294a4d0cf2e905be6b961dcba2cbf31c086","modified":1568364921241},{"_id":"source/images/_posts/5541401-994407d021ad1843.png","hash":"442924e5a601a22d388ccfec99e24d7736ce4069","modified":1568364919446},{"_id":"source/images/_posts/5541401-9cbf6658855a706a.png","hash":"4999cbaaf48efd08f3bd658e2baf3942182d27f1","modified":1568364920660},{"_id":"source/images/_posts/5541401-9b6d73ffd42914a5.png","hash":"d2dd195931bcd7118822df5d61b7df82130761cf","modified":1568364921701},{"_id":"source/images/_posts/5541401-a47fbefa64c5a34a.png","hash":"5b940a73bef962781a69a7d402f7d2fdf2daffd2","modified":1568364920132},{"_id":"source/images/_posts/5541401-a503b4db8abe3b19.png","hash":"630d9d32e26d742df16c28f94f36e44cc6d04187","modified":1568364917714},{"_id":"source/images/_posts/5541401-a50f47d451f0c069.png","hash":"38278e3884760f1341389fc1f03d92f25232f023","modified":1568364920726},{"_id":"source/images/_posts/5541401-aa4376cd279df05e.png","hash":"41539c87398641de6b1a0f5305fa98de69f847a8","modified":1568364917081},{"_id":"source/images/_posts/5541401-a9804371fc77564a.png","hash":"33a60377bcbc8f6786c5358929a963a5323abf96","modified":1568364920112},{"_id":"source/images/_posts/5541401-a7d5744f6ab71544.png","hash":"3ef10c606b88e371522fea0aa13ed1456c5f28d9","modified":1568364921329},{"_id":"source/images/_posts/5541401-bb86bc1c6e33d54d.png","hash":"43aeb006b845db19535a688f678f78600eeb6145","modified":1568364920335},{"_id":"source/images/_posts/5541401-be4325c6265500db.png","hash":"a0e8b5c46c287b94c474ad5cb3c0a858aeef7f69","modified":1568364920315},{"_id":"source/images/_posts/5541401-bbf70a22f41364b0.png","hash":"92cbec4ccf1db59e2272828bcfe288f7165985e1","modified":1568364919378},{"_id":"source/images/_posts/5541401-b24295102a62220f.png","hash":"fd9023d40e6451545fe5d74394b473505369483b","modified":1568364917043},{"_id":"source/images/_posts/5541401-c1513a29035577df.png","hash":"72db4c5063ddcf11daa85cc0637b2646338e6f03","modified":1568364921633},{"_id":"source/images/_posts/5541401-c7a76b16dd21ffc6.png","hash":"d626f2a1c3e722825cb2227328f9ec71a8c7958c","modified":1568364920156},{"_id":"source/images/_posts/5541401-cf9b10ffaad1d8e2.png","hash":"be5dd4f34ac4b61133dfe48ad1100d060ce80666","modified":1568364919151},{"_id":"source/images/_posts/5541401-ddeb3937ea8c5a81.png","hash":"dc2149f56d0f7ea6c63fcf75084947380dc35d98","modified":1568364920371},{"_id":"source/images/_posts/5541401-cdbec9b0323acf8b.png","hash":"d3e088587c7a504e2d7d6c5d50d935a2768faf48","modified":1568364917108},{"_id":"source/images/_posts/5541401-f58625a0f97b7553.png","hash":"7040e6e78884058bf50982d8d340bd4edc5963b5","modified":1568364921722},{"_id":"source/images/_posts/5541401-f8547536fefd9f09.png","hash":"239e9284bf301f1efa63d7122c9ea759df540c95","modified":1568364920394},{"_id":"source/images/_posts/5541401-fa175038ada0a6cc.png","hash":"727a42187ec4fd7f62e161f7ee40be06db276f7d","modified":1568364921841},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1568186361974},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1568186361999},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1568186362001},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1568186361997},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1568186362003},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1568186362014},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1568186362026},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1568186362029},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1568186362040},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1568186362027},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647641},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647640},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647796},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647796},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647799},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647826},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568186647829},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1568186361989},{"_id":"source/images/_posts/5541401-00dbef693fd5b1e6.png","hash":"baf0f41067e4def9d15a37e8dd0e183b1acbaa3c","modified":1568364918051},{"_id":"source/images/_posts/5541401-0e70a6bf69394591.png","hash":"c69f025945f0792d50a32fb6fc19d2e0a31626a0","modified":1568364921514},{"_id":"source/images/_posts/5541401-0fa9af34d6fbe129.png","hash":"b68a7e8837773c90febc20985d0a98bd09d5ecb9","modified":1568364918016},{"_id":"source/images/_posts/5541401-25416b5ac143d2e1.png","hash":"6a75a6b0862072db4d6b84a76a2854a8b5881b4c","modified":1568364918982},{"_id":"source/images/_posts/5541401-39adc1a02cbcb868.png","hash":"d1e623a5facf183b2e396f11d33a82f5f625afeb","modified":1568364917577},{"_id":"source/images/_posts/5541401-40352faa76134e6b.png","hash":"b8e2d90c2c7fe8094eab80634c782f42c024c454","modified":1568364921419},{"_id":"source/images/_posts/5541401-87526c89c4571fc2.png","hash":"de428653904d0139addee42a53d3dc1dd60e9651","modified":1568364918113},{"_id":"source/images/_posts/5541401-9a7788b9970d1cbb.png","hash":"8aedce4c5808c9d537e21b4c5ee2d4c057d26bc8","modified":1568364919473},{"_id":"source/images/_posts/5541401-9dadd65f6822ee3d.png","hash":"f36ab9fd5b1f3c6b16458c00ecc668c800710ce3","modified":1568364917787},{"_id":"source/images/_posts/5541401-a39079ffe455ef4a.png","hash":"a6b4623d9edf4fa80c5cc495feab60ce5857c7c6","modified":1568364921543},{"_id":"source/images/_posts/5541401-aecdb0bbf7150e53.png","hash":"7909ba5977dae5c090b46c89fb2a0810ed2ef78f","modified":1568364919337},{"_id":"source/images/_posts/5541401-b7f91ca0d14b573d.png","hash":"8838a7ffe0cba8748b735e757d3cd61071b22303","modified":1568364921485},{"_id":"source/images/_posts/5541401-e14c36bd5e813ed2.png","hash":"fabdea26e0667d831382386c09905f6ff517a039","modified":1568364919419},{"_id":"themes/next/.git/refs/heads/master","hash":"3c959678e3fe6e51e935526c19927d21443a3be3","modified":1568186647326},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1568186647471},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1568186647474},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1568186647536},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1568186647574},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1568186647577},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1568186647609},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1568186647612},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1568186647571},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1568186647639},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1568186647614},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1568186647644},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1568186647636},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1568186647650},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1568186647659},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1568186647661},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1568186647653},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1568186647662},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1568186647663},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1568186647654},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1568186647665},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1568186647656},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1568186647666},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1568186647667},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1568186647667},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1568186647669},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1568186647670},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1568186647671},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1568186647674},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1568186647672},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1568186647676},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1568186647673},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1568186647677},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1568186647678},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1568186647674},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1568186647692},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1568186647795},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1568186647689},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1568186647691},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1568186647797},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1568186647798},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1568186647793},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1568186647826},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1568186647825},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1568186647690},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1568186647828},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1568186647852},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1568186647853},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1568186647854},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1568186647879},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1568186647856},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1568186647855},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1568186647857},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1568186647858},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1568186647859},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1568186647862},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1568186647863},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1568186647864},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1568186647886},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1568186647887},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1568186647905},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1568186647908},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1568186647884},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1568186647885},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1568186647937},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1568186647907},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1568186647906},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1568186647829},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1568186647940},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1568186647943},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1568186647941},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1568186647948},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1568186647945},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1568186647944},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1568186647950},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1568186647951},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1568186647942},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1568186647952},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1568186647954},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1568186647956},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1568186647956},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1568186647959},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1568186647958},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1568186647955},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1568186647960},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1568186647962},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1568186647960},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1568186647962},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1568186647963},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1568186647965},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1568186647947},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1568186647966},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1568186647967},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1568186647949},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1568186647976},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1568186647977},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1568186647913},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1568186647912},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1568186647914},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1568186647914},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1568186647915},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1568186647981},{"_id":"source/images/_posts/5541401-1f28b5dc956a8d13.png","hash":"8820651886546aae72bcfb75d138c90497956ea5","modified":1568364918145},{"_id":"source/images/_posts/5541401-bbad54913ffbdc11.png","hash":"c5c002d5602230e628778321bbc66d2f3a3fcaaf","modified":1568364918243},{"_id":"source/images/_posts/5541401-d7bc59f0a51045b1.png","hash":"738e7d5b57146129bcf4508d13382462f0eaaf27","modified":1568364918081},{"_id":"source/images/_posts/5541401-e4bb5a8160fc8a77.png","hash":"d8df176323f232938e35ccadcd32c63ed8451f5a","modified":1568364920090},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1568186647982},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1568186647983},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1568186647938},{"_id":"source/images/_posts/5541401-048340c05a0d0d0a.png","hash":"970cb5e69da2af85eac4ef72e7d48ee787f089ba","modified":1568364917833},{"_id":"source/images/_posts/5541401-07fa417f15b2d147.png","hash":"be5ff23a1acf1cf5af7d050b6a1fab93ebb3cc33","modified":1568364918841},{"_id":"source/images/_posts/5541401-2d350417d3746875.png","hash":"5b6a4d5b8b4eeaf1adbb48383f10573c7bb6b09e","modified":1568364918212},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"882e705041de102c60c3c0cb4ff3b5872926c9ff","modified":1568186647330},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1568186647316},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1568186647688},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1568186647687},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1568186647718},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1568186647721},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1568186647722},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1568186647719},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1568186647720},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1568186647739},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1568186647765},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1568186647786},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1568186647787},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1568186647791},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1568186647789},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1568186647789},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1568186647813},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1568186647814},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1568186647815},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1568186647815},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1568186647790},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1568186647816},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1568186647819},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1568186647792},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1568186647801},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1568186647822},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1568186647824},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1568186647802},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1568186647820},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1568186647804},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1568186647821},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1568186647805},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1568186647807},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1568186647823},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1568186647803},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1568186647808},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1568186647806},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1568186647861},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1568186647889},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1568186647889},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1568186647891},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1568186647892},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1568186647894},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1568186647901},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1568186647903},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1568186647910},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1568186647902},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1568186647909},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1568186647890},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1568186647973},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1568186647877},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1568186647876},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1568186647873},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1568186647917},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1568186647918},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1568186647974},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1568186647919},{"_id":"source/images/_posts/5541401-3f9170a3eb71bfd6.png","hash":"b66eeaae03c9ee85831b38d6623b62c703109c5d","modified":1568364919124},{"_id":"source/images/_posts/5541401-b209e1ceb05e08ad.png","hash":"911e9c4764df8f303fa7ee8816c630b26753bd42","modified":1568364918749},{"_id":"source/images/_posts/5541401-d99ffd1fd492c918.png","hash":"87794a6913b07552c1f75a85ba3406b1ea9daa58","modified":1568364919071},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1568186647980},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1568186647875},{"_id":"source/images/_posts/5541401-7224e346c663ec05.png","hash":"539329143435fb5a994cca1496f92409b4373adb","modified":1568364918800},{"_id":"source/images/_posts/5541401-7de08d39d5af73b1.png","hash":"b06b49f678c5d5c91980c5c7079b9e44517fa638","modified":1568364920208},{"_id":"source/images/_posts/5541401-997e5bd85828fd32.png","hash":"8b6d2f8f250c3c7ebe07237d0424544fab943a76","modified":1568364918899},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"882e705041de102c60c3c0cb4ff3b5872926c9ff","modified":1568186647316},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1568186647935},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1568186647934},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1568186647724},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1568186647725},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1568186647727},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1568186647729},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1568186647730},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1568186647726},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1568186647734},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1568186647735},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1568186647737},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1568186647737},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1568186647741},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1568186647728},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1568186647731},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1568186647733},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1568186647738},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1568186647743},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1568186647744},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1568186647746},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1568186647742},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1568186647745},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1568186647750},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1568186647753},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1568186647752},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1568186647751},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1568186647748},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1568186647747},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1568186647756},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1568186647757},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1568186647753},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1568186647758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1568186647759},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1568186647759},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1568186647761},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1568186647754},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1568186647749},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1568186647761},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1568186647767},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1568186647768},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1568186647764},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1568186647763},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1568186647763},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1568186647766},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1568186647769},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1568186647770},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1568186647771},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1568186647774},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1568186647777},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1568186647772},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1568186647778},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1568186647781},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1568186647782},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1568186647773},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1568186647784},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1568186647785},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1568186647776},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1568186647780},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1568186647779},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1568186647818},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1568186647811},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1568186647809},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1568186647783},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1568186647896},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1568186647897},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1568186647896},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1568186647898},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1568186647899},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1568186647900},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1568186647872},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1568186647870},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1568186647922},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1568186647925},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1568186647933},{"_id":"source/images/_posts/5541401-f0e1e57a1dc56c18.png","hash":"57910804ba3d7913491fd6dd86bb5fd68a56e627","modified":1568364919208},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.idx","hash":"6507e0cdf986f371d6d304387f789444a7663c56","modified":1568186647025},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1568186647869},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1568186647869},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1568186647882},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1568186647871},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1568186647971},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1568186647930},{"_id":"themes/next/.git/objects/pack/pack-2094ec0f6437d1788a13f0aec9c47f4ed1a77de3.pack","hash":"2ab7a76d496119b851249983db6b500a45c77c47","modified":1568186647069}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ES6-class实现一个简易Promise","_content":"undefined","source":"_posts/ES6-class实现一个简易Promise.md","raw":"---\ntitle: ES6-class实现一个简易Promise\n---\nundefined","slug":"ES6-class实现一个简易Promise","published":1,"date":"2019-09-13T02:18:13.139Z","updated":"2019-09-13T09:08:32.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh72n0000wsl6l6lrq9i7","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"HTTP发送请求建立TCP连接需要的三次握手","_content":"####TCP连接\n几乎所有的HTTP通信都是由TCP/IP承载的，TCP/IP是全球计算机及网络设备都在使用的一种常用的分组交换网络分层协议集。客户端应用程序可以打开一条TCP/IP连接，连接可能运行在世界任何地方的服务器应用程序。一旦连接建立起来，在客户端的和服务器端的计算机之间的报文就永远不会丢失、受损、或失序。\n\nHTTP协议是在TCP/IP传输层上的应用层协议，TCP为HTTP提供了一条可靠的比特传输管道。\n\n下图是浏览器发出http请求到响应的一个过程：\n![](https://upload-images.jianshu.io/upload_images/5541401-e4bb5a8160fc8a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在HTTP请求过程中会出现网络时延，主要有以下几种原因：\n* 客户端首先要根据URI确定服务器的IP地址和端口号（DNS）；\n* 然后客户端向服务器发送一条TCP连接请求，并等待服务器响应请求和接受应答；\n* 最后服务器会返回HTTP响应依然需要时间；\n\n#####现在我们主要看一下客户端在发送TCP连接请求时的时延：握手时延\n建立一条新的TCP连接时，甚至是在发送任意数据之前，TCP软件之间会交换一系列的IP分组，对连接的有关参数进行沟通（如下图）。如果连接只用来传送少量数据，这些交换过程就会严重降低HTTP的性能。\n![](https://upload-images.jianshu.io/upload_images/5541401-a9804371fc77564a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nHTTP是没有连接的概念的，只有请求和响应数据，这个数据包的传送是在TCP连接（TCP connection）之上的。在一个TCP连接上是可以发送多个HTTP请求的。\n![](https://upload-images.jianshu.io/upload_images/5541401-a47fbefa64c5a34a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nTCP连接握手需要经过三个步骤：（三次网络传输）\n* 请求新的TCP连接时，客户端要向服务器发送一个小的TCP分组（通常是40~60个字节）。这个分组中设置了一个特殊的SYN标记，说明这是一个连接请求。如上图（a）。\n* 如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个TCP分组，这个分组的SYN和ACK标记都被置位，说明连接请求已被接受。如上图（b）。\n* 最后，客户端向服务器回送一条确认信息，通知他连接已经成功建立，如上图（c）。现代的TCP栈都允许客户端在这个确认分组中发送数据。\n![](https://upload-images.jianshu.io/upload_images/5541401-c7a76b16dd21ffc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/5541401-7de08d39d5af73b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####符号解释：\n\n（1）seq序号:占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。它的初始序号是随机的，相对序号/确认序号是和TCP会话的初始序号相关联的。该序号被用来跟踪该端发送的数据量。每一个包中都包含序号，在接收端则通过确认序号用来通知发送端数据成功接收。\n\n（2）确认序号：ack序号，占32位，只有ACK标志位为1时（不要将确认序号ack与标志位中的ACK弄混了），确认序号才有效。确认方ack = 发起方seq +1，两端配对。 \n\n（3）位码即TCP标志位，有6种，具体含义如下：\n\n    SYN(synchronous建立连接) 发起一个新连接\n\n    ACK(acknowledgement 表示响应、确认) 确认序号有效\n\n    PSH(push表示有DATA数据传输) 接收方应尽快将这个报文交给应用层\n\n    FIN(finish关闭连接) 释放一个连接\n\n    RST(reset表示连接重置)\n\n    URG(urgent pointer紧急指针字段值有效)\n\n\n参考：\n《HTTP权威指南》\nhttps://blog.csdn.net/weixin_36794678/article/details/81491121\n","source":"_posts/HTTP发送请求建立TCP连接需要的三次握手.md","raw":"---\ntitle: HTTP发送请求建立TCP连接需要的三次握手\n---\n####TCP连接\n几乎所有的HTTP通信都是由TCP/IP承载的，TCP/IP是全球计算机及网络设备都在使用的一种常用的分组交换网络分层协议集。客户端应用程序可以打开一条TCP/IP连接，连接可能运行在世界任何地方的服务器应用程序。一旦连接建立起来，在客户端的和服务器端的计算机之间的报文就永远不会丢失、受损、或失序。\n\nHTTP协议是在TCP/IP传输层上的应用层协议，TCP为HTTP提供了一条可靠的比特传输管道。\n\n下图是浏览器发出http请求到响应的一个过程：\n![](https://upload-images.jianshu.io/upload_images/5541401-e4bb5a8160fc8a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n在HTTP请求过程中会出现网络时延，主要有以下几种原因：\n* 客户端首先要根据URI确定服务器的IP地址和端口号（DNS）；\n* 然后客户端向服务器发送一条TCP连接请求，并等待服务器响应请求和接受应答；\n* 最后服务器会返回HTTP响应依然需要时间；\n\n#####现在我们主要看一下客户端在发送TCP连接请求时的时延：握手时延\n建立一条新的TCP连接时，甚至是在发送任意数据之前，TCP软件之间会交换一系列的IP分组，对连接的有关参数进行沟通（如下图）。如果连接只用来传送少量数据，这些交换过程就会严重降低HTTP的性能。\n![](https://upload-images.jianshu.io/upload_images/5541401-a9804371fc77564a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nHTTP是没有连接的概念的，只有请求和响应数据，这个数据包的传送是在TCP连接（TCP connection）之上的。在一个TCP连接上是可以发送多个HTTP请求的。\n![](https://upload-images.jianshu.io/upload_images/5541401-a47fbefa64c5a34a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nTCP连接握手需要经过三个步骤：（三次网络传输）\n* 请求新的TCP连接时，客户端要向服务器发送一个小的TCP分组（通常是40~60个字节）。这个分组中设置了一个特殊的SYN标记，说明这是一个连接请求。如上图（a）。\n* 如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个TCP分组，这个分组的SYN和ACK标记都被置位，说明连接请求已被接受。如上图（b）。\n* 最后，客户端向服务器回送一条确认信息，通知他连接已经成功建立，如上图（c）。现代的TCP栈都允许客户端在这个确认分组中发送数据。\n![](https://upload-images.jianshu.io/upload_images/5541401-c7a76b16dd21ffc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![](https://upload-images.jianshu.io/upload_images/5541401-7de08d39d5af73b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####符号解释：\n\n（1）seq序号:占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。它的初始序号是随机的，相对序号/确认序号是和TCP会话的初始序号相关联的。该序号被用来跟踪该端发送的数据量。每一个包中都包含序号，在接收端则通过确认序号用来通知发送端数据成功接收。\n\n（2）确认序号：ack序号，占32位，只有ACK标志位为1时（不要将确认序号ack与标志位中的ACK弄混了），确认序号才有效。确认方ack = 发起方seq +1，两端配对。 \n\n（3）位码即TCP标志位，有6种，具体含义如下：\n\n    SYN(synchronous建立连接) 发起一个新连接\n\n    ACK(acknowledgement 表示响应、确认) 确认序号有效\n\n    PSH(push表示有DATA数据传输) 接收方应尽快将这个报文交给应用层\n\n    FIN(finish关闭连接) 释放一个连接\n\n    RST(reset表示连接重置)\n\n    URG(urgent pointer紧急指针字段值有效)\n\n\n参考：\n《HTTP权威指南》\nhttps://blog.csdn.net/weixin_36794678/article/details/81491121\n","slug":"HTTP发送请求建立TCP连接需要的三次握手","published":1,"date":"2019-09-13T02:18:11.063Z","updated":"2019-09-13T09:08:38.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh72w0001wsl61j30mxac","content":"<p>####TCP连接<br>几乎所有的HTTP通信都是由TCP/IP承载的，TCP/IP是全球计算机及网络设备都在使用的一种常用的分组交换网络分层协议集。客户端应用程序可以打开一条TCP/IP连接，连接可能运行在世界任何地方的服务器应用程序。一旦连接建立起来，在客户端的和服务器端的计算机之间的报文就永远不会丢失、受损、或失序。</p>\n<p>HTTP协议是在TCP/IP传输层上的应用层协议，TCP为HTTP提供了一条可靠的比特传输管道。</p>\n<p>下图是浏览器发出http请求到响应的一个过程：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-e4bb5a8160fc8a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>在HTTP请求过程中会出现网络时延，主要有以下几种原因：</p>\n<ul>\n<li>客户端首先要根据URI确定服务器的IP地址和端口号（DNS）；</li>\n<li>然后客户端向服务器发送一条TCP连接请求，并等待服务器响应请求和接受应答；</li>\n<li>最后服务器会返回HTTP响应依然需要时间；</li>\n</ul>\n<p>#####现在我们主要看一下客户端在发送TCP连接请求时的时延：握手时延<br>建立一条新的TCP连接时，甚至是在发送任意数据之前，TCP软件之间会交换一系列的IP分组，对连接的有关参数进行沟通（如下图）。如果连接只用来传送少量数据，这些交换过程就会严重降低HTTP的性能。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a9804371fc77564a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>HTTP是没有连接的概念的，只有请求和响应数据，这个数据包的传送是在TCP连接（TCP connection）之上的。在一个TCP连接上是可以发送多个HTTP请求的。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a47fbefa64c5a34a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>TCP连接握手需要经过三个步骤：（三次网络传输）</p>\n<ul>\n<li>请求新的TCP连接时，客户端要向服务器发送一个小的TCP分组（通常是40~60个字节）。这个分组中设置了一个特殊的SYN标记，说明这是一个连接请求。如上图（a）。</li>\n<li>如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个TCP分组，这个分组的SYN和ACK标记都被置位，说明连接请求已被接受。如上图（b）。</li>\n<li>最后，客户端向服务器回送一条确认信息，通知他连接已经成功建立，如上图（c）。现代的TCP栈都允许客户端在这个确认分组中发送数据。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-c7a76b16dd21ffc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7de08d39d5af73b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####符号解释：</p>\n<p>（1）seq序号:占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。它的初始序号是随机的，相对序号/确认序号是和TCP会话的初始序号相关联的。该序号被用来跟踪该端发送的数据量。每一个包中都包含序号，在接收端则通过确认序号用来通知发送端数据成功接收。</p>\n<p>（2）确认序号：ack序号，占32位，只有ACK标志位为1时（不要将确认序号ack与标志位中的ACK弄混了），确认序号才有效。确认方ack = 发起方seq +1，两端配对。 </p>\n<p>（3）位码即TCP标志位，有6种，具体含义如下：</p>\n<pre><code>SYN(synchronous建立连接) 发起一个新连接\n\nACK(acknowledgement 表示响应、确认) 确认序号有效\n\nPSH(push表示有DATA数据传输) 接收方应尽快将这个报文交给应用层\n\nFIN(finish关闭连接) 释放一个连接\n\nRST(reset表示连接重置)\n\nURG(urgent pointer紧急指针字段值有效)</code></pre><p>参考：<br>《HTTP权威指南》<br><a href=\"https://blog.csdn.net/weixin_36794678/article/details/81491121\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_36794678/article/details/81491121</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####TCP连接<br>几乎所有的HTTP通信都是由TCP/IP承载的，TCP/IP是全球计算机及网络设备都在使用的一种常用的分组交换网络分层协议集。客户端应用程序可以打开一条TCP/IP连接，连接可能运行在世界任何地方的服务器应用程序。一旦连接建立起来，在客户端的和服务器端的计算机之间的报文就永远不会丢失、受损、或失序。</p>\n<p>HTTP协议是在TCP/IP传输层上的应用层协议，TCP为HTTP提供了一条可靠的比特传输管道。</p>\n<p>下图是浏览器发出http请求到响应的一个过程：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-e4bb5a8160fc8a77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>在HTTP请求过程中会出现网络时延，主要有以下几种原因：</p>\n<ul>\n<li>客户端首先要根据URI确定服务器的IP地址和端口号（DNS）；</li>\n<li>然后客户端向服务器发送一条TCP连接请求，并等待服务器响应请求和接受应答；</li>\n<li>最后服务器会返回HTTP响应依然需要时间；</li>\n</ul>\n<p>#####现在我们主要看一下客户端在发送TCP连接请求时的时延：握手时延<br>建立一条新的TCP连接时，甚至是在发送任意数据之前，TCP软件之间会交换一系列的IP分组，对连接的有关参数进行沟通（如下图）。如果连接只用来传送少量数据，这些交换过程就会严重降低HTTP的性能。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a9804371fc77564a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>HTTP是没有连接的概念的，只有请求和响应数据，这个数据包的传送是在TCP连接（TCP connection）之上的。在一个TCP连接上是可以发送多个HTTP请求的。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a47fbefa64c5a34a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>TCP连接握手需要经过三个步骤：（三次网络传输）</p>\n<ul>\n<li>请求新的TCP连接时，客户端要向服务器发送一个小的TCP分组（通常是40~60个字节）。这个分组中设置了一个特殊的SYN标记，说明这是一个连接请求。如上图（a）。</li>\n<li>如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个TCP分组，这个分组的SYN和ACK标记都被置位，说明连接请求已被接受。如上图（b）。</li>\n<li>最后，客户端向服务器回送一条确认信息，通知他连接已经成功建立，如上图（c）。现代的TCP栈都允许客户端在这个确认分组中发送数据。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-c7a76b16dd21ffc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></li>\n</ul>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7de08d39d5af73b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####符号解释：</p>\n<p>（1）seq序号:占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。它的初始序号是随机的，相对序号/确认序号是和TCP会话的初始序号相关联的。该序号被用来跟踪该端发送的数据量。每一个包中都包含序号，在接收端则通过确认序号用来通知发送端数据成功接收。</p>\n<p>（2）确认序号：ack序号，占32位，只有ACK标志位为1时（不要将确认序号ack与标志位中的ACK弄混了），确认序号才有效。确认方ack = 发起方seq +1，两端配对。 </p>\n<p>（3）位码即TCP标志位，有6种，具体含义如下：</p>\n<pre><code>SYN(synchronous建立连接) 发起一个新连接\n\nACK(acknowledgement 表示响应、确认) 确认序号有效\n\nPSH(push表示有DATA数据传输) 接收方应尽快将这个报文交给应用层\n\nFIN(finish关闭连接) 释放一个连接\n\nRST(reset表示连接重置)\n\nURG(urgent pointer紧急指针字段值有效)</code></pre><p>参考：<br>《HTTP权威指南》<br><a href=\"https://blog.csdn.net/weixin_36794678/article/details/81491121\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/weixin_36794678/article/details/81491121</a></p>\n"},{"title":"ES6-promise版的Ajax封装","_content":"undefined","source":"_posts/ES6-promise版的Ajax封装.md","raw":"---\ntitle: ES6-promise版的Ajax封装\n---\nundefined","slug":"ES6-promise版的Ajax封装","published":1,"date":"2019-09-13T02:18:12.197Z","updated":"2019-09-13T09:08:34.446Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh7300002wsl6cwb1yyvf","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"Javascript数组方法总结（一）","_content":"####一：检测数组的方法\n`Array.isArray()`用于确定传递的值是否是一个`Array`，返回`true` or `false`；\n```\nArray.isArray(new Array())\n//true\nArray.isArray(Array.prototype)\n//true\n```\n`instanceof` 和`Array.isArray()`\n当检测`Array`实例时, `Array.isArray` 优于 `instanceof`,因为`Array.isArray`能检测`iframes`.\n```\nvar iframe = document.createElement('iframe')\ndocument.body.appendChild(iframe)\nvar xArray = window.frames[window.frames.length - 1].Array\n> window.frames[window.frames.length - 1].Array\n< ƒ Array() { [native code] }\n> var arr = new xArray(1,2,3)\n> Array.isArray(arr)\n< true\n> arr instanceof xArray\n< true\n> arr instanceof Array\n< false\n```\nPolyfill：`Array.isArray()`是`es5`的方法，如果不支持可以用以下代码来创建该方法：\n```\n> Object.prototype.toString.call([1,2,3])\n< \"[object Array]\"\n\nif(!Array.isArray){\n  Array.prototype.isArray = function(arg){\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  }\n}\n```\n####二：转换方法（toString(),toLocalString(),valueOf()）\n所有对象都具有`toString()`,`toLocalString()`,`valueOf()`方法,调用`toString()`方法返回的是逗号分隔的字符串，为了创建字符串会调用数组每一项的`toString()`方法，`valueof()`返回的依然是数组。调用`join(‘分割符’)`方法返回分割符隔开的字符串，例如`‘hello&world’`；\n####三：栈方法（push、pop）\n栈方法`（LIFO:Last In First Out）`（在栈顶，后进先出）（在数组末尾操作数组）：\n```\nvar arr = [1,2,3,4];\narr.push(2,6,7)  ;  //push()返回数组的长度；\narr.pop();//pop()移除数组末尾项返回被移除的元素；\n```\n####四：队列方法（shift、unshift）\n队列方法（FIFO：First In First Out）（先进先出）（在数组前端操作数组）：\n```\n> var arr = [1,5,2,3,6];\n> arr.shift()\n< 1\n> arr.unshift(6)\n< 5\n> arr\n< [6, 5, 2, 3, 6]\narr.shift()  //移除数组的第一项，返回被移除的项；\narr.unshift()  //在数组前端添加项并返回数组的长度；\n```\n####五：重排序方法（reverse、sort）\n**reverse()**方法将数组中元素的位置颠倒,并返回该数组。该方法会`改变原数组`。\n**sort()**方法用[原地算法](https://en.wikipedia.org/wiki/In-place_algorithm)对数组的元素进行排序，并返回数组。排序算法现在是[稳定的](https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A9.A9.E5.AE.9A.E6.80.A7)。默认排序顺序是根据字符串Unicode码点。\n由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。\n语法：`arr.sort([compareFunction])`\n```\nvar arr = [1,2,3,4,5,6];\narr.sort((a,b) => a < b)  \n//返回：[6, 5, 4, 3, 2, 1],原数组会被改变\narr.reverse()  //将数组反转；\narr.sort()  //sort传入一个比较函数或者排序规则的函数，返回新数组；\n```\n####六：操作方法（concat(),slice(),splice()）\n**concat()** 拼接数组，基于当前数组创建一个新数组；\n**slice()** 传入位置索引截取数组，返回新数组，不会改变原来的数组；\n将类数组对象变为数组对象\n```\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\nlist(1,2,3)\n//(3) [1, 2, 3]\n```\n**splice()** 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n语法：`array.splice(start[, deleteCount[, item1[, item2[, ...]]]])`\n```\nvar myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nvar removed = myFish.splice(2, 0, \"drum\");   //从第 2 位开始删除 0 个元素，插入“drum”\n// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\n// 被删除的元素: [], 没有元素被删除\n\nvar myFish = ['angel', 'clown', 'drum', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(3, 1);  //从第 3 位开始删除 1 个元素\n// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"sturgeon\"]\n// 被删除的元素: [\"mandarin\"]\n```\n```\nvar hello = ['jack','mate','mary','jhon']; \nhello.slice(1);  \n//返回[\"mate\", \"mary\", \"jhon\"] 原来数组不变[\"jack\", \"mate\", \"mary\", \"jhon\"]\n\nhello.splice(1,2,'first','second')\n[\"mate\", \"mary\"]   //返回被删除的像：[\"mary\", \"jhon\"]，\nhello\n[\"jack\", \"first\", \"second\", \"jhon\"]   //原数组被改变\n```\n####七：位置方法（indexOf(),lastIndexOf()）\nindexOf()（从数组开头查找）,lastIndexOf()（从数组结尾查找）\n 返回查找项在数组中的位置索引，如果找得到返回位索引，如果找不到返回-1\n```\nvar s = [1,5,6,2,1,3,'hello'];\ns.indexOf(1)\n0\ns.lastIndexOf(1)\n4\ns.lastIndexOf(4,4)\n-1\ns.indexOf(4,4)\n-1\n```\n####八：迭代方法（every(),filter(),forEach(),map(),some()）\n这些方法传入函数，`forEach()`没有返回值，`map()`返回数组，`filter`返回为`true的数组`\n\n**every()**方法，查询数组中的项只要有一个条件不满足就返回false；\n\n![](https://upload-images.jianshu.io/upload_images/5541401-be4325c6265500db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**some()**方法，查询数组中的项，只要有一个项满足条件就会返回true;\n\n![](https://upload-images.jianshu.io/upload_images/5541401-bb86bc1c6e33d54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**filter()**方法过滤数组，返回满足条件的数组：\n\n![](https://upload-images.jianshu.io/upload_images/5541401-6aaaf8aa15ca47b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**map()**方法同样返回数组：\n\n![](https://upload-images.jianshu.io/upload_images/5541401-ddeb3937ea8c5a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**forEach()**方法跟for循环遍历数组一样，没有返回值：\n\n![](https://upload-images.jianshu.io/upload_images/5541401-f8547536fefd9f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####九：缩小方法（reduce，reduceRight）\n**reduce()**（从数组前面开始）,**reduceRight()**（从数组末尾开始），这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。\n语法：`arr.reduce(callback[, initialValue])`\n`reducer 函数`接收4个参数：\n`Accumulator (acc) (累计器)` , `Current Value (cur) (当前值)` , `Current Index (idx) (当前索引)`, `Source Array (src) (源数组)`\n，您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n```\nvar arr = [1,[2,[3,[6]]]];\nfunction reduceArr(arr){\n  return arr.reduce((prev,cur) => {return prev.concat(Array.isArray(cur) ? reduceArr(cur) : cur)},[])\n}\nreduceArr(arr); //[1, 2, 3, 6]\n\n//将二维数组转化为一维数组\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n```\nconst array1 = [[0, 1], [2, 3], [4, 5]].reduceRight(\n  (accumulator, currentValue) => accumulator.concat(currentValue)\n);\n\nconsole.log(array1);\n// expected output: Array [4, 5, 2, 3, 0, 1]\n```\n参考：\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\n","source":"_posts/Javascript数组方法总结（一）.md","raw":"---\ntitle: Javascript数组方法总结（一）\n---\n####一：检测数组的方法\n`Array.isArray()`用于确定传递的值是否是一个`Array`，返回`true` or `false`；\n```\nArray.isArray(new Array())\n//true\nArray.isArray(Array.prototype)\n//true\n```\n`instanceof` 和`Array.isArray()`\n当检测`Array`实例时, `Array.isArray` 优于 `instanceof`,因为`Array.isArray`能检测`iframes`.\n```\nvar iframe = document.createElement('iframe')\ndocument.body.appendChild(iframe)\nvar xArray = window.frames[window.frames.length - 1].Array\n> window.frames[window.frames.length - 1].Array\n< ƒ Array() { [native code] }\n> var arr = new xArray(1,2,3)\n> Array.isArray(arr)\n< true\n> arr instanceof xArray\n< true\n> arr instanceof Array\n< false\n```\nPolyfill：`Array.isArray()`是`es5`的方法，如果不支持可以用以下代码来创建该方法：\n```\n> Object.prototype.toString.call([1,2,3])\n< \"[object Array]\"\n\nif(!Array.isArray){\n  Array.prototype.isArray = function(arg){\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  }\n}\n```\n####二：转换方法（toString(),toLocalString(),valueOf()）\n所有对象都具有`toString()`,`toLocalString()`,`valueOf()`方法,调用`toString()`方法返回的是逗号分隔的字符串，为了创建字符串会调用数组每一项的`toString()`方法，`valueof()`返回的依然是数组。调用`join(‘分割符’)`方法返回分割符隔开的字符串，例如`‘hello&world’`；\n####三：栈方法（push、pop）\n栈方法`（LIFO:Last In First Out）`（在栈顶，后进先出）（在数组末尾操作数组）：\n```\nvar arr = [1,2,3,4];\narr.push(2,6,7)  ;  //push()返回数组的长度；\narr.pop();//pop()移除数组末尾项返回被移除的元素；\n```\n####四：队列方法（shift、unshift）\n队列方法（FIFO：First In First Out）（先进先出）（在数组前端操作数组）：\n```\n> var arr = [1,5,2,3,6];\n> arr.shift()\n< 1\n> arr.unshift(6)\n< 5\n> arr\n< [6, 5, 2, 3, 6]\narr.shift()  //移除数组的第一项，返回被移除的项；\narr.unshift()  //在数组前端添加项并返回数组的长度；\n```\n####五：重排序方法（reverse、sort）\n**reverse()**方法将数组中元素的位置颠倒,并返回该数组。该方法会`改变原数组`。\n**sort()**方法用[原地算法](https://en.wikipedia.org/wiki/In-place_algorithm)对数组的元素进行排序，并返回数组。排序算法现在是[稳定的](https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A9.A9.E5.AE.9A.E6.80.A7)。默认排序顺序是根据字符串Unicode码点。\n由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。\n语法：`arr.sort([compareFunction])`\n```\nvar arr = [1,2,3,4,5,6];\narr.sort((a,b) => a < b)  \n//返回：[6, 5, 4, 3, 2, 1],原数组会被改变\narr.reverse()  //将数组反转；\narr.sort()  //sort传入一个比较函数或者排序规则的函数，返回新数组；\n```\n####六：操作方法（concat(),slice(),splice()）\n**concat()** 拼接数组，基于当前数组创建一个新数组；\n**slice()** 传入位置索引截取数组，返回新数组，不会改变原来的数组；\n将类数组对象变为数组对象\n```\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\nlist(1,2,3)\n//(3) [1, 2, 3]\n```\n**splice()** 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。\n语法：`array.splice(start[, deleteCount[, item1[, item2[, ...]]]])`\n```\nvar myFish = [\"angel\", \"clown\", \"mandarin\", \"sturgeon\"];\nvar removed = myFish.splice(2, 0, \"drum\");   //从第 2 位开始删除 0 个元素，插入“drum”\n// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"mandarin\", \"sturgeon\"]\n// 被删除的元素: [], 没有元素被删除\n\nvar myFish = ['angel', 'clown', 'drum', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(3, 1);  //从第 3 位开始删除 1 个元素\n// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"sturgeon\"]\n// 被删除的元素: [\"mandarin\"]\n```\n```\nvar hello = ['jack','mate','mary','jhon']; \nhello.slice(1);  \n//返回[\"mate\", \"mary\", \"jhon\"] 原来数组不变[\"jack\", \"mate\", \"mary\", \"jhon\"]\n\nhello.splice(1,2,'first','second')\n[\"mate\", \"mary\"]   //返回被删除的像：[\"mary\", \"jhon\"]，\nhello\n[\"jack\", \"first\", \"second\", \"jhon\"]   //原数组被改变\n```\n####七：位置方法（indexOf(),lastIndexOf()）\nindexOf()（从数组开头查找）,lastIndexOf()（从数组结尾查找）\n 返回查找项在数组中的位置索引，如果找得到返回位索引，如果找不到返回-1\n```\nvar s = [1,5,6,2,1,3,'hello'];\ns.indexOf(1)\n0\ns.lastIndexOf(1)\n4\ns.lastIndexOf(4,4)\n-1\ns.indexOf(4,4)\n-1\n```\n####八：迭代方法（every(),filter(),forEach(),map(),some()）\n这些方法传入函数，`forEach()`没有返回值，`map()`返回数组，`filter`返回为`true的数组`\n\n**every()**方法，查询数组中的项只要有一个条件不满足就返回false；\n\n![](https://upload-images.jianshu.io/upload_images/5541401-be4325c6265500db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**some()**方法，查询数组中的项，只要有一个项满足条件就会返回true;\n\n![](https://upload-images.jianshu.io/upload_images/5541401-bb86bc1c6e33d54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**filter()**方法过滤数组，返回满足条件的数组：\n\n![](https://upload-images.jianshu.io/upload_images/5541401-6aaaf8aa15ca47b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**map()**方法同样返回数组：\n\n![](https://upload-images.jianshu.io/upload_images/5541401-ddeb3937ea8c5a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**forEach()**方法跟for循环遍历数组一样，没有返回值：\n\n![](https://upload-images.jianshu.io/upload_images/5541401-f8547536fefd9f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####九：缩小方法（reduce，reduceRight）\n**reduce()**（从数组前面开始）,**reduceRight()**（从数组末尾开始），这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。\n语法：`arr.reduce(callback[, initialValue])`\n`reducer 函数`接收4个参数：\n`Accumulator (acc) (累计器)` , `Current Value (cur) (当前值)` , `Current Index (idx) (当前索引)`, `Source Array (src) (源数组)`\n，您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。\n```\nvar arr = [1,[2,[3,[6]]]];\nfunction reduceArr(arr){\n  return arr.reduce((prev,cur) => {return prev.concat(Array.isArray(cur) ? reduceArr(cur) : cur)},[])\n}\nreduceArr(arr); //[1, 2, 3, 6]\n\n//将二维数组转化为一维数组\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n ( acc, cur ) => acc.concat(cur),\n []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n```\nconst array1 = [[0, 1], [2, 3], [4, 5]].reduceRight(\n  (accumulator, currentValue) => accumulator.concat(currentValue)\n);\n\nconsole.log(array1);\n// expected output: Array [4, 5, 2, 3, 0, 1]\n```\n参考：\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\n","slug":"Javascript数组方法总结（一）","published":1,"date":"2019-09-13T02:18:13.164Z","updated":"2019-09-13T09:08:37.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh7310003wsl6ke6bq41f","content":"<p>####一：检测数组的方法<br><code>Array.isArray()</code>用于确定传递的值是否是一个<code>Array</code>，返回<code>true</code> or <code>false</code>；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.isArray(new Array())</span><br><span class=\"line\">//true</span><br><span class=\"line\">Array.isArray(Array.prototype)</span><br><span class=\"line\">//true</span><br></pre></td></tr></table></figure>\n\n<p><code>instanceof</code> 和<code>Array.isArray()</code><br>当检测<code>Array</code>实例时, <code>Array.isArray</code> 优于 <code>instanceof</code>,因为<code>Array.isArray</code>能检测<code>iframes</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iframe = document.createElement(&apos;iframe&apos;)</span><br><span class=\"line\">document.body.appendChild(iframe)</span><br><span class=\"line\">var xArray = window.frames[window.frames.length - 1].Array</span><br><span class=\"line\">&gt; window.frames[window.frames.length - 1].Array</span><br><span class=\"line\">&lt; ƒ Array() &#123; [native code] &#125;</span><br><span class=\"line\">&gt; var arr = new xArray(1,2,3)</span><br><span class=\"line\">&gt; Array.isArray(arr)</span><br><span class=\"line\">&lt; true</span><br><span class=\"line\">&gt; arr instanceof xArray</span><br><span class=\"line\">&lt; true</span><br><span class=\"line\">&gt; arr instanceof Array</span><br><span class=\"line\">&lt; false</span><br></pre></td></tr></table></figure>\n\n<p>Polyfill：<code>Array.isArray()</code>是<code>es5</code>的方法，如果不支持可以用以下代码来创建该方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Object.prototype.toString.call([1,2,3])</span><br><span class=\"line\">&lt; &quot;[object Array]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if(!Array.isArray)&#123;</span><br><span class=\"line\">  Array.prototype.isArray = function(arg)&#123;</span><br><span class=\"line\">    return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####二：转换方法（toString(),toLocalString(),valueOf()）<br>所有对象都具有<code>toString()</code>,<code>toLocalString()</code>,<code>valueOf()</code>方法,调用<code>toString()</code>方法返回的是逗号分隔的字符串，为了创建字符串会调用数组每一项的<code>toString()</code>方法，<code>valueof()</code>返回的依然是数组。调用<code>join(‘分割符’)</code>方法返回分割符隔开的字符串，例如<code>‘hello&amp;world’</code>；</p>\n<p>####三：栈方法（push、pop）<br>栈方法<code>（LIFO:Last In First Out）</code>（在栈顶，后进先出）（在数组末尾操作数组）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4];</span><br><span class=\"line\">arr.push(2,6,7)  ;  //push()返回数组的长度；</span><br><span class=\"line\">arr.pop();//pop()移除数组末尾项返回被移除的元素；</span><br></pre></td></tr></table></figure>\n\n<p>####四：队列方法（shift、unshift）<br>队列方法（FIFO：First In First Out）（先进先出）（在数组前端操作数组）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var arr = [1,5,2,3,6];</span><br><span class=\"line\">&gt; arr.shift()</span><br><span class=\"line\">&lt; 1</span><br><span class=\"line\">&gt; arr.unshift(6)</span><br><span class=\"line\">&lt; 5</span><br><span class=\"line\">&gt; arr</span><br><span class=\"line\">&lt; [6, 5, 2, 3, 6]</span><br><span class=\"line\">arr.shift()  //移除数组的第一项，返回被移除的项；</span><br><span class=\"line\">arr.unshift()  //在数组前端添加项并返回数组的长度；</span><br></pre></td></tr></table></figure>\n\n<p>####五：重排序方法（reverse、sort）<br><strong>reverse()</strong>方法将数组中元素的位置颠倒,并返回该数组。该方法会<code>改变原数组</code>。<br><strong>sort()</strong>方法用<a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">原地算法</a>对数组的元素进行排序，并返回数组。排序算法现在是<a href=\"https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A9.A9.E5.AE.9A.E6.80.A7\" target=\"_blank\" rel=\"noopener\">稳定的</a>。默认排序顺序是根据字符串Unicode码点。<br>由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。<br>语法：<code>arr.sort([compareFunction])</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5,6];</span><br><span class=\"line\">arr.sort((a,b) =&gt; a &lt; b)  </span><br><span class=\"line\">//返回：[6, 5, 4, 3, 2, 1],原数组会被改变</span><br><span class=\"line\">arr.reverse()  //将数组反转；</span><br><span class=\"line\">arr.sort()  //sort传入一个比较函数或者排序规则的函数，返回新数组；</span><br></pre></td></tr></table></figure>\n\n<p>####六：操作方法（concat(),slice(),splice()）<br><strong>concat()</strong> 拼接数组，基于当前数组创建一个新数组；<br><strong>slice()</strong> 传入位置索引截取数组，返回新数组，不会改变原来的数组；<br>将类数组对象变为数组对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function list() &#123;</span><br><span class=\"line\">  return Array.prototype.slice.call(arguments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">list(1,2,3)</span><br><span class=\"line\">//(3) [1, 2, 3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>splice()</strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。<br>语法：<code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;];</span><br><span class=\"line\">var removed = myFish.splice(2, 0, &quot;drum&quot;);   //从第 2 位开始删除 0 个元素，插入“drum”</span><br><span class=\"line\">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]</span><br><span class=\"line\">// 被删除的元素: [], 没有元素被删除</span><br><span class=\"line\"></span><br><span class=\"line\">var myFish = [&apos;angel&apos;, &apos;clown&apos;, &apos;drum&apos;, &apos;mandarin&apos;, &apos;sturgeon&apos;];</span><br><span class=\"line\">var removed = myFish.splice(3, 1);  //从第 3 位开始删除 1 个元素</span><br><span class=\"line\">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;sturgeon&quot;]</span><br><span class=\"line\">// 被删除的元素: [&quot;mandarin&quot;]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var hello = [&apos;jack&apos;,&apos;mate&apos;,&apos;mary&apos;,&apos;jhon&apos;]; </span><br><span class=\"line\">hello.slice(1);  </span><br><span class=\"line\">//返回[&quot;mate&quot;, &quot;mary&quot;, &quot;jhon&quot;] 原来数组不变[&quot;jack&quot;, &quot;mate&quot;, &quot;mary&quot;, &quot;jhon&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">hello.splice(1,2,&apos;first&apos;,&apos;second&apos;)</span><br><span class=\"line\">[&quot;mate&quot;, &quot;mary&quot;]   //返回被删除的像：[&quot;mary&quot;, &quot;jhon&quot;]，</span><br><span class=\"line\">hello</span><br><span class=\"line\">[&quot;jack&quot;, &quot;first&quot;, &quot;second&quot;, &quot;jhon&quot;]   //原数组被改变</span><br></pre></td></tr></table></figure>\n\n<p>####七：位置方法（indexOf(),lastIndexOf()）<br>indexOf()（从数组开头查找）,lastIndexOf()（从数组结尾查找）<br> 返回查找项在数组中的位置索引，如果找得到返回位索引，如果找不到返回-1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = [1,5,6,2,1,3,&apos;hello&apos;];</span><br><span class=\"line\">s.indexOf(1)</span><br><span class=\"line\">0</span><br><span class=\"line\">s.lastIndexOf(1)</span><br><span class=\"line\">4</span><br><span class=\"line\">s.lastIndexOf(4,4)</span><br><span class=\"line\">-1</span><br><span class=\"line\">s.indexOf(4,4)</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<p>####八：迭代方法（every(),filter(),forEach(),map(),some()）<br>这些方法传入函数，<code>forEach()</code>没有返回值，<code>map()</code>返回数组，<code>filter</code>返回为<code>true的数组</code></p>\n<p><strong>every()</strong>方法，查询数组中的项只要有一个条件不满足就返回false；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-be4325c6265500db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>some()</strong>方法，查询数组中的项，只要有一个项满足条件就会返回true;</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-bb86bc1c6e33d54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>filter()</strong>方法过滤数组，返回满足条件的数组：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-6aaaf8aa15ca47b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>map()</strong>方法同样返回数组：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-ddeb3937ea8c5a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>forEach()</strong>方法跟for循环遍历数组一样，没有返回值：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f8547536fefd9f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####九：缩小方法（reduce，reduceRight）<br><strong>reduce()</strong>（从数组前面开始）,<strong>reduceRight()</strong>（从数组末尾开始），这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。<br>语法：<code>arr.reduce(callback[, initialValue])</code><br><code>reducer 函数</code>接收4个参数：<br><code>Accumulator (acc) (累计器)</code> , <code>Current Value (cur) (当前值)</code> , <code>Current Index (idx) (当前索引)</code>, <code>Source Array (src) (源数组)</code><br>，您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,[3,[6]]]];</span><br><span class=\"line\">function reduceArr(arr)&#123;</span><br><span class=\"line\">  return arr.reduce((prev,cur) =&gt; &#123;return prev.concat(Array.isArray(cur) ? reduceArr(cur) : cur)&#125;,[])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reduceArr(arr); //[1, 2, 3, 6]</span><br><span class=\"line\"></span><br><span class=\"line\">//将二维数组转化为一维数组</span><br><span class=\"line\">var flattened = [[0, 1], [2, 3], [4, 5]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br><span class=\"line\">// flattened is [0, 1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const array1 = [[0, 1], [2, 3], [4, 5]].reduceRight(</span><br><span class=\"line\">  (accumulator, currentValue) =&gt; accumulator.concat(currentValue)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(array1);</span><br><span class=\"line\">// expected output: Array [4, 5, 2, 3, 0, 1]</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####一：检测数组的方法<br><code>Array.isArray()</code>用于确定传递的值是否是一个<code>Array</code>，返回<code>true</code> or <code>false</code>；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Array.isArray(new Array())</span><br><span class=\"line\">//true</span><br><span class=\"line\">Array.isArray(Array.prototype)</span><br><span class=\"line\">//true</span><br></pre></td></tr></table></figure>\n\n<p><code>instanceof</code> 和<code>Array.isArray()</code><br>当检测<code>Array</code>实例时, <code>Array.isArray</code> 优于 <code>instanceof</code>,因为<code>Array.isArray</code>能检测<code>iframes</code>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var iframe = document.createElement(&apos;iframe&apos;)</span><br><span class=\"line\">document.body.appendChild(iframe)</span><br><span class=\"line\">var xArray = window.frames[window.frames.length - 1].Array</span><br><span class=\"line\">&gt; window.frames[window.frames.length - 1].Array</span><br><span class=\"line\">&lt; ƒ Array() &#123; [native code] &#125;</span><br><span class=\"line\">&gt; var arr = new xArray(1,2,3)</span><br><span class=\"line\">&gt; Array.isArray(arr)</span><br><span class=\"line\">&lt; true</span><br><span class=\"line\">&gt; arr instanceof xArray</span><br><span class=\"line\">&lt; true</span><br><span class=\"line\">&gt; arr instanceof Array</span><br><span class=\"line\">&lt; false</span><br></pre></td></tr></table></figure>\n\n<p>Polyfill：<code>Array.isArray()</code>是<code>es5</code>的方法，如果不支持可以用以下代码来创建该方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Object.prototype.toString.call([1,2,3])</span><br><span class=\"line\">&lt; &quot;[object Array]&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if(!Array.isArray)&#123;</span><br><span class=\"line\">  Array.prototype.isArray = function(arg)&#123;</span><br><span class=\"line\">    return Object.prototype.toString.call(arg) === &apos;[object Array]&apos;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####二：转换方法（toString(),toLocalString(),valueOf()）<br>所有对象都具有<code>toString()</code>,<code>toLocalString()</code>,<code>valueOf()</code>方法,调用<code>toString()</code>方法返回的是逗号分隔的字符串，为了创建字符串会调用数组每一项的<code>toString()</code>方法，<code>valueof()</code>返回的依然是数组。调用<code>join(‘分割符’)</code>方法返回分割符隔开的字符串，例如<code>‘hello&amp;world’</code>；</p>\n<p>####三：栈方法（push、pop）<br>栈方法<code>（LIFO:Last In First Out）</code>（在栈顶，后进先出）（在数组末尾操作数组）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4];</span><br><span class=\"line\">arr.push(2,6,7)  ;  //push()返回数组的长度；</span><br><span class=\"line\">arr.pop();//pop()移除数组末尾项返回被移除的元素；</span><br></pre></td></tr></table></figure>\n\n<p>####四：队列方法（shift、unshift）<br>队列方法（FIFO：First In First Out）（先进先出）（在数组前端操作数组）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; var arr = [1,5,2,3,6];</span><br><span class=\"line\">&gt; arr.shift()</span><br><span class=\"line\">&lt; 1</span><br><span class=\"line\">&gt; arr.unshift(6)</span><br><span class=\"line\">&lt; 5</span><br><span class=\"line\">&gt; arr</span><br><span class=\"line\">&lt; [6, 5, 2, 3, 6]</span><br><span class=\"line\">arr.shift()  //移除数组的第一项，返回被移除的项；</span><br><span class=\"line\">arr.unshift()  //在数组前端添加项并返回数组的长度；</span><br></pre></td></tr></table></figure>\n\n<p>####五：重排序方法（reverse、sort）<br><strong>reverse()</strong>方法将数组中元素的位置颠倒,并返回该数组。该方法会<code>改变原数组</code>。<br><strong>sort()</strong>方法用<a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\" rel=\"noopener\">原地算法</a>对数组的元素进行排序，并返回数组。排序算法现在是<a href=\"https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95#.E7.A9.A9.E5.AE.9A.E6.80.A7\" target=\"_blank\" rel=\"noopener\">稳定的</a>。默认排序顺序是根据字符串Unicode码点。<br>由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。<br>语法：<code>arr.sort([compareFunction])</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5,6];</span><br><span class=\"line\">arr.sort((a,b) =&gt; a &lt; b)  </span><br><span class=\"line\">//返回：[6, 5, 4, 3, 2, 1],原数组会被改变</span><br><span class=\"line\">arr.reverse()  //将数组反转；</span><br><span class=\"line\">arr.sort()  //sort传入一个比较函数或者排序规则的函数，返回新数组；</span><br></pre></td></tr></table></figure>\n\n<p>####六：操作方法（concat(),slice(),splice()）<br><strong>concat()</strong> 拼接数组，基于当前数组创建一个新数组；<br><strong>slice()</strong> 传入位置索引截取数组，返回新数组，不会改变原来的数组；<br>将类数组对象变为数组对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function list() &#123;</span><br><span class=\"line\">  return Array.prototype.slice.call(arguments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">list(1,2,3)</span><br><span class=\"line\">//(3) [1, 2, 3]</span><br></pre></td></tr></table></figure>\n\n<p><strong>splice()</strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。<br>语法：<code>array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myFish = [&quot;angel&quot;, &quot;clown&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;];</span><br><span class=\"line\">var removed = myFish.splice(2, 0, &quot;drum&quot;);   //从第 2 位开始删除 0 个元素，插入“drum”</span><br><span class=\"line\">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]</span><br><span class=\"line\">// 被删除的元素: [], 没有元素被删除</span><br><span class=\"line\"></span><br><span class=\"line\">var myFish = [&apos;angel&apos;, &apos;clown&apos;, &apos;drum&apos;, &apos;mandarin&apos;, &apos;sturgeon&apos;];</span><br><span class=\"line\">var removed = myFish.splice(3, 1);  //从第 3 位开始删除 1 个元素</span><br><span class=\"line\">// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;sturgeon&quot;]</span><br><span class=\"line\">// 被删除的元素: [&quot;mandarin&quot;]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var hello = [&apos;jack&apos;,&apos;mate&apos;,&apos;mary&apos;,&apos;jhon&apos;]; </span><br><span class=\"line\">hello.slice(1);  </span><br><span class=\"line\">//返回[&quot;mate&quot;, &quot;mary&quot;, &quot;jhon&quot;] 原来数组不变[&quot;jack&quot;, &quot;mate&quot;, &quot;mary&quot;, &quot;jhon&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">hello.splice(1,2,&apos;first&apos;,&apos;second&apos;)</span><br><span class=\"line\">[&quot;mate&quot;, &quot;mary&quot;]   //返回被删除的像：[&quot;mary&quot;, &quot;jhon&quot;]，</span><br><span class=\"line\">hello</span><br><span class=\"line\">[&quot;jack&quot;, &quot;first&quot;, &quot;second&quot;, &quot;jhon&quot;]   //原数组被改变</span><br></pre></td></tr></table></figure>\n\n<p>####七：位置方法（indexOf(),lastIndexOf()）<br>indexOf()（从数组开头查找）,lastIndexOf()（从数组结尾查找）<br> 返回查找项在数组中的位置索引，如果找得到返回位索引，如果找不到返回-1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = [1,5,6,2,1,3,&apos;hello&apos;];</span><br><span class=\"line\">s.indexOf(1)</span><br><span class=\"line\">0</span><br><span class=\"line\">s.lastIndexOf(1)</span><br><span class=\"line\">4</span><br><span class=\"line\">s.lastIndexOf(4,4)</span><br><span class=\"line\">-1</span><br><span class=\"line\">s.indexOf(4,4)</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n<p>####八：迭代方法（every(),filter(),forEach(),map(),some()）<br>这些方法传入函数，<code>forEach()</code>没有返回值，<code>map()</code>返回数组，<code>filter</code>返回为<code>true的数组</code></p>\n<p><strong>every()</strong>方法，查询数组中的项只要有一个条件不满足就返回false；</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-be4325c6265500db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>some()</strong>方法，查询数组中的项，只要有一个项满足条件就会返回true;</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-bb86bc1c6e33d54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>filter()</strong>方法过滤数组，返回满足条件的数组：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-6aaaf8aa15ca47b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>map()</strong>方法同样返回数组：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-ddeb3937ea8c5a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>forEach()</strong>方法跟for循环遍历数组一样，没有返回值：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f8547536fefd9f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####九：缩小方法（reduce，reduceRight）<br><strong>reduce()</strong>（从数组前面开始）,<strong>reduceRight()</strong>（从数组末尾开始），这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。<br>语法：<code>arr.reduce(callback[, initialValue])</code><br><code>reducer 函数</code>接收4个参数：<br><code>Accumulator (acc) (累计器)</code> , <code>Current Value (cur) (当前值)</code> , <code>Current Index (idx) (当前索引)</code>, <code>Source Array (src) (源数组)</code><br>，您的 reducer 函数的返回值分配给累计器，该返回值在数组的每个迭代中被记住，并最后成为最终的单个结果值。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,[2,[3,[6]]]];</span><br><span class=\"line\">function reduceArr(arr)&#123;</span><br><span class=\"line\">  return arr.reduce((prev,cur) =&gt; &#123;return prev.concat(Array.isArray(cur) ? reduceArr(cur) : cur)&#125;,[])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reduceArr(arr); //[1, 2, 3, 6]</span><br><span class=\"line\"></span><br><span class=\"line\">//将二维数组转化为一维数组</span><br><span class=\"line\">var flattened = [[0, 1], [2, 3], [4, 5]].reduce(</span><br><span class=\"line\"> ( acc, cur ) =&gt; acc.concat(cur),</span><br><span class=\"line\"> []</span><br><span class=\"line\">);</span><br><span class=\"line\">// flattened is [0, 1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const array1 = [[0, 1], [2, 3], [4, 5]].reduceRight(</span><br><span class=\"line\">  (accumulator, currentValue) =&gt; accumulator.concat(currentValue)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(array1);</span><br><span class=\"line\">// expected output: Array [4, 5, 2, 3, 0, 1]</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>\n"},{"title":"Javascript数组方法总结（二）","_content":"undefined","source":"_posts/Javascript数组方法总结（二）.md","raw":"---\ntitle: Javascript数组方法总结（二）\n---\nundefined","slug":"Javascript数组方法总结（二）","published":1,"date":"2019-09-13T02:18:12.626Z","updated":"2019-09-13T09:08:38.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh7330004wsl6y9cw2mm7","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"React事件系统","_content":"undefined","source":"_posts/React事件系统.md","raw":"---\ntitle: React事件系统\n---\nundefined","slug":"React事件系统","published":1,"date":"2019-09-13T02:18:12.129Z","updated":"2019-09-13T09:08:33.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh7340005wsl6o9p9la40","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"Tree-Shaking-和ES6-module","_content":"undefined","source":"_posts/Tree-Shaking-和ES6-module.md","raw":"---\ntitle: Tree-Shaking-和ES6-module\n---\nundefined","slug":"Tree-Shaking-和ES6-module","published":1,"date":"2019-09-13T02:18:12.173Z","updated":"2019-09-13T09:08:37.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh7360006wsl6xprsdu4v","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"UglifyJS-Webpack-Plugin","_content":"undefined","source":"_posts/UglifyJS-Webpack-Plugin.md","raw":"---\ntitle: UglifyJS-Webpack-Plugin\n---\nundefined","slug":"UglifyJS-Webpack-Plugin","published":1,"date":"2019-09-13T02:18:12.157Z","updated":"2019-09-13T09:08:38.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh7370007wsl67mliezbn","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"TypeScript-Node实现下载简书文章图片工具","_content":"####写在前面\n经常的写作的人都有备份的好习惯，为了防止自己的文章丢失，简书提供了`下载所有文章`功能，可以让作者将文章下载到本地保存，或者上传到自己的站点。\n![](https://upload-images.jianshu.io/upload_images/5541401-fa175038ada0a6cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n但是简书的图片是放在专门的图片服务器上的，下载所有文章并不包含文章中的所有图片。所以我们现在写个小工具，通过命令行的方式将文章中的所有图片下载本地保存。\n\n####需求实现步骤\n* 下载简书文章，解压到 A 目录；\n* 建一个 TypeScript + Node 项目，读取 A 目录中的所有 .md 文件；\n* 提取文件内容中的图片链接，下载下来；\n* 把下载的图片放到 B 目录/当前文章/ 中，用来分类；\n* 重构优化代码；\n\n下面按照这几个步骤一步步完成简书下载图片工具。\n\n####下载简书文章\n进入`我的简书 ->账号管理 打包下载全部的简书文章`即可，我是下载到了这个目录 `D:\\jianshu_article\\user-5541401-1565071963`，这个目录下的所有文件都是`文集/文章`的格式。接下来开始搭建项目结构。\n\n####TypeScript Node 搭建项目\n先在 github 上新建一个仓库，然后 clone 下来。开发工作一直在 master 分支上，然后每完成一步需求，新建一个分支用来保留记录，以后看的时候更清晰。\n\n新建一个仓库然后 clone 下来：\n`git clone git@github.com:mxcz213/download-jianshu-images.git`\n\n#####开始项目搭建：\n* 生成 package.json 文件；\n```\nnpm init -f\n```\n* 下载项目依赖 ：typescript node 的ts 版本，download下载文件包，runscript 用来执行 shell 命令，ts-node 用来开发调试；\n```\nnpm install @types/node download runscript ts-node typescript --save-dev\n```\n* 配置 tsconfig 文件，用来按照这个规则编译 ts 文件为 js 文件。执行命令 `tsc --init`，自动生成 `tsconfig.json` 文件；\n```\n//tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",  \n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist/\", \n    \"strict\": true,\n    \"esModuleInterop\": true                  \n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n```\n* 配置 package.json 文件的 scripts 字段，启动项目和编译命令\n```\n{\n  \"name\": \"download-jianshu-images\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node + typescript 实现下载简书文章中所有的图片链接\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"tsc\",\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/mxcz213/download-jianshu-images.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mxcz213/download-jianshu-images/issues\"\n  },\n  \"homepage\": \"https://github.com/mxcz213/download-jianshu-images#readme\",\n  \"devDependencies\": {\n    \"@types/node\": \"^12.6.9\",\n    \"download\": \"^7.1.0\",\n    \"runscript\": \"^1.4.0\",\n    \"ts-node\": \"^8.3.0\",\n    \"typescript\": \"^3.5.3\"\n  }\n}\n```\n* 配置 vscode 的调试脚本 launch.json\n```\n//.vscode/launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"Current TS File\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/node_modules/ts-node/dist/bin.js\",\n            // \"program\": \"${workspaceRoot}/test.js\",\n            \"args\": [\n                \"${relativeFile}\"\n            ],\n            \"cwd\": \"${workspaceRoot}\",\n            \"protocol\": \"inspector\"\n        }\n    ]\n}\n```\n* 添加 .gitignore 文件配置忽略提交的目录\n```\n//.gitignore\n/node_modules\n```\n* 新建 dist 目录用来放编译之后的 js 文件\n* 新建 src 源代码文件目录\n\n####具体代码实现，新建 src/index.ts 文件\n```\n//src index.ts\nconst fs = require('fs')\nconst path = require('path')\nconst runScript = require('runscript')\nconst download = require('download')\n\n//windows中用户复制的目录\nlet originDir: string = 'D:\\\\jianshu_article\\\\user-5541401-1565071963\\\\'\nlet targetDir: string = 'E:\\\\workCode\\\\download-jianshu-images\\\\jianshu_article\\\\'\n\nconst readmeUrlReg: RegExp = /\\s!\\[\\]\\(https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+\\)\\s/g\nconst imageUrlReg: RegExp = /https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+/g\n\n//用户通过命令行工具输入命令比如：node dist/index.js 简书解压目录 目标存储图片目录\nprocess.argv.forEach((val, index) => {\n    console.log(`${index}: ${val}`)\n});\n\ntry {\n    originDir = process.argv[2] ? process.argv[2] : originDir\n    targetDir = process.argv[3] ? process.argv[3] : targetDir\n} catch(e) {\n    console.log('获取命令参数错误', e)\n}\n\nconst downloadImages = (imgurl: string[], path: string) => {   \n    let newUrlArr: any[] = []\n    imgurl.forEach((item: any) => {\n        if(item.match(imageUrlReg)){\n            newUrlArr.push(item.match(imageUrlReg)[0])\n        }\n    })\n    console.log(newUrlArr)\n    Promise.all(newUrlArr.map((url: string) => {\n        download(url, path)\n    })).then(() => {\n       console.log('all files downloaded')\n    })\n}\n\nconst runFunction = async () => {\n    //shell ls拿到所有的.md文章\n    const { stdout } = await runScript('ls **/*.md', {\n        cwd: originDir,\n        stdio: 'pipe'\n    })\n    let files: string[] = stdout.toString().split('\\n')\n    let num: number = 0\n    try {\n        files.forEach((fileitem: any, index: number) => {\n            if(fileitem){\n                let filepath: string = fileitem.split('.md')[0].split('/').join('\\\\')\n                let dirStr: string = `${targetDir}\\\\${filepath}`                \n                runScript(`mkdir ${dirStr}`, { stdio: 'pipe' })\n                .then((stdio: any) => {\n                    let fileContent = fs.readFileSync(path.join(originDir, fileitem.split('/').join('\\\\')), { encoding: 'utf8'})\n                    let urlList: any = fileContent.match(readmeUrlReg)\n                    if(urlList && urlList.length > 0){\n                        downloadImages(urlList, dirStr)\n                    }\n                })\n            }\n        })\n    } catch(e) {\n        console.log(e)\n    }\n}\nrunFunction()\n```\n* 执行命令 `npm run build` 编译 ts 文件\n* 执行命令`node . D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img `，下载图片\n`node .` 命令会到 package.json 文件中找到 main 字段执行入口文件。\n`process.argv` 会获取到命令行参数。\n\n接下来提交文件到 master 分支：\n```\ngit add .\ngit commit -m \"download jianshu images\"\ngit push\n```\n然后根据 master 新建一个分支，用来保存这次的提交历史：\n```\ngit checkout -b node_tool\ngit pull origin master\ngit push\n```\n#### 实现工具命令，如 jianshu  ...\n配置命令行，通过 package.json 文件的 bin 字段，然后新建 bin 目录，在 bin 目录下新建 jianshu 文件；\n```\n//package.json\n{\n  ...\n  \"bin\": {\n    \"jianshu\": \"bin/jianshu\"\n  }\n  ...\n}\n```\n```\n//bin/jianshu\n#!/usr/bin/env node\n\nrequire('../dist/index');\n```\n配置完就可以通过命令 `jianshu D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img` 实现下载图片。\n\n通过`const [, , sourceDir, targetDir] = process.argv;`来获取命令行参数。\n\n提交代码之后，这一步同样新建 node_cli 分支用来保存历史：\n```\ngit checkout -b node_cli\ngit pull origin master\ngit pull\n```\n####代码重构优化\n上面的代码只是实现的简单的功能，流程并不清晰，现在来重构代码，使主流程变的清晰。\n\n**代码重构的原则：主流程要清晰**\n\n每个函数只做一件事，有两个以上的函数，有内部函数式，就要考虑把这每个函数放到单独的文件里，然后用模块导入的方式。\n\n#####以上代码展现的问题：\n* 1. handleDir getArticleContent 重复判断平台和路径，没有把判断平台提出来\n* 2. getMarkdownImageUrls getRealImageUrl 重复使用相似的正则，没使用exec和正则的捕获组\n* 3. 小函数嵌套太严重，一个函数能搞定的\n* 4. 没有异常判断，没有log\n* 5. 逻辑层次不清晰，分了好多层\n* 6. 关键注释缺失，例如files这个是相对路径的列表，不注明的话，以后肯定不知道\n\n所以接下来就要重构这些代码，主要根据以下分类原则来实现模块的拆分：\n\n#####分类原则\n\n哪些是项目独有的逻辑（业务逻辑），\n哪些是通用逻辑（可复用的），\n哪些是模板代码（没啥用但是要写的）\n\n根据以上原则，拆分出来工具函数 log，文件操作；核心函数 libs。\n```\n//src/utils/log.ts\nconst log = (str: string) => {\n    console.log(str);\n}\n const error = (str: string) => {\n    console.error(str);\n}\nconst warn = (str: string) => {\n    console.warn(str);\n}\nexport {\n    log,\n    error,\n    warn\n}\n```\n```\n//src/utils/fs.ts\nconst fs = require('fs');\nconst runScript = require('runscript');\nconst download = require('download');\n\nconst read = (path: string, options?: {}) => {\n    let fileContent = fs.readFileSync(path, options);\n    return fileContent;\n}\nconst createDir = async (targetDir: string) => {\n    await runScript(`mkdir ${targetDir}`);\n}\nconst deleteDir = async (targetDir: string) => {\n    await runScript(`rd /s/q ${targetDir}`);\n}\nconst isExistDir = (targetDir: string): boolean => {\n    return fs.existsSync(targetDir);\n}\nconst downloadFile = async(url: string, targetDir: string) => {\n    await download(url, targetDir);\n}\n\nexport {\n    read,\n    createDir,\n    deleteDir,\n    isExistDir,\n    downloadFile\n}\n```\n```\n//src/libs/lib.ts\nconst runScript = require('runscript');\nimport { log } from '../utils/log';\n\n//sourceDir：简书文章目录\nexport const getAllMarkdownFiles = async (sourceDir: string) => {\n    //ls **/*.md 查询二级目录下的所有.md后缀的文件\n    //stdio: pipe 在父进程和子进程之间建立管道\n    const { stdout } = await runScript('ls **/*.md', {\n        cwd: sourceDir,\n        stdio: 'pipe'\n    });\n    const files: string[] = stdout.toString().split('\\n');\n\n    //去掉ls命令产生的尾部空行\n    files.pop();\n    log('获取所有的简书文章列表；');\n    return files;\n}\n\n//获取图片url的markdown写法![](https://....)\nexport const getMarkdownImageUrls = (fileContent: string) => {\n    const urlRegExp = /\\!\\[.*\\]\\((https?:\\/\\/.+?)\\)/g;\n\n    const imageUrls: string[] = [];\n    while(true) {\n        const match = urlRegExp.exec(fileContent);\n        if(match === null) {\n            break;\n        }\n        \n        const [, url] = match;\n        imageUrls.push(url);\n    }\n    return imageUrls;\n}\n```\n主入口函数：\n```\n//src/index.ts\nimport path from 'path';\nimport { log } from './utils/log';\nimport { read, createDir, deleteDir, isExistDir, downloadFile } from './utils/fs';\nimport { getAllMarkdownFiles, getMarkdownImageUrls } from './libs/lib';\n\n//入口函数\nconst main = async () => {\n    //平台判断\n    const { platform } = process;\n    const isWindows: boolean = platform === 'win32';\n\n    //获取命令行参数\n    const [, , sourceDir, targetDir] = process.argv;\n\n    //获取markdown文件列表\n    const files: string[] = await getAllMarkdownFiles(sourceDir);\n\n    //下载文件列表中每个文章的图片\n    for(const file of files){\n        // file 是相对路径 例如：\"2017-2018/前端模块化总结.md\"\n\n        // 兼容 windows 系统路径规则\n        let platFile: string = isWindows ? `${file.split('.md')[0].split('/').join('\\\\')}.md` : file;\n        const filepath: string = platFile.split('.md')[0];\n\n        //读取文件内容\n        const filecontent = read(path.join(sourceDir, platFile), { encoding: 'utf8'});\n        \n        //根据 md 文件名，创建目标文件夹，如果目标文件夹存在，则删除重建\n        const newTargetDir: string = path.join(targetDir, filepath);\n        if(isExistDir(newTargetDir)){\n            await deleteDir(newTargetDir);\n        }\n        await createDir(newTargetDir);\n\n        //找出图片，下载图片到目标目录\n        const urlList: string[] = getMarkdownImageUrls(filecontent);\n        for(const url of urlList){\n            await downloadFile(url, newTargetDir);\n        }\n    }\n\n    log('所有文章中的图片已下载成功！');\n}\nmain();\n```\n提交代码到 master 分支，然后新建 node-cli-refactory 分支用来保存重构历史。\n```\ngit checkout -b node-cli-refactory\ngit pull origin master\ngit push\n```\n最后这个下载图片的小工具就做好。\n\n总结：在写代码的过程中，一定要分析什么是通用工具类，什么是独有的业务逻辑类，该模块化的模块化，目的只有一个就是：**主流程要清晰**。\n\n**项目地址：https://github.com/mxcz213/download-jianshu-images**\n\n参考：\nhttps://www.npmjs.com/package/runscript\nhttps://www.npmjs.com/package/download\nhttps://www.npmjs.cn/files/package.json/\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/TypeScript-Node实现下载简书文章图片工具.md","raw":"---\ntitle: TypeScript-Node实现下载简书文章图片工具\n---\n####写在前面\n经常的写作的人都有备份的好习惯，为了防止自己的文章丢失，简书提供了`下载所有文章`功能，可以让作者将文章下载到本地保存，或者上传到自己的站点。\n![](https://upload-images.jianshu.io/upload_images/5541401-fa175038ada0a6cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n但是简书的图片是放在专门的图片服务器上的，下载所有文章并不包含文章中的所有图片。所以我们现在写个小工具，通过命令行的方式将文章中的所有图片下载本地保存。\n\n####需求实现步骤\n* 下载简书文章，解压到 A 目录；\n* 建一个 TypeScript + Node 项目，读取 A 目录中的所有 .md 文件；\n* 提取文件内容中的图片链接，下载下来；\n* 把下载的图片放到 B 目录/当前文章/ 中，用来分类；\n* 重构优化代码；\n\n下面按照这几个步骤一步步完成简书下载图片工具。\n\n####下载简书文章\n进入`我的简书 ->账号管理 打包下载全部的简书文章`即可，我是下载到了这个目录 `D:\\jianshu_article\\user-5541401-1565071963`，这个目录下的所有文件都是`文集/文章`的格式。接下来开始搭建项目结构。\n\n####TypeScript Node 搭建项目\n先在 github 上新建一个仓库，然后 clone 下来。开发工作一直在 master 分支上，然后每完成一步需求，新建一个分支用来保留记录，以后看的时候更清晰。\n\n新建一个仓库然后 clone 下来：\n`git clone git@github.com:mxcz213/download-jianshu-images.git`\n\n#####开始项目搭建：\n* 生成 package.json 文件；\n```\nnpm init -f\n```\n* 下载项目依赖 ：typescript node 的ts 版本，download下载文件包，runscript 用来执行 shell 命令，ts-node 用来开发调试；\n```\nnpm install @types/node download runscript ts-node typescript --save-dev\n```\n* 配置 tsconfig 文件，用来按照这个规则编译 ts 文件为 js 文件。执行命令 `tsc --init`，自动生成 `tsconfig.json` 文件；\n```\n//tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",  \n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist/\", \n    \"strict\": true,\n    \"esModuleInterop\": true                  \n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\"]\n}\n```\n* 配置 package.json 文件的 scripts 字段，启动项目和编译命令\n```\n{\n  \"name\": \"download-jianshu-images\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node + typescript 实现下载简书文章中所有的图片链接\",\n  \"main\": \"dist/index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"tsc\",\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/mxcz213/download-jianshu-images.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mxcz213/download-jianshu-images/issues\"\n  },\n  \"homepage\": \"https://github.com/mxcz213/download-jianshu-images#readme\",\n  \"devDependencies\": {\n    \"@types/node\": \"^12.6.9\",\n    \"download\": \"^7.1.0\",\n    \"runscript\": \"^1.4.0\",\n    \"ts-node\": \"^8.3.0\",\n    \"typescript\": \"^3.5.3\"\n  }\n}\n```\n* 配置 vscode 的调试脚本 launch.json\n```\n//.vscode/launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n\n        {\n            \"name\": \"Current TS File\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/node_modules/ts-node/dist/bin.js\",\n            // \"program\": \"${workspaceRoot}/test.js\",\n            \"args\": [\n                \"${relativeFile}\"\n            ],\n            \"cwd\": \"${workspaceRoot}\",\n            \"protocol\": \"inspector\"\n        }\n    ]\n}\n```\n* 添加 .gitignore 文件配置忽略提交的目录\n```\n//.gitignore\n/node_modules\n```\n* 新建 dist 目录用来放编译之后的 js 文件\n* 新建 src 源代码文件目录\n\n####具体代码实现，新建 src/index.ts 文件\n```\n//src index.ts\nconst fs = require('fs')\nconst path = require('path')\nconst runScript = require('runscript')\nconst download = require('download')\n\n//windows中用户复制的目录\nlet originDir: string = 'D:\\\\jianshu_article\\\\user-5541401-1565071963\\\\'\nlet targetDir: string = 'E:\\\\workCode\\\\download-jianshu-images\\\\jianshu_article\\\\'\n\nconst readmeUrlReg: RegExp = /\\s!\\[\\]\\(https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+\\)\\s/g\nconst imageUrlReg: RegExp = /https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+/g\n\n//用户通过命令行工具输入命令比如：node dist/index.js 简书解压目录 目标存储图片目录\nprocess.argv.forEach((val, index) => {\n    console.log(`${index}: ${val}`)\n});\n\ntry {\n    originDir = process.argv[2] ? process.argv[2] : originDir\n    targetDir = process.argv[3] ? process.argv[3] : targetDir\n} catch(e) {\n    console.log('获取命令参数错误', e)\n}\n\nconst downloadImages = (imgurl: string[], path: string) => {   \n    let newUrlArr: any[] = []\n    imgurl.forEach((item: any) => {\n        if(item.match(imageUrlReg)){\n            newUrlArr.push(item.match(imageUrlReg)[0])\n        }\n    })\n    console.log(newUrlArr)\n    Promise.all(newUrlArr.map((url: string) => {\n        download(url, path)\n    })).then(() => {\n       console.log('all files downloaded')\n    })\n}\n\nconst runFunction = async () => {\n    //shell ls拿到所有的.md文章\n    const { stdout } = await runScript('ls **/*.md', {\n        cwd: originDir,\n        stdio: 'pipe'\n    })\n    let files: string[] = stdout.toString().split('\\n')\n    let num: number = 0\n    try {\n        files.forEach((fileitem: any, index: number) => {\n            if(fileitem){\n                let filepath: string = fileitem.split('.md')[0].split('/').join('\\\\')\n                let dirStr: string = `${targetDir}\\\\${filepath}`                \n                runScript(`mkdir ${dirStr}`, { stdio: 'pipe' })\n                .then((stdio: any) => {\n                    let fileContent = fs.readFileSync(path.join(originDir, fileitem.split('/').join('\\\\')), { encoding: 'utf8'})\n                    let urlList: any = fileContent.match(readmeUrlReg)\n                    if(urlList && urlList.length > 0){\n                        downloadImages(urlList, dirStr)\n                    }\n                })\n            }\n        })\n    } catch(e) {\n        console.log(e)\n    }\n}\nrunFunction()\n```\n* 执行命令 `npm run build` 编译 ts 文件\n* 执行命令`node . D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img `，下载图片\n`node .` 命令会到 package.json 文件中找到 main 字段执行入口文件。\n`process.argv` 会获取到命令行参数。\n\n接下来提交文件到 master 分支：\n```\ngit add .\ngit commit -m \"download jianshu images\"\ngit push\n```\n然后根据 master 新建一个分支，用来保存这次的提交历史：\n```\ngit checkout -b node_tool\ngit pull origin master\ngit push\n```\n#### 实现工具命令，如 jianshu  ...\n配置命令行，通过 package.json 文件的 bin 字段，然后新建 bin 目录，在 bin 目录下新建 jianshu 文件；\n```\n//package.json\n{\n  ...\n  \"bin\": {\n    \"jianshu\": \"bin/jianshu\"\n  }\n  ...\n}\n```\n```\n//bin/jianshu\n#!/usr/bin/env node\n\nrequire('../dist/index');\n```\n配置完就可以通过命令 `jianshu D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img` 实现下载图片。\n\n通过`const [, , sourceDir, targetDir] = process.argv;`来获取命令行参数。\n\n提交代码之后，这一步同样新建 node_cli 分支用来保存历史：\n```\ngit checkout -b node_cli\ngit pull origin master\ngit pull\n```\n####代码重构优化\n上面的代码只是实现的简单的功能，流程并不清晰，现在来重构代码，使主流程变的清晰。\n\n**代码重构的原则：主流程要清晰**\n\n每个函数只做一件事，有两个以上的函数，有内部函数式，就要考虑把这每个函数放到单独的文件里，然后用模块导入的方式。\n\n#####以上代码展现的问题：\n* 1. handleDir getArticleContent 重复判断平台和路径，没有把判断平台提出来\n* 2. getMarkdownImageUrls getRealImageUrl 重复使用相似的正则，没使用exec和正则的捕获组\n* 3. 小函数嵌套太严重，一个函数能搞定的\n* 4. 没有异常判断，没有log\n* 5. 逻辑层次不清晰，分了好多层\n* 6. 关键注释缺失，例如files这个是相对路径的列表，不注明的话，以后肯定不知道\n\n所以接下来就要重构这些代码，主要根据以下分类原则来实现模块的拆分：\n\n#####分类原则\n\n哪些是项目独有的逻辑（业务逻辑），\n哪些是通用逻辑（可复用的），\n哪些是模板代码（没啥用但是要写的）\n\n根据以上原则，拆分出来工具函数 log，文件操作；核心函数 libs。\n```\n//src/utils/log.ts\nconst log = (str: string) => {\n    console.log(str);\n}\n const error = (str: string) => {\n    console.error(str);\n}\nconst warn = (str: string) => {\n    console.warn(str);\n}\nexport {\n    log,\n    error,\n    warn\n}\n```\n```\n//src/utils/fs.ts\nconst fs = require('fs');\nconst runScript = require('runscript');\nconst download = require('download');\n\nconst read = (path: string, options?: {}) => {\n    let fileContent = fs.readFileSync(path, options);\n    return fileContent;\n}\nconst createDir = async (targetDir: string) => {\n    await runScript(`mkdir ${targetDir}`);\n}\nconst deleteDir = async (targetDir: string) => {\n    await runScript(`rd /s/q ${targetDir}`);\n}\nconst isExistDir = (targetDir: string): boolean => {\n    return fs.existsSync(targetDir);\n}\nconst downloadFile = async(url: string, targetDir: string) => {\n    await download(url, targetDir);\n}\n\nexport {\n    read,\n    createDir,\n    deleteDir,\n    isExistDir,\n    downloadFile\n}\n```\n```\n//src/libs/lib.ts\nconst runScript = require('runscript');\nimport { log } from '../utils/log';\n\n//sourceDir：简书文章目录\nexport const getAllMarkdownFiles = async (sourceDir: string) => {\n    //ls **/*.md 查询二级目录下的所有.md后缀的文件\n    //stdio: pipe 在父进程和子进程之间建立管道\n    const { stdout } = await runScript('ls **/*.md', {\n        cwd: sourceDir,\n        stdio: 'pipe'\n    });\n    const files: string[] = stdout.toString().split('\\n');\n\n    //去掉ls命令产生的尾部空行\n    files.pop();\n    log('获取所有的简书文章列表；');\n    return files;\n}\n\n//获取图片url的markdown写法![](https://....)\nexport const getMarkdownImageUrls = (fileContent: string) => {\n    const urlRegExp = /\\!\\[.*\\]\\((https?:\\/\\/.+?)\\)/g;\n\n    const imageUrls: string[] = [];\n    while(true) {\n        const match = urlRegExp.exec(fileContent);\n        if(match === null) {\n            break;\n        }\n        \n        const [, url] = match;\n        imageUrls.push(url);\n    }\n    return imageUrls;\n}\n```\n主入口函数：\n```\n//src/index.ts\nimport path from 'path';\nimport { log } from './utils/log';\nimport { read, createDir, deleteDir, isExistDir, downloadFile } from './utils/fs';\nimport { getAllMarkdownFiles, getMarkdownImageUrls } from './libs/lib';\n\n//入口函数\nconst main = async () => {\n    //平台判断\n    const { platform } = process;\n    const isWindows: boolean = platform === 'win32';\n\n    //获取命令行参数\n    const [, , sourceDir, targetDir] = process.argv;\n\n    //获取markdown文件列表\n    const files: string[] = await getAllMarkdownFiles(sourceDir);\n\n    //下载文件列表中每个文章的图片\n    for(const file of files){\n        // file 是相对路径 例如：\"2017-2018/前端模块化总结.md\"\n\n        // 兼容 windows 系统路径规则\n        let platFile: string = isWindows ? `${file.split('.md')[0].split('/').join('\\\\')}.md` : file;\n        const filepath: string = platFile.split('.md')[0];\n\n        //读取文件内容\n        const filecontent = read(path.join(sourceDir, platFile), { encoding: 'utf8'});\n        \n        //根据 md 文件名，创建目标文件夹，如果目标文件夹存在，则删除重建\n        const newTargetDir: string = path.join(targetDir, filepath);\n        if(isExistDir(newTargetDir)){\n            await deleteDir(newTargetDir);\n        }\n        await createDir(newTargetDir);\n\n        //找出图片，下载图片到目标目录\n        const urlList: string[] = getMarkdownImageUrls(filecontent);\n        for(const url of urlList){\n            await downloadFile(url, newTargetDir);\n        }\n    }\n\n    log('所有文章中的图片已下载成功！');\n}\nmain();\n```\n提交代码到 master 分支，然后新建 node-cli-refactory 分支用来保存重构历史。\n```\ngit checkout -b node-cli-refactory\ngit pull origin master\ngit push\n```\n最后这个下载图片的小工具就做好。\n\n总结：在写代码的过程中，一定要分析什么是通用工具类，什么是独有的业务逻辑类，该模块化的模块化，目的只有一个就是：**主流程要清晰**。\n\n**项目地址：https://github.com/mxcz213/download-jianshu-images**\n\n参考：\nhttps://www.npmjs.com/package/runscript\nhttps://www.npmjs.com/package/download\nhttps://www.npmjs.cn/files/package.json/\n\n\n\n\n\n\n\n\n\n\n\n","slug":"TypeScript-Node实现下载简书文章图片工具","published":1,"date":"2019-09-13T02:18:13.162Z","updated":"2019-09-13T09:08:37.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh7390008wsl6q7vbcjlr","content":"<p>####写在前面<br>经常的写作的人都有备份的好习惯，为了防止自己的文章丢失，简书提供了<code>下载所有文章</code>功能，可以让作者将文章下载到本地保存，或者上传到自己的站点。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-fa175038ada0a6cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>但是简书的图片是放在专门的图片服务器上的，下载所有文章并不包含文章中的所有图片。所以我们现在写个小工具，通过命令行的方式将文章中的所有图片下载本地保存。</p>\n<p>####需求实现步骤</p>\n<ul>\n<li>下载简书文章，解压到 A 目录；</li>\n<li>建一个 TypeScript + Node 项目，读取 A 目录中的所有 .md 文件；</li>\n<li>提取文件内容中的图片链接，下载下来；</li>\n<li>把下载的图片放到 B 目录/当前文章/ 中，用来分类；</li>\n<li>重构优化代码；</li>\n</ul>\n<p>下面按照这几个步骤一步步完成简书下载图片工具。</p>\n<p>####下载简书文章<br>进入<code>我的简书 -&gt;账号管理 打包下载全部的简书文章</code>即可，我是下载到了这个目录 <code>D:\\jianshu_article\\user-5541401-1565071963</code>，这个目录下的所有文件都是<code>文集/文章</code>的格式。接下来开始搭建项目结构。</p>\n<p>####TypeScript Node 搭建项目<br>先在 github 上新建一个仓库，然后 clone 下来。开发工作一直在 master 分支上，然后每完成一步需求，新建一个分支用来保留记录，以后看的时候更清晰。</p>\n<p>新建一个仓库然后 clone 下来：<br><code>git clone git@github.com:mxcz213/download-jianshu-images.git</code></p>\n<p>#####开始项目搭建：</p>\n<ul>\n<li><p>生成 package.json 文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -f</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载项目依赖 ：typescript node 的ts 版本，download下载文件包，runscript 用来执行 shell 命令，ts-node 用来开发调试；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/node download runscript ts-node typescript --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 tsconfig 文件，用来按照这个规则编译 ts 文件为 js 文件。执行命令 <code>tsc --init</code>，自动生成 <code>tsconfig.json</code> 文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;target&quot;: &quot;es5&quot;,  </span><br><span class=\"line\">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">    &quot;outDir&quot;: &quot;./dist/&quot;, </span><br><span class=\"line\">    &quot;strict&quot;: true,</span><br><span class=\"line\">    &quot;esModuleInterop&quot;: true                  </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;include&quot;: [&quot;src/**/*&quot;],</span><br><span class=\"line\">  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 package.json 文件的 scripts 字段，启动项目和编译命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;download-jianshu-images&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;Node + typescript 实现下载简书文章中所有的图片链接&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;dist/index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;tsc&quot;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;repository&quot;: &#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;git&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;git+https://github.com/mxcz213/download-jianshu-images.git&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;bugs&quot;: &#123;</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://github.com/mxcz213/download-jianshu-images/issues&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;homepage&quot;: &quot;https://github.com/mxcz213/download-jianshu-images#readme&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@types/node&quot;: &quot;^12.6.9&quot;,</span><br><span class=\"line\">    &quot;download&quot;: &quot;^7.1.0&quot;,</span><br><span class=\"line\">    &quot;runscript&quot;: &quot;^1.4.0&quot;,</span><br><span class=\"line\">    &quot;ts-node&quot;: &quot;^8.3.0&quot;,</span><br><span class=\"line\">    &quot;typescript&quot;: &quot;^3.5.3&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 vscode 的调试脚本 launch.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.vscode/launch.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;Current TS File&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;node&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/node_modules/ts-node/dist/bin.js&quot;,</span><br><span class=\"line\">            // &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/test.js&quot;,</span><br><span class=\"line\">            &quot;args&quot;: [</span><br><span class=\"line\">                &quot;$&#123;relativeFile&#125;&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">            &quot;protocol&quot;: &quot;inspector&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 .gitignore 文件配置忽略提交的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.gitignore</span><br><span class=\"line\">/node_modules</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建 dist 目录用来放编译之后的 js 文件</p>\n</li>\n<li><p>新建 src 源代码文件目录</p>\n</li>\n</ul>\n<p>####具体代码实现，新建 src/index.ts 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src index.ts</span><br><span class=\"line\">const fs = require(&apos;fs&apos;)</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const runScript = require(&apos;runscript&apos;)</span><br><span class=\"line\">const download = require(&apos;download&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//windows中用户复制的目录</span><br><span class=\"line\">let originDir: string = &apos;D:\\\\jianshu_article\\\\user-5541401-1565071963\\\\&apos;</span><br><span class=\"line\">let targetDir: string = &apos;E:\\\\workCode\\\\download-jianshu-images\\\\jianshu_article\\\\&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const readmeUrlReg: RegExp = /\\s!\\[\\]\\(https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+\\)\\s/g</span><br><span class=\"line\">const imageUrlReg: RegExp = /https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+/g</span><br><span class=\"line\"></span><br><span class=\"line\">//用户通过命令行工具输入命令比如：node dist/index.js 简书解压目录 目标存储图片目录</span><br><span class=\"line\">process.argv.forEach((val, index) =&gt; &#123;</span><br><span class=\"line\">    console.log(`$&#123;index&#125;: $&#123;val&#125;`)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    originDir = process.argv[2] ? process.argv[2] : originDir</span><br><span class=\"line\">    targetDir = process.argv[3] ? process.argv[3] : targetDir</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    console.log(&apos;获取命令参数错误&apos;, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const downloadImages = (imgurl: string[], path: string) =&gt; &#123;   </span><br><span class=\"line\">    let newUrlArr: any[] = []</span><br><span class=\"line\">    imgurl.forEach((item: any) =&gt; &#123;</span><br><span class=\"line\">        if(item.match(imageUrlReg))&#123;</span><br><span class=\"line\">            newUrlArr.push(item.match(imageUrlReg)[0])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(newUrlArr)</span><br><span class=\"line\">    Promise.all(newUrlArr.map((url: string) =&gt; &#123;</span><br><span class=\"line\">        download(url, path)</span><br><span class=\"line\">    &#125;)).then(() =&gt; &#123;</span><br><span class=\"line\">       console.log(&apos;all files downloaded&apos;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const runFunction = async () =&gt; &#123;</span><br><span class=\"line\">    //shell ls拿到所有的.md文章</span><br><span class=\"line\">    const &#123; stdout &#125; = await runScript(&apos;ls **/*.md&apos;, &#123;</span><br><span class=\"line\">        cwd: originDir,</span><br><span class=\"line\">        stdio: &apos;pipe&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    let files: string[] = stdout.toString().split(&apos;\\n&apos;)</span><br><span class=\"line\">    let num: number = 0</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        files.forEach((fileitem: any, index: number) =&gt; &#123;</span><br><span class=\"line\">            if(fileitem)&#123;</span><br><span class=\"line\">                let filepath: string = fileitem.split(&apos;.md&apos;)[0].split(&apos;/&apos;).join(&apos;\\\\&apos;)</span><br><span class=\"line\">                let dirStr: string = `$&#123;targetDir&#125;\\\\$&#123;filepath&#125;`                </span><br><span class=\"line\">                runScript(`mkdir $&#123;dirStr&#125;`, &#123; stdio: &apos;pipe&apos; &#125;)</span><br><span class=\"line\">                .then((stdio: any) =&gt; &#123;</span><br><span class=\"line\">                    let fileContent = fs.readFileSync(path.join(originDir, fileitem.split(&apos;/&apos;).join(&apos;\\\\&apos;)), &#123; encoding: &apos;utf8&apos;&#125;)</span><br><span class=\"line\">                    let urlList: any = fileContent.match(readmeUrlReg)</span><br><span class=\"line\">                    if(urlList &amp;&amp; urlList.length &gt; 0)&#123;</span><br><span class=\"line\">                        downloadImages(urlList, dirStr)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; catch(e) &#123;</span><br><span class=\"line\">        console.log(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">runFunction()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令 <code>npm run build</code> 编译 ts 文件</li>\n<li>执行命令<code>node . D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img</code>，下载图片<br><code>node .</code> 命令会到 package.json 文件中找到 main 字段执行入口文件。<br><code>process.argv</code> 会获取到命令行参数。</li>\n</ul>\n<p>接下来提交文件到 master 分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;download jianshu images&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>然后根据 master 新建一个分支，用来保存这次的提交历史：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b node_tool</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现工具命令，如-jianshu-…\"><a href=\"#实现工具命令，如-jianshu-…\" class=\"headerlink\" title=\"实现工具命令，如 jianshu  …\"></a>实现工具命令，如 jianshu  …</h4><p>配置命令行，通过 package.json 文件的 bin 字段，然后新建 bin 目录，在 bin 目录下新建 jianshu 文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;bin&quot;: &#123;</span><br><span class=\"line\">    &quot;jianshu&quot;: &quot;bin/jianshu&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//bin/jianshu</span><br><span class=\"line\">#!/usr/bin/env node</span><br><span class=\"line\"></span><br><span class=\"line\">require(&apos;../dist/index&apos;);</span><br></pre></td></tr></table></figure>\n\n<p>配置完就可以通过命令 <code>jianshu D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img</code> 实现下载图片。</p>\n<p>通过<code>const [, , sourceDir, targetDir] = process.argv;</code>来获取命令行参数。</p>\n<p>提交代码之后，这一步同样新建 node_cli 分支用来保存历史：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b node_cli</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>####代码重构优化<br>上面的代码只是实现的简单的功能，流程并不清晰，现在来重构代码，使主流程变的清晰。</p>\n<p><strong>代码重构的原则：主流程要清晰</strong></p>\n<p>每个函数只做一件事，有两个以上的函数，有内部函数式，就要考虑把这每个函数放到单独的文件里，然后用模块导入的方式。</p>\n<p>#####以上代码展现的问题：</p>\n<ul>\n<li><ol>\n<li>handleDir getArticleContent 重复判断平台和路径，没有把判断平台提出来</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>getMarkdownImageUrls getRealImageUrl 重复使用相似的正则，没使用exec和正则的捕获组</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>小函数嵌套太严重，一个函数能搞定的</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>没有异常判断，没有log</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>逻辑层次不清晰，分了好多层</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>关键注释缺失，例如files这个是相对路径的列表，不注明的话，以后肯定不知道</li>\n</ol>\n</li>\n</ul>\n<p>所以接下来就要重构这些代码，主要根据以下分类原则来实现模块的拆分：</p>\n<p>#####分类原则</p>\n<p>哪些是项目独有的逻辑（业务逻辑），<br>哪些是通用逻辑（可复用的），<br>哪些是模板代码（没啥用但是要写的）</p>\n<p>根据以上原则，拆分出来工具函数 log，文件操作；核心函数 libs。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/utils/log.ts</span><br><span class=\"line\">const log = (str: string) =&gt; &#123;</span><br><span class=\"line\">    console.log(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> const error = (str: string) =&gt; &#123;</span><br><span class=\"line\">    console.error(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const warn = (str: string) =&gt; &#123;</span><br><span class=\"line\">    console.warn(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    log,</span><br><span class=\"line\">    error,</span><br><span class=\"line\">    warn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/utils/fs.ts</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">const runScript = require(&apos;runscript&apos;);</span><br><span class=\"line\">const download = require(&apos;download&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const read = (path: string, options?: &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">    let fileContent = fs.readFileSync(path, options);</span><br><span class=\"line\">    return fileContent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const createDir = async (targetDir: string) =&gt; &#123;</span><br><span class=\"line\">    await runScript(`mkdir $&#123;targetDir&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const deleteDir = async (targetDir: string) =&gt; &#123;</span><br><span class=\"line\">    await runScript(`rd /s/q $&#123;targetDir&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const isExistDir = (targetDir: string): boolean =&gt; &#123;</span><br><span class=\"line\">    return fs.existsSync(targetDir);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const downloadFile = async(url: string, targetDir: string) =&gt; &#123;</span><br><span class=\"line\">    await download(url, targetDir);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    read,</span><br><span class=\"line\">    createDir,</span><br><span class=\"line\">    deleteDir,</span><br><span class=\"line\">    isExistDir,</span><br><span class=\"line\">    downloadFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/libs/lib.ts</span><br><span class=\"line\">const runScript = require(&apos;runscript&apos;);</span><br><span class=\"line\">import &#123; log &#125; from &apos;../utils/log&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//sourceDir：简书文章目录</span><br><span class=\"line\">export const getAllMarkdownFiles = async (sourceDir: string) =&gt; &#123;</span><br><span class=\"line\">    //ls **/*.md 查询二级目录下的所有.md后缀的文件</span><br><span class=\"line\">    //stdio: pipe 在父进程和子进程之间建立管道</span><br><span class=\"line\">    const &#123; stdout &#125; = await runScript(&apos;ls **/*.md&apos;, &#123;</span><br><span class=\"line\">        cwd: sourceDir,</span><br><span class=\"line\">        stdio: &apos;pipe&apos;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    const files: string[] = stdout.toString().split(&apos;\\n&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //去掉ls命令产生的尾部空行</span><br><span class=\"line\">    files.pop();</span><br><span class=\"line\">    log(&apos;获取所有的简书文章列表；&apos;);</span><br><span class=\"line\">    return files;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取图片url的markdown写法![](https://....)</span><br><span class=\"line\">export const getMarkdownImageUrls = (fileContent: string) =&gt; &#123;</span><br><span class=\"line\">    const urlRegExp = /\\!\\[.*\\]\\((https?:\\/\\/.+?)\\)/g;</span><br><span class=\"line\"></span><br><span class=\"line\">    const imageUrls: string[] = [];</span><br><span class=\"line\">    while(true) &#123;</span><br><span class=\"line\">        const match = urlRegExp.exec(fileContent);</span><br><span class=\"line\">        if(match === null) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        const [, url] = match;</span><br><span class=\"line\">        imageUrls.push(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return imageUrls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主入口函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.ts</span><br><span class=\"line\">import path from &apos;path&apos;;</span><br><span class=\"line\">import &#123; log &#125; from &apos;./utils/log&apos;;</span><br><span class=\"line\">import &#123; read, createDir, deleteDir, isExistDir, downloadFile &#125; from &apos;./utils/fs&apos;;</span><br><span class=\"line\">import &#123; getAllMarkdownFiles, getMarkdownImageUrls &#125; from &apos;./libs/lib&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//入口函数</span><br><span class=\"line\">const main = async () =&gt; &#123;</span><br><span class=\"line\">    //平台判断</span><br><span class=\"line\">    const &#123; platform &#125; = process;</span><br><span class=\"line\">    const isWindows: boolean = platform === &apos;win32&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取命令行参数</span><br><span class=\"line\">    const [, , sourceDir, targetDir] = process.argv;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取markdown文件列表</span><br><span class=\"line\">    const files: string[] = await getAllMarkdownFiles(sourceDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    //下载文件列表中每个文章的图片</span><br><span class=\"line\">    for(const file of files)&#123;</span><br><span class=\"line\">        // file 是相对路径 例如：&quot;2017-2018/前端模块化总结.md&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 兼容 windows 系统路径规则</span><br><span class=\"line\">        let platFile: string = isWindows ? `$&#123;file.split(&apos;.md&apos;)[0].split(&apos;/&apos;).join(&apos;\\\\&apos;)&#125;.md` : file;</span><br><span class=\"line\">        const filepath: string = platFile.split(&apos;.md&apos;)[0];</span><br><span class=\"line\"></span><br><span class=\"line\">        //读取文件内容</span><br><span class=\"line\">        const filecontent = read(path.join(sourceDir, platFile), &#123; encoding: &apos;utf8&apos;&#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        //根据 md 文件名，创建目标文件夹，如果目标文件夹存在，则删除重建</span><br><span class=\"line\">        const newTargetDir: string = path.join(targetDir, filepath);</span><br><span class=\"line\">        if(isExistDir(newTargetDir))&#123;</span><br><span class=\"line\">            await deleteDir(newTargetDir);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        await createDir(newTargetDir);</span><br><span class=\"line\"></span><br><span class=\"line\">        //找出图片，下载图片到目标目录</span><br><span class=\"line\">        const urlList: string[] = getMarkdownImageUrls(filecontent);</span><br><span class=\"line\">        for(const url of urlList)&#123;</span><br><span class=\"line\">            await downloadFile(url, newTargetDir);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    log(&apos;所有文章中的图片已下载成功！&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<p>提交代码到 master 分支，然后新建 node-cli-refactory 分支用来保存重构历史。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b node-cli-refactory</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>最后这个下载图片的小工具就做好。</p>\n<p>总结：在写代码的过程中，一定要分析什么是通用工具类，什么是独有的业务逻辑类，该模块化的模块化，目的只有一个就是：<strong>主流程要清晰</strong>。</p>\n<p><strong>项目地址：<a href=\"https://github.com/mxcz213/download-jianshu-images\" target=\"_blank\" rel=\"noopener\">https://github.com/mxcz213/download-jianshu-images</a></strong></p>\n<p>参考：<br><a href=\"https://www.npmjs.com/package/runscript\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/runscript</a><br><a href=\"https://www.npmjs.com/package/download\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/download</a><br><a href=\"https://www.npmjs.cn/files/package.json/\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.cn/files/package.json/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####写在前面<br>经常的写作的人都有备份的好习惯，为了防止自己的文章丢失，简书提供了<code>下载所有文章</code>功能，可以让作者将文章下载到本地保存，或者上传到自己的站点。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-fa175038ada0a6cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>但是简书的图片是放在专门的图片服务器上的，下载所有文章并不包含文章中的所有图片。所以我们现在写个小工具，通过命令行的方式将文章中的所有图片下载本地保存。</p>\n<p>####需求实现步骤</p>\n<ul>\n<li>下载简书文章，解压到 A 目录；</li>\n<li>建一个 TypeScript + Node 项目，读取 A 目录中的所有 .md 文件；</li>\n<li>提取文件内容中的图片链接，下载下来；</li>\n<li>把下载的图片放到 B 目录/当前文章/ 中，用来分类；</li>\n<li>重构优化代码；</li>\n</ul>\n<p>下面按照这几个步骤一步步完成简书下载图片工具。</p>\n<p>####下载简书文章<br>进入<code>我的简书 -&gt;账号管理 打包下载全部的简书文章</code>即可，我是下载到了这个目录 <code>D:\\jianshu_article\\user-5541401-1565071963</code>，这个目录下的所有文件都是<code>文集/文章</code>的格式。接下来开始搭建项目结构。</p>\n<p>####TypeScript Node 搭建项目<br>先在 github 上新建一个仓库，然后 clone 下来。开发工作一直在 master 分支上，然后每完成一步需求，新建一个分支用来保留记录，以后看的时候更清晰。</p>\n<p>新建一个仓库然后 clone 下来：<br><code>git clone git@github.com:mxcz213/download-jianshu-images.git</code></p>\n<p>#####开始项目搭建：</p>\n<ul>\n<li><p>生成 package.json 文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -f</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载项目依赖 ：typescript node 的ts 版本，download下载文件包，runscript 用来执行 shell 命令，ts-node 用来开发调试；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @types/node download runscript ts-node typescript --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 tsconfig 文件，用来按照这个规则编译 ts 文件为 js 文件。执行命令 <code>tsc --init</code>，自动生成 <code>tsconfig.json</code> 文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//tsconfig.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;compilerOptions&quot;: &#123;</span><br><span class=\"line\">    &quot;target&quot;: &quot;es5&quot;,  </span><br><span class=\"line\">    &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class=\"line\">    &quot;outDir&quot;: &quot;./dist/&quot;, </span><br><span class=\"line\">    &quot;strict&quot;: true,</span><br><span class=\"line\">    &quot;esModuleInterop&quot;: true                  </span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;include&quot;: [&quot;src/**/*&quot;],</span><br><span class=\"line\">  &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 package.json 文件的 scripts 字段，启动项目和编译命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;download-jianshu-images&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;Node + typescript 实现下载简书文章中所有的图片链接&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;dist/index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;tsc&quot;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;repository&quot;: &#123;</span><br><span class=\"line\">    &quot;type&quot;: &quot;git&quot;,</span><br><span class=\"line\">    &quot;url&quot;: &quot;git+https://github.com/mxcz213/download-jianshu-images.git&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;keywords&quot;: [],</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;bugs&quot;: &#123;</span><br><span class=\"line\">    &quot;url&quot;: &quot;https://github.com/mxcz213/download-jianshu-images/issues&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;homepage&quot;: &quot;https://github.com/mxcz213/download-jianshu-images#readme&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@types/node&quot;: &quot;^12.6.9&quot;,</span><br><span class=\"line\">    &quot;download&quot;: &quot;^7.1.0&quot;,</span><br><span class=\"line\">    &quot;runscript&quot;: &quot;^1.4.0&quot;,</span><br><span class=\"line\">    &quot;ts-node&quot;: &quot;^8.3.0&quot;,</span><br><span class=\"line\">    &quot;typescript&quot;: &quot;^3.5.3&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 vscode 的调试脚本 launch.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.vscode/launch.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;Current TS File&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;node&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/node_modules/ts-node/dist/bin.js&quot;,</span><br><span class=\"line\">            // &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;/test.js&quot;,</span><br><span class=\"line\">            &quot;args&quot;: [</span><br><span class=\"line\">                &quot;$&#123;relativeFile&#125;&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">            &quot;protocol&quot;: &quot;inspector&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加 .gitignore 文件配置忽略提交的目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.gitignore</span><br><span class=\"line\">/node_modules</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>新建 dist 目录用来放编译之后的 js 文件</p>\n</li>\n<li><p>新建 src 源代码文件目录</p>\n</li>\n</ul>\n<p>####具体代码实现，新建 src/index.ts 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src index.ts</span><br><span class=\"line\">const fs = require(&apos;fs&apos;)</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const runScript = require(&apos;runscript&apos;)</span><br><span class=\"line\">const download = require(&apos;download&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">//windows中用户复制的目录</span><br><span class=\"line\">let originDir: string = &apos;D:\\\\jianshu_article\\\\user-5541401-1565071963\\\\&apos;</span><br><span class=\"line\">let targetDir: string = &apos;E:\\\\workCode\\\\download-jianshu-images\\\\jianshu_article\\\\&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const readmeUrlReg: RegExp = /\\s!\\[\\]\\(https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+\\)\\s/g</span><br><span class=\"line\">const imageUrlReg: RegExp = /https:\\/\\/\\upload-images.jianshu.io\\/upload_images\\/[a-zA-Z0-9-_?%./]+/g</span><br><span class=\"line\"></span><br><span class=\"line\">//用户通过命令行工具输入命令比如：node dist/index.js 简书解压目录 目标存储图片目录</span><br><span class=\"line\">process.argv.forEach((val, index) =&gt; &#123;</span><br><span class=\"line\">    console.log(`$&#123;index&#125;: $&#123;val&#125;`)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    originDir = process.argv[2] ? process.argv[2] : originDir</span><br><span class=\"line\">    targetDir = process.argv[3] ? process.argv[3] : targetDir</span><br><span class=\"line\">&#125; catch(e) &#123;</span><br><span class=\"line\">    console.log(&apos;获取命令参数错误&apos;, e)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const downloadImages = (imgurl: string[], path: string) =&gt; &#123;   </span><br><span class=\"line\">    let newUrlArr: any[] = []</span><br><span class=\"line\">    imgurl.forEach((item: any) =&gt; &#123;</span><br><span class=\"line\">        if(item.match(imageUrlReg))&#123;</span><br><span class=\"line\">            newUrlArr.push(item.match(imageUrlReg)[0])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    console.log(newUrlArr)</span><br><span class=\"line\">    Promise.all(newUrlArr.map((url: string) =&gt; &#123;</span><br><span class=\"line\">        download(url, path)</span><br><span class=\"line\">    &#125;)).then(() =&gt; &#123;</span><br><span class=\"line\">       console.log(&apos;all files downloaded&apos;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const runFunction = async () =&gt; &#123;</span><br><span class=\"line\">    //shell ls拿到所有的.md文章</span><br><span class=\"line\">    const &#123; stdout &#125; = await runScript(&apos;ls **/*.md&apos;, &#123;</span><br><span class=\"line\">        cwd: originDir,</span><br><span class=\"line\">        stdio: &apos;pipe&apos;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    let files: string[] = stdout.toString().split(&apos;\\n&apos;)</span><br><span class=\"line\">    let num: number = 0</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        files.forEach((fileitem: any, index: number) =&gt; &#123;</span><br><span class=\"line\">            if(fileitem)&#123;</span><br><span class=\"line\">                let filepath: string = fileitem.split(&apos;.md&apos;)[0].split(&apos;/&apos;).join(&apos;\\\\&apos;)</span><br><span class=\"line\">                let dirStr: string = `$&#123;targetDir&#125;\\\\$&#123;filepath&#125;`                </span><br><span class=\"line\">                runScript(`mkdir $&#123;dirStr&#125;`, &#123; stdio: &apos;pipe&apos; &#125;)</span><br><span class=\"line\">                .then((stdio: any) =&gt; &#123;</span><br><span class=\"line\">                    let fileContent = fs.readFileSync(path.join(originDir, fileitem.split(&apos;/&apos;).join(&apos;\\\\&apos;)), &#123; encoding: &apos;utf8&apos;&#125;)</span><br><span class=\"line\">                    let urlList: any = fileContent.match(readmeUrlReg)</span><br><span class=\"line\">                    if(urlList &amp;&amp; urlList.length &gt; 0)&#123;</span><br><span class=\"line\">                        downloadImages(urlList, dirStr)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; catch(e) &#123;</span><br><span class=\"line\">        console.log(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">runFunction()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令 <code>npm run build</code> 编译 ts 文件</li>\n<li>执行命令<code>node . D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img</code>，下载图片<br><code>node .</code> 命令会到 package.json 文件中找到 main 字段执行入口文件。<br><code>process.argv</code> 会获取到命令行参数。</li>\n</ul>\n<p>接下来提交文件到 master 分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;download jianshu images&quot;</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>然后根据 master 新建一个分支，用来保存这次的提交历史：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b node_tool</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现工具命令，如-jianshu-…\"><a href=\"#实现工具命令，如-jianshu-…\" class=\"headerlink\" title=\"实现工具命令，如 jianshu  …\"></a>实现工具命令，如 jianshu  …</h4><p>配置命令行，通过 package.json 文件的 bin 字段，然后新建 bin 目录，在 bin 目录下新建 jianshu 文件；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;bin&quot;: &#123;</span><br><span class=\"line\">    &quot;jianshu&quot;: &quot;bin/jianshu&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//bin/jianshu</span><br><span class=\"line\">#!/usr/bin/env node</span><br><span class=\"line\"></span><br><span class=\"line\">require(&apos;../dist/index&apos;);</span><br></pre></td></tr></table></figure>\n\n<p>配置完就可以通过命令 <code>jianshu D:\\jianshu_article\\user-5541401-1565071963 D:\\jianshu_article\\article_img</code> 实现下载图片。</p>\n<p>通过<code>const [, , sourceDir, targetDir] = process.argv;</code>来获取命令行参数。</p>\n<p>提交代码之后，这一步同样新建 node_cli 分支用来保存历史：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b node_cli</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n\n<p>####代码重构优化<br>上面的代码只是实现的简单的功能，流程并不清晰，现在来重构代码，使主流程变的清晰。</p>\n<p><strong>代码重构的原则：主流程要清晰</strong></p>\n<p>每个函数只做一件事，有两个以上的函数，有内部函数式，就要考虑把这每个函数放到单独的文件里，然后用模块导入的方式。</p>\n<p>#####以上代码展现的问题：</p>\n<ul>\n<li><ol>\n<li>handleDir getArticleContent 重复判断平台和路径，没有把判断平台提出来</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>getMarkdownImageUrls getRealImageUrl 重复使用相似的正则，没使用exec和正则的捕获组</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>小函数嵌套太严重，一个函数能搞定的</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>没有异常判断，没有log</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>逻辑层次不清晰，分了好多层</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>关键注释缺失，例如files这个是相对路径的列表，不注明的话，以后肯定不知道</li>\n</ol>\n</li>\n</ul>\n<p>所以接下来就要重构这些代码，主要根据以下分类原则来实现模块的拆分：</p>\n<p>#####分类原则</p>\n<p>哪些是项目独有的逻辑（业务逻辑），<br>哪些是通用逻辑（可复用的），<br>哪些是模板代码（没啥用但是要写的）</p>\n<p>根据以上原则，拆分出来工具函数 log，文件操作；核心函数 libs。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/utils/log.ts</span><br><span class=\"line\">const log = (str: string) =&gt; &#123;</span><br><span class=\"line\">    console.log(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> const error = (str: string) =&gt; &#123;</span><br><span class=\"line\">    console.error(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const warn = (str: string) =&gt; &#123;</span><br><span class=\"line\">    console.warn(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    log,</span><br><span class=\"line\">    error,</span><br><span class=\"line\">    warn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/utils/fs.ts</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">const runScript = require(&apos;runscript&apos;);</span><br><span class=\"line\">const download = require(&apos;download&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">const read = (path: string, options?: &#123;&#125;) =&gt; &#123;</span><br><span class=\"line\">    let fileContent = fs.readFileSync(path, options);</span><br><span class=\"line\">    return fileContent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const createDir = async (targetDir: string) =&gt; &#123;</span><br><span class=\"line\">    await runScript(`mkdir $&#123;targetDir&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const deleteDir = async (targetDir: string) =&gt; &#123;</span><br><span class=\"line\">    await runScript(`rd /s/q $&#123;targetDir&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const isExistDir = (targetDir: string): boolean =&gt; &#123;</span><br><span class=\"line\">    return fs.existsSync(targetDir);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const downloadFile = async(url: string, targetDir: string) =&gt; &#123;</span><br><span class=\"line\">    await download(url, targetDir);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    read,</span><br><span class=\"line\">    createDir,</span><br><span class=\"line\">    deleteDir,</span><br><span class=\"line\">    isExistDir,</span><br><span class=\"line\">    downloadFile</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/libs/lib.ts</span><br><span class=\"line\">const runScript = require(&apos;runscript&apos;);</span><br><span class=\"line\">import &#123; log &#125; from &apos;../utils/log&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//sourceDir：简书文章目录</span><br><span class=\"line\">export const getAllMarkdownFiles = async (sourceDir: string) =&gt; &#123;</span><br><span class=\"line\">    //ls **/*.md 查询二级目录下的所有.md后缀的文件</span><br><span class=\"line\">    //stdio: pipe 在父进程和子进程之间建立管道</span><br><span class=\"line\">    const &#123; stdout &#125; = await runScript(&apos;ls **/*.md&apos;, &#123;</span><br><span class=\"line\">        cwd: sourceDir,</span><br><span class=\"line\">        stdio: &apos;pipe&apos;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    const files: string[] = stdout.toString().split(&apos;\\n&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //去掉ls命令产生的尾部空行</span><br><span class=\"line\">    files.pop();</span><br><span class=\"line\">    log(&apos;获取所有的简书文章列表；&apos;);</span><br><span class=\"line\">    return files;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//获取图片url的markdown写法![](https://....)</span><br><span class=\"line\">export const getMarkdownImageUrls = (fileContent: string) =&gt; &#123;</span><br><span class=\"line\">    const urlRegExp = /\\!\\[.*\\]\\((https?:\\/\\/.+?)\\)/g;</span><br><span class=\"line\"></span><br><span class=\"line\">    const imageUrls: string[] = [];</span><br><span class=\"line\">    while(true) &#123;</span><br><span class=\"line\">        const match = urlRegExp.exec(fileContent);</span><br><span class=\"line\">        if(match === null) &#123;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        const [, url] = match;</span><br><span class=\"line\">        imageUrls.push(url);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return imageUrls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>主入口函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.ts</span><br><span class=\"line\">import path from &apos;path&apos;;</span><br><span class=\"line\">import &#123; log &#125; from &apos;./utils/log&apos;;</span><br><span class=\"line\">import &#123; read, createDir, deleteDir, isExistDir, downloadFile &#125; from &apos;./utils/fs&apos;;</span><br><span class=\"line\">import &#123; getAllMarkdownFiles, getMarkdownImageUrls &#125; from &apos;./libs/lib&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//入口函数</span><br><span class=\"line\">const main = async () =&gt; &#123;</span><br><span class=\"line\">    //平台判断</span><br><span class=\"line\">    const &#123; platform &#125; = process;</span><br><span class=\"line\">    const isWindows: boolean = platform === &apos;win32&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取命令行参数</span><br><span class=\"line\">    const [, , sourceDir, targetDir] = process.argv;</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取markdown文件列表</span><br><span class=\"line\">    const files: string[] = await getAllMarkdownFiles(sourceDir);</span><br><span class=\"line\"></span><br><span class=\"line\">    //下载文件列表中每个文章的图片</span><br><span class=\"line\">    for(const file of files)&#123;</span><br><span class=\"line\">        // file 是相对路径 例如：&quot;2017-2018/前端模块化总结.md&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 兼容 windows 系统路径规则</span><br><span class=\"line\">        let platFile: string = isWindows ? `$&#123;file.split(&apos;.md&apos;)[0].split(&apos;/&apos;).join(&apos;\\\\&apos;)&#125;.md` : file;</span><br><span class=\"line\">        const filepath: string = platFile.split(&apos;.md&apos;)[0];</span><br><span class=\"line\"></span><br><span class=\"line\">        //读取文件内容</span><br><span class=\"line\">        const filecontent = read(path.join(sourceDir, platFile), &#123; encoding: &apos;utf8&apos;&#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        //根据 md 文件名，创建目标文件夹，如果目标文件夹存在，则删除重建</span><br><span class=\"line\">        const newTargetDir: string = path.join(targetDir, filepath);</span><br><span class=\"line\">        if(isExistDir(newTargetDir))&#123;</span><br><span class=\"line\">            await deleteDir(newTargetDir);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        await createDir(newTargetDir);</span><br><span class=\"line\"></span><br><span class=\"line\">        //找出图片，下载图片到目标目录</span><br><span class=\"line\">        const urlList: string[] = getMarkdownImageUrls(filecontent);</span><br><span class=\"line\">        for(const url of urlList)&#123;</span><br><span class=\"line\">            await downloadFile(url, newTargetDir);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    log(&apos;所有文章中的图片已下载成功！&apos;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<p>提交代码到 master 分支，然后新建 node-cli-refactory 分支用来保存重构历史。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b node-cli-refactory</span><br><span class=\"line\">git pull origin master</span><br><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n\n<p>最后这个下载图片的小工具就做好。</p>\n<p>总结：在写代码的过程中，一定要分析什么是通用工具类，什么是独有的业务逻辑类，该模块化的模块化，目的只有一个就是：<strong>主流程要清晰</strong>。</p>\n<p><strong>项目地址：<a href=\"https://github.com/mxcz213/download-jianshu-images\" target=\"_blank\" rel=\"noopener\">https://github.com/mxcz213/download-jianshu-images</a></strong></p>\n<p>参考：<br><a href=\"https://www.npmjs.com/package/runscript\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/runscript</a><br><a href=\"https://www.npmjs.com/package/download\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/download</a><br><a href=\"https://www.npmjs.cn/files/package.json/\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.cn/files/package.json/</a></p>\n"},{"title":"css实现垂直居中，三栏布局","_content":"undefined","source":"_posts/css实现垂直居中，三栏布局.md","raw":"---\ntitle: css实现垂直居中，三栏布局\n---\nundefined","slug":"css实现垂直居中，三栏布局","published":1,"date":"2019-09-13T02:18:13.145Z","updated":"2019-09-13T09:08:37.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73b0009wsl6udwzfgyw","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"css3实现一个小loading和加载进度动画","_content":"undefined","source":"_posts/css3实现一个小loading和加载进度动画.md","raw":"---\ntitle: css3实现一个小loading和加载进度动画\n---\nundefined","slug":"css3实现一个小loading和加载进度动画","published":1,"date":"2019-09-13T02:18:12.183Z","updated":"2019-09-13T09:08:38.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73d000awsl6nim51xyk","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"git-rebase-操作总结（合并git-commit的message）","_content":"第一步：新建一个干净的仓库，做五次修改提交，不要建分支，只做修改提交推送到远程\n\n第二步：想要修改某一次的`commit` 的`message`，比如把`hello git`改成`1`\n```\n$ git log\ncommit 6eb562ed87eb5f763bba96eb0eef5e795d8acbaa\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:33:27 2019 +0800\n\n    5\n\ncommit 76ea4563339fda46a895c8ccf5fdf8be9de98210\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:32:59 2019 +0800\n\n    4\n\ncommit 073583226ceb34ea4f3a144d23e2cc0c4186269a\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:32:38 2019 +0800\n\n    3\n\ncommit 99d522288e7e28694b477021ca6556b2ca7ce61f\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:31:44 2019 +0800\n\n    2\n\ncommit 43ca7897fa5a1bb56b95729338db6fced7be69c0\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:31:09 2019 +0800\n\n    hello git\n\ncommit 8e455b2861b5b28c907f76b080bb0394e461495b\nAuthor: mxcz213 <496182124@qq.com>\nDate:   Fri Mar 15 15:29:15 2019 +0800\n\n    Initial commit\n```\n复制这条`meaasge`的 `hello git`,复制`commitId`：`8e455b2861b5b28c907f76b080bb0394e461495b`，\n使用`git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b`命令\n```\n$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b\n```\n出现这个画面：\n![](https://upload-images.jianshu.io/upload_images/5541401-b24295102a62220f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按`i`将`vim`切到插入状态，修改`pick`成`edit`,最后按`Esc`退出键，再按`:wq`保存修改，按`回车键Enter`结束\n```\n$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b\nStopped at 30432ba... hello git\nYou can amend the commit now, with\n\n        git commit --amend\n\nOnce you are satisfied with your changes, run\n\n        git rebase --continue\n```\n现在是修改状态就可以修改提交的message了,使用命令`git commit --amend`\n```\nmxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)\n$ git commit --amend\n[detached HEAD ea2c59f] 1\n 1 file changed, 1 insertion(+)\n create mode 100644 operate_git.txt\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-aa4376cd279df05e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后按照提示的使用命令`git rebase --continue`\n```\nmxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)\n$ git rebase --continue\nSuccessfully rebased and updated refs/heads/master.\n```\n最后使用`git push -f`提交到远程\n```\nmxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master)\n$ git push -f\nCounting objects: 16, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (10/10), done.\nWriting objects: 100% (15/15), 1.33 KiB, done.\nTotal 15 (delta 0), reused 10 (delta 0)\nTo git@github.com:mxcz213/git-exercise-2.git\n + 6eb562e...c210399 master -> master (forced update)\n```\n在查看git log,文件提交的message已经被修改了。\n![](https://upload-images.jianshu.io/upload_images/5541401-cdbec9b0323acf8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n期间如果出现任何错误都使用`git rebase --abort`重来\n\n####合并message\n![](https://upload-images.jianshu.io/upload_images/5541401-388c6135ed7f331f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同样是上面的操作，将`2、3`的提交合并到一起，使用`2`的`commit id`\n```\n$ git rebase -i ea2c59fb124d821586e9ec55231e746dd781d488\n[detached HEAD e015cb4] 23\n 1 file changed, 3 insertions(+), 1 deletion(-)\nSuccessfully rebased and updated refs/heads/master.\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-47cad3231359456a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n只把`3`对应的`pick`改成`s`，然后保存新开了一个`vim`，删除`2/、3`注释，改成`23`，\n![](https://upload-images.jianshu.io/upload_images/5541401-80009db61e4fc12e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n最后强制`push`到服务端：\n```\n$ git push -f\nCounting objects: 11, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (9/9), 844 bytes, done.\nTotal 9 (delta 0), reused 6 (delta 0)\nTo git@github.com:mxcz213/git-exercise-2.git\n + 8116add...ddb9a50 master -> master (forced update)\n```\n####再查看`git log，2、3`的提交合并到`2`里面了，`commit id变成2`的了，注意：`4和5的commit id`也被改变了\n![](https://upload-images.jianshu.io/upload_images/5541401-278a8c30cec3941d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####注意：\n这里使用`git push`是不行的，\n必须加强制`push`标志位`-f`\n\n##总结命令\n\ngit rebase -i [commit id]\ngit commit --amend\ngit rebase --continue\ngit push -f\n\n参考：https://www.jianshu.com/p/54cd784fc9aa\n\n\n\n\n\n","source":"_posts/git-rebase-操作总结（合并git-commit的message）.md","raw":"---\ntitle: git-rebase-操作总结（合并git-commit的message）\n---\n第一步：新建一个干净的仓库，做五次修改提交，不要建分支，只做修改提交推送到远程\n\n第二步：想要修改某一次的`commit` 的`message`，比如把`hello git`改成`1`\n```\n$ git log\ncommit 6eb562ed87eb5f763bba96eb0eef5e795d8acbaa\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:33:27 2019 +0800\n\n    5\n\ncommit 76ea4563339fda46a895c8ccf5fdf8be9de98210\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:32:59 2019 +0800\n\n    4\n\ncommit 073583226ceb34ea4f3a144d23e2cc0c4186269a\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:32:38 2019 +0800\n\n    3\n\ncommit 99d522288e7e28694b477021ca6556b2ca7ce61f\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:31:44 2019 +0800\n\n    2\n\ncommit 43ca7897fa5a1bb56b95729338db6fced7be69c0\nAuthor: chenjuanhe <chenjuanhe@pptv.com>\nDate:   Fri Mar 15 15:31:09 2019 +0800\n\n    hello git\n\ncommit 8e455b2861b5b28c907f76b080bb0394e461495b\nAuthor: mxcz213 <496182124@qq.com>\nDate:   Fri Mar 15 15:29:15 2019 +0800\n\n    Initial commit\n```\n复制这条`meaasge`的 `hello git`,复制`commitId`：`8e455b2861b5b28c907f76b080bb0394e461495b`，\n使用`git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b`命令\n```\n$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b\n```\n出现这个画面：\n![](https://upload-images.jianshu.io/upload_images/5541401-b24295102a62220f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n按`i`将`vim`切到插入状态，修改`pick`成`edit`,最后按`Esc`退出键，再按`:wq`保存修改，按`回车键Enter`结束\n```\n$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b\nStopped at 30432ba... hello git\nYou can amend the commit now, with\n\n        git commit --amend\n\nOnce you are satisfied with your changes, run\n\n        git rebase --continue\n```\n现在是修改状态就可以修改提交的message了,使用命令`git commit --amend`\n```\nmxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)\n$ git commit --amend\n[detached HEAD ea2c59f] 1\n 1 file changed, 1 insertion(+)\n create mode 100644 operate_git.txt\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-aa4376cd279df05e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后按照提示的使用命令`git rebase --continue`\n```\nmxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)\n$ git rebase --continue\nSuccessfully rebased and updated refs/heads/master.\n```\n最后使用`git push -f`提交到远程\n```\nmxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master)\n$ git push -f\nCounting objects: 16, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (10/10), done.\nWriting objects: 100% (15/15), 1.33 KiB, done.\nTotal 15 (delta 0), reused 10 (delta 0)\nTo git@github.com:mxcz213/git-exercise-2.git\n + 6eb562e...c210399 master -> master (forced update)\n```\n在查看git log,文件提交的message已经被修改了。\n![](https://upload-images.jianshu.io/upload_images/5541401-cdbec9b0323acf8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n期间如果出现任何错误都使用`git rebase --abort`重来\n\n####合并message\n![](https://upload-images.jianshu.io/upload_images/5541401-388c6135ed7f331f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n同样是上面的操作，将`2、3`的提交合并到一起，使用`2`的`commit id`\n```\n$ git rebase -i ea2c59fb124d821586e9ec55231e746dd781d488\n[detached HEAD e015cb4] 23\n 1 file changed, 3 insertions(+), 1 deletion(-)\nSuccessfully rebased and updated refs/heads/master.\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-47cad3231359456a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n只把`3`对应的`pick`改成`s`，然后保存新开了一个`vim`，删除`2/、3`注释，改成`23`，\n![](https://upload-images.jianshu.io/upload_images/5541401-80009db61e4fc12e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n最后强制`push`到服务端：\n```\n$ git push -f\nCounting objects: 11, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (9/9), 844 bytes, done.\nTotal 9 (delta 0), reused 6 (delta 0)\nTo git@github.com:mxcz213/git-exercise-2.git\n + 8116add...ddb9a50 master -> master (forced update)\n```\n####再查看`git log，2、3`的提交合并到`2`里面了，`commit id变成2`的了，注意：`4和5的commit id`也被改变了\n![](https://upload-images.jianshu.io/upload_images/5541401-278a8c30cec3941d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####注意：\n这里使用`git push`是不行的，\n必须加强制`push`标志位`-f`\n\n##总结命令\n\ngit rebase -i [commit id]\ngit commit --amend\ngit rebase --continue\ngit push -f\n\n参考：https://www.jianshu.com/p/54cd784fc9aa\n\n\n\n\n\n","slug":"git-rebase-操作总结（合并git-commit的message）","published":1,"date":"2019-09-13T02:18:12.182Z","updated":"2019-09-13T09:08:33.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73f000bwsl6dz7fgfdx","content":"<p>第一步：新建一个干净的仓库，做五次修改提交，不要建分支，只做修改提交推送到远程</p>\n<p>第二步：想要修改某一次的<code>commit</code> 的<code>message</code>，比如把<code>hello git</code>改成<code>1</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 6eb562ed87eb5f763bba96eb0eef5e795d8acbaa</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:33:27 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    5</span><br><span class=\"line\"></span><br><span class=\"line\">commit 76ea4563339fda46a895c8ccf5fdf8be9de98210</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:32:59 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    4</span><br><span class=\"line\"></span><br><span class=\"line\">commit 073583226ceb34ea4f3a144d23e2cc0c4186269a</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:32:38 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    3</span><br><span class=\"line\"></span><br><span class=\"line\">commit 99d522288e7e28694b477021ca6556b2ca7ce61f</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:31:44 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 43ca7897fa5a1bb56b95729338db6fced7be69c0</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:31:09 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    hello git</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8e455b2861b5b28c907f76b080bb0394e461495b</span><br><span class=\"line\">Author: mxcz213 &lt;496182124@qq.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:29:15 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Initial commit</span><br></pre></td></tr></table></figure>\n\n<p>复制这条<code>meaasge</code>的 <code>hello git</code>,复制<code>commitId</code>：<code>8e455b2861b5b28c907f76b080bb0394e461495b</code>，<br>使用<code>git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b</code>命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b</span><br></pre></td></tr></table></figure>\n\n<p>出现这个画面：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-b24295102a62220f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>按<code>i</code>将<code>vim</code>切到插入状态，修改<code>pick</code>成<code>edit</code>,最后按<code>Esc</code>退出键，再按<code>:wq</code>保存修改，按<code>回车键Enter</code>结束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b</span><br><span class=\"line\">Stopped at 30432ba... hello git</span><br><span class=\"line\">You can amend the commit now, with</span><br><span class=\"line\"></span><br><span class=\"line\">        git commit --amend</span><br><span class=\"line\"></span><br><span class=\"line\">Once you are satisfied with your changes, run</span><br><span class=\"line\"></span><br><span class=\"line\">        git rebase --continue</span><br></pre></td></tr></table></figure>\n\n<p>现在是修改状态就可以修改提交的message了,使用命令<code>git commit --amend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)</span><br><span class=\"line\">$ git commit --amend</span><br><span class=\"line\">[detached HEAD ea2c59f] 1</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 operate_git.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-aa4376cd279df05e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>然后按照提示的使用命令<code>git rebase --continue</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)</span><br><span class=\"line\">$ git rebase --continue</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure>\n\n<p>最后使用<code>git push -f</code>提交到远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master)</span><br><span class=\"line\">$ git push -f</span><br><span class=\"line\">Counting objects: 16, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (10/10), done.</span><br><span class=\"line\">Writing objects: 100% (15/15), 1.33 KiB, done.</span><br><span class=\"line\">Total 15 (delta 0), reused 10 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-exercise-2.git</span><br><span class=\"line\"> + 6eb562e...c210399 master -&gt; master (forced update)</span><br></pre></td></tr></table></figure>\n\n<p>在查看git log,文件提交的message已经被修改了。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-cdbec9b0323acf8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>期间如果出现任何错误都使用<code>git rebase --abort</code>重来</p>\n<p>####合并message<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-388c6135ed7f331f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>同样是上面的操作，将<code>2、3</code>的提交合并到一起，使用<code>2</code>的<code>commit id</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i ea2c59fb124d821586e9ec55231e746dd781d488</span><br><span class=\"line\">[detached HEAD e015cb4] 23</span><br><span class=\"line\"> 1 file changed, 3 insertions(+), 1 deletion(-)</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-47cad3231359456a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>只把<code>3</code>对应的<code>pick</code>改成<code>s</code>，然后保存新开了一个<code>vim</code>，删除<code>2/、3</code>注释，改成<code>23</code>，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-80009db61e4fc12e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>最后强制<code>push</code>到服务端：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -f</span><br><span class=\"line\">Counting objects: 11, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (6/6), done.</span><br><span class=\"line\">Writing objects: 100% (9/9), 844 bytes, done.</span><br><span class=\"line\">Total 9 (delta 0), reused 6 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-exercise-2.git</span><br><span class=\"line\"> + 8116add...ddb9a50 master -&gt; master (forced update)</span><br></pre></td></tr></table></figure>\n\n<p>####再查看<code>git log，2、3</code>的提交合并到<code>2</code>里面了，<code>commit id变成2</code>的了，注意：<code>4和5的commit id</code>也被改变了<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-278a8c30cec3941d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####注意：<br>这里使用<code>git push</code>是不行的，<br>必须加强制<code>push</code>标志位<code>-f</code></p>\n<p>##总结命令</p>\n<p>git rebase -i [commit id]<br>git commit –amend<br>git rebase –continue<br>git push -f</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/54cd784fc9aa\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/54cd784fc9aa</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>第一步：新建一个干净的仓库，做五次修改提交，不要建分支，只做修改提交推送到远程</p>\n<p>第二步：想要修改某一次的<code>commit</code> 的<code>message</code>，比如把<code>hello git</code>改成<code>1</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 6eb562ed87eb5f763bba96eb0eef5e795d8acbaa</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:33:27 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    5</span><br><span class=\"line\"></span><br><span class=\"line\">commit 76ea4563339fda46a895c8ccf5fdf8be9de98210</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:32:59 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    4</span><br><span class=\"line\"></span><br><span class=\"line\">commit 073583226ceb34ea4f3a144d23e2cc0c4186269a</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:32:38 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    3</span><br><span class=\"line\"></span><br><span class=\"line\">commit 99d522288e7e28694b477021ca6556b2ca7ce61f</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:31:44 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    2</span><br><span class=\"line\"></span><br><span class=\"line\">commit 43ca7897fa5a1bb56b95729338db6fced7be69c0</span><br><span class=\"line\">Author: chenjuanhe &lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:31:09 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    hello git</span><br><span class=\"line\"></span><br><span class=\"line\">commit 8e455b2861b5b28c907f76b080bb0394e461495b</span><br><span class=\"line\">Author: mxcz213 &lt;496182124@qq.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 15:29:15 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    Initial commit</span><br></pre></td></tr></table></figure>\n\n<p>复制这条<code>meaasge</code>的 <code>hello git</code>,复制<code>commitId</code>：<code>8e455b2861b5b28c907f76b080bb0394e461495b</code>，<br>使用<code>git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b</code>命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b</span><br></pre></td></tr></table></figure>\n\n<p>出现这个画面：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-b24295102a62220f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>按<code>i</code>将<code>vim</code>切到插入状态，修改<code>pick</code>成<code>edit</code>,最后按<code>Esc</code>退出键，再按<code>:wq</code>保存修改，按<code>回车键Enter</code>结束</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i 8e455b2861b5b28c907f76b080bb0394e461495b</span><br><span class=\"line\">Stopped at 30432ba... hello git</span><br><span class=\"line\">You can amend the commit now, with</span><br><span class=\"line\"></span><br><span class=\"line\">        git commit --amend</span><br><span class=\"line\"></span><br><span class=\"line\">Once you are satisfied with your changes, run</span><br><span class=\"line\"></span><br><span class=\"line\">        git rebase --continue</span><br></pre></td></tr></table></figure>\n\n<p>现在是修改状态就可以修改提交的message了,使用命令<code>git commit --amend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)</span><br><span class=\"line\">$ git commit --amend</span><br><span class=\"line\">[detached HEAD ea2c59f] 1</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"> create mode 100644 operate_git.txt</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-aa4376cd279df05e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>然后按照提示的使用命令<code>git rebase --continue</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master|REBASE-i)</span><br><span class=\"line\">$ git rebase --continue</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure>\n\n<p>最后使用<code>git push -f</code>提交到远程</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-exercise-2 (master)</span><br><span class=\"line\">$ git push -f</span><br><span class=\"line\">Counting objects: 16, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (10/10), done.</span><br><span class=\"line\">Writing objects: 100% (15/15), 1.33 KiB, done.</span><br><span class=\"line\">Total 15 (delta 0), reused 10 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-exercise-2.git</span><br><span class=\"line\"> + 6eb562e...c210399 master -&gt; master (forced update)</span><br></pre></td></tr></table></figure>\n\n<p>在查看git log,文件提交的message已经被修改了。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-cdbec9b0323acf8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>期间如果出现任何错误都使用<code>git rebase --abort</code>重来</p>\n<p>####合并message<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-388c6135ed7f331f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>同样是上面的操作，将<code>2、3</code>的提交合并到一起，使用<code>2</code>的<code>commit id</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git rebase -i ea2c59fb124d821586e9ec55231e746dd781d488</span><br><span class=\"line\">[detached HEAD e015cb4] 23</span><br><span class=\"line\"> 1 file changed, 3 insertions(+), 1 deletion(-)</span><br><span class=\"line\">Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-47cad3231359456a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>只把<code>3</code>对应的<code>pick</code>改成<code>s</code>，然后保存新开了一个<code>vim</code>，删除<code>2/、3</code>注释，改成<code>23</code>，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-80009db61e4fc12e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>最后强制<code>push</code>到服务端：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -f</span><br><span class=\"line\">Counting objects: 11, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (6/6), done.</span><br><span class=\"line\">Writing objects: 100% (9/9), 844 bytes, done.</span><br><span class=\"line\">Total 9 (delta 0), reused 6 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-exercise-2.git</span><br><span class=\"line\"> + 8116add...ddb9a50 master -&gt; master (forced update)</span><br></pre></td></tr></table></figure>\n\n<p>####再查看<code>git log，2、3</code>的提交合并到<code>2</code>里面了，<code>commit id变成2</code>的了，注意：<code>4和5的commit id</code>也被改变了<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-278a8c30cec3941d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####注意：<br>这里使用<code>git push</code>是不行的，<br>必须加强制<code>push</code>标志位<code>-f</code></p>\n<p>##总结命令</p>\n<p>git rebase -i [commit id]<br>git commit –amend<br>git rebase –continue<br>git push -f</p>\n<p>参考：<a href=\"https://www.jianshu.com/p/54cd784fc9aa\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/54cd784fc9aa</a></p>\n"},{"title":"git-命令行操作","_content":"这里参考廖雪峰老师的教程，一步步重头操作一遍。\n\n##概念\nGit：分布式版本控制系统\n和svn 这种集中式的版本控制系统比较\n\n集中式版本控制系统：版本库是存放在中央服务器的，必须联网才能工作；\n分布式版本控制系统：每个人的电脑都是一个完整的版本库，工作的时候不需要联网；\n分布式的安全性高，一个人的损坏了可以从其他人那里拷贝，而集中式的，中央服务挂掉，所有人都干不了活\n\n##操作\n前提安装了git\n```\ngit --version\n//git version 1.7.11.msysgit.1\n```\n#####1.本地创建版本库\n```\nmkdir git-operate\ncd git-operate\n```\n#####2.把目录变成git管理的仓库\n```\ngit init\n```\n#####3.新建readme.txt文件添加到git仓库\n```\ngit add readme.txt  //执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。\n```\n#####4.用git commit 提交到仓库\n```\ngit commit -m \"add new file\"\n[master (root-commit) c0b6535] add new file\n 1 file changed, 2 insertions(+)\n create mode 100644 readme.txt\n```\n#####5.通常我们会修改已有的文件，用git status查看当前仓库文件的状态\n```\n$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n#####6.git status告诉我们文件的状态，现在看看修改的内容\n```\n$ git diff readme.txt\ndiff --git a/readme.txt b/readme.txt\nindex 013b5bc..d8036c1 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,2 +1,2 @@\n-Git is a distributed version control system.\n+Git is a version control system.\n Git is free software.\n\\ No newline at end of file\n```\n#####7.提交修改之后的文件（提交修改和提交新文件是一样的两步：git add、git commit）\n```\n$ git add readme.txt\n\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#       modified:   readme.txt\n\n$ git commit -m \"modify file\"\n[master ee01550] modify file\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n$ git status\n# On branch master\nnothing to commit (working directory clean)\n```\n#####8.使用git status命令随时掌握工作区的状态\n\n#####9.将本地版本库推到github上\n\n首先：github上建ssk key参考链接：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000\n\n然后：在github上新建一个和本地同名的仓库，参考链接：\nhttps://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000\n![](https://upload-images.jianshu.io/upload_images/5541401-39adc1a02cbcb868.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n最后：根据提示将本地仓库和github仓库关联\n```\n$ git remote add origin git@github.com:mxcz213/git-operate.git\n\n$ git push -u origin master\nCounting objects: 7, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (7/7), 609 bytes, done.\nTotal 7 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), done.\nTo git@github.com:mxcz213/git-operate.git\n * [new branch]      master -> master\nBranch master set up to track remote branch master from origin.\n\n//把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\n//由于远程库是空的，我们第一次推送master分支时，加上了-u参数，\n//Git不但会把本地的master分支内容推送的远程新的master分支，\n//还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n//以后再提交远程仓库就是git push origin master\n```\n#####10.克隆一个远程仓库\n```\ngit clone git@github.com:mxcz213/git-operate.git\n```\n#####11.多次修改提交之后，想改回某一个版本，版本回退，查看提交日志\n```\ngit log    //显示从最近到最远的提交日志\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-7e505696cd334f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n$ git log --pretty=oneline        //单行输出log信息\nc0160df418d31c3b4d3792c814cbad2b90b4b613 commit again\n1852c62687999bb837ff09831c9898e5faede408 modify file\nee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file\nc0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file\n```\n把readme.txt回退到上一个版本modify file\n在git中HEAD表示当前版本，上一个版本是HEAD^,上上一个版本是HEAD^^，往上很多版本比如100个就是HEAD~100,使用git reset命令回退版本\n```\n$ git reset --hard HEAD^\nHEAD is now at 1852c62 modify file\n\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software. \n//文件被还原了\n```\n```\n//通过commit id来回退版本，缩写id，git自己会去找\n$ git log --pretty=oneline\n1852c62687999bb837ff09831c9898e5faede408 modify file\nee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file\nc0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file\n\n $ git reset --hard ee01\nHEAD is now at ee01550 modify file\n\n$ git log --pretty=oneline\nee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file\nc0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file\n\n$ git reflog     //记录每一次的命令\nee01550 HEAD@{0}: reset: moving to ee01\n1852c62 HEAD@{1}: reset: moving to HEAD^\nc0160df HEAD@{2}: commit: commit again\n1852c62 HEAD@{3}: commit: modify file\nee01550 HEAD@{4}: commit: modify file\nc0b6535 HEAD@{5}: commit (initial): add new file\n```\n##重点--分支管理\nmaster分支只来提交，每次有新功能，每个人都可以建自己的分支，在分支上开发，完成之后合并到master分支，防止代码丢失或者影响到别人的开发进度。\n#####\n1.创建`dev`分支,并切换到`dev`分支\n2.查看当前分支\n3.修改`readme.txt`文件内容：`Creating a new branch is quick.`\n4.查看当前dev分支里readme.txt文件内容\n5.切换并查看master分支里readme.txt文件内容\n6.合并dev分支的内容到master分支\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git checkout -b dev      //创建dev分支并切换到dev分支\nSwitched to a new branch 'dev'\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git branch    //查看分支\n* dev\n  master\n\n//修改dev分支里面readme.txt文件的内容为：`Creating a new branch is quick.`然后提交\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git add readme.txt\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git commit -m \"branch test\"\n[dev e0d6643] branch test\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git checkout master    //切换分支到master\nSwitched to branch 'master'\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ cat readme.txt\nGit is a version control system.\nGit is free software.\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git checkout dev\nSwitched to branch 'dev'\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ cat readme.txt\nCreating a new branch is quick.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git checkout master\nSwitched to branch 'master'\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git merge dev      //将dev分支合并到master分支（这种合并分支不会保存分支操作记录）\nUpdating ee01550..e0d6643\nFast-forward\n readme.txt | 3 +--\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ cat readme.txt    //合并成功，文件被修改\nCreating a new branch is quick.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git branch -d dev     //删除dev分支\nDeleted branch dev (was e0d6643).\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git branch    //查看分支只剩master分支了\n* master\n```\n#####保留分支记录的操作`git merge -m \"merge with --no-ff\" bug-101` \n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git checkout -b bug-101\nSwitched to a new branch 'bug-101'\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ cat readme.txt\nCreating a new branch is quick.\ncreate a bug-101 branch\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git add readme.txt\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git commit -m \"create bug-101 branch\"\n[bug-101 5fc13df] create bug-101 branch\n 1 file changed, 1 insertion(+)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git branch\n* bug-101\n  master\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git checkout master\nSwitched to branch 'master'\nYour branch and 'origin/master' have diverged,\nand have 1 and 1 different commit each, respectively.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git merge --no-ff -m \"merge with no-ff\" bug-101\nMerge made by the 'recursive' strategy.\n readme.txt | 1 +\n 1 file changed, 1 insertion(+)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git log --graph --pretty=oneline --abbrev-commit\n*   02bbf1a merge with no-ff\n|\\\n| * 5fc13df create bug-101 branch\n|/\n* e0d6643 branch test\n* ee01550 modify file\n* c0b6535 add new file\n```\n此时的分支信息就有保留，使用`--no-ff`，这时master就不再是一条直线了，分叉了。\n但是git可以通过`rebase`将`变基`成为一条干净的线；\n\n######先解决冲突\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git push origin master\nTo git@github.com:mxcz213/git-operate.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:mxcz213/git-operate.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git pull\nAuto-merging readme.txt\nCONFLICT (content): Merge conflict in readme.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master|MERGING)\n$ cat readme.txt\n<<<<<<< HEAD\nCreating a new branch is quick.\ncreate a bug-101 branch\n=======\nGit is a distributed version control system.\nGit is free software.\n>>>>>>> 1852c62687999bb837ff09831c9898e5faede408\n```\n打开readme.txt文件，手动删掉冲突`<<<<<<<=======>>>>>>>`的部分，然后提交\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git push origin master\nCounting objects: 14, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (10/10), 994 bytes, done.\nTotal 10 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), done.\nTo git@github.com:mxcz213/git-operate.git\n   1852c62..6ac178c  master -> master\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git log --graph --pretty=oneline --abbrev-commit\n*   6ac178c fixed conflict\n|\\\n| * 1852c62 modify file\n* |   02bbf1a merge with no-ff\n|\\ \\\n| * | 5fc13df create bug-101 branch\n|/ /\n* | e0d6643 branch test\n|/\n* ee01550 modify file\n* c0b6535 add new file\n```\n#####如果commit的注释写错了，要修改掉，怎么办？下面来操作修改最后一次提交的注释`change file`改成`change file xxx`\n```\ngit log\ncommit 9219151d7352b0561ae2d1d5c5c20a4c6dfbd4d1\nAuthor: mxcz<chenjuanhe@pptv.com>\nDate:   Fri Mar 15 13:33:54 2019 +0800\n\n    change file\n\ncommit 6ac178c4d6672ac7de86ed9f7775da908cd02668\nMerge: 02bbf1a 1852c62\nAuthor: mxcz<chenjuanhe@pptv.com>\nDate:   Thu Mar 14 17:17:02 2019 +0800\n\n    fixed conflict\n```\n```\n$ git commit --amend   //进入修改commit里\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-2ab2184c178a770c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n改成`change file xxx`，然后按Esc，再按:wq保存退出编辑：\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master|REBASE-i)\n$ git commit --amend\n[master 464ab48] change file xxx\n 1 file changed, 5 deletions(-)\n```\n然后强制推到服务器\n```\n$ git push -f\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 294 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@github.com:mxcz213/git-operate.git\n + 9219151...464ab48 master -> master (forced update)\n```\n此时再查看`git log`提交历史，`commit`的`message`已经被修改过来\n```\n$ git log\ncommit 464ab488219208a9e30bcd5b7cb6e5b37c7a43a3\nAuthor: mcxz<chenjuanhe@pptv.com>\nDate:   Fri Mar 15 13:33:54 2019 +0800\n\n    change file xxx\n\ncommit 6ac178c4d6672ac7de86ed9f7775da908cd02668\nMerge: 02bbf1a 1852c62\nAuthor: mxcz<chenjuanhe@pptv.com>\nDate:   Thu Mar 14 17:17:02 2019 +0800\n\n    fixed conflict\n```\n#####`git`打标签\n```\n$ git tag test_20190315_html\n\n$ git push origin test_20190315_html\nTotal 0 (delta 0), reused 0 (delta 0)\nTo git@github.com:mxcz213/git-operate.git\n * [new tag]         test_20190315_html -> test_20190315_html\n\n$ git tag\ntest_20190315_html\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-911537487ec48180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##总结\n#####添加文件\ngit add .     将所有文件添加到暂存区\n\n\n#####分支管理\nGit鼓励大量使用分支：\n查看分支：git branch\n切换分支：git checkout <branch name>\n创建本地分支：git branch <branch name>\n创建+切换本地分支：git checkout -b <branch name>\n将新建的分支推到远程：git push origin <branch name>\n\n合并某分支到当前分支：git merge <branch name>    （这种合并分支不会保存分支操作记录）\n\n强制删除本地分支：git branch -D <branch name>\n删除远程分支：git push origin  --delete <branch name>\n\n#####标签\ngit tag [tag name]    #给当前分支的最后一次commit打上标签\ngit tag [tag name] [commit id]    #给指定的commit打上标签\ngit tag -a [tag name] -m \"[comment]\" [commit id]    #创建有说明的标签\ngit tag    #显示所有标签\ngit show [tag name]    #显示指定标签的提交信息\ngit tag -d [tag name]    #删除标签\ngit push origin [tag name]    #推送指定标签到远程\ngit push origin --tags    #推送所有本地标签到远程\n\n参考：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n           https://www.jianshu.com/p/c4e66d70e858\n           https://www.jianshu.com/p/54cd784fc9aa\n           \n\n","source":"_posts/git-命令行操作.md","raw":"---\ntitle: git-命令行操作\n---\n这里参考廖雪峰老师的教程，一步步重头操作一遍。\n\n##概念\nGit：分布式版本控制系统\n和svn 这种集中式的版本控制系统比较\n\n集中式版本控制系统：版本库是存放在中央服务器的，必须联网才能工作；\n分布式版本控制系统：每个人的电脑都是一个完整的版本库，工作的时候不需要联网；\n分布式的安全性高，一个人的损坏了可以从其他人那里拷贝，而集中式的，中央服务挂掉，所有人都干不了活\n\n##操作\n前提安装了git\n```\ngit --version\n//git version 1.7.11.msysgit.1\n```\n#####1.本地创建版本库\n```\nmkdir git-operate\ncd git-operate\n```\n#####2.把目录变成git管理的仓库\n```\ngit init\n```\n#####3.新建readme.txt文件添加到git仓库\n```\ngit add readme.txt  //执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。\n```\n#####4.用git commit 提交到仓库\n```\ngit commit -m \"add new file\"\n[master (root-commit) c0b6535] add new file\n 1 file changed, 2 insertions(+)\n create mode 100644 readme.txt\n```\n#####5.通常我们会修改已有的文件，用git status查看当前仓库文件的状态\n```\n$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#       modified:   readme.txt\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n#####6.git status告诉我们文件的状态，现在看看修改的内容\n```\n$ git diff readme.txt\ndiff --git a/readme.txt b/readme.txt\nindex 013b5bc..d8036c1 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,2 +1,2 @@\n-Git is a distributed version control system.\n+Git is a version control system.\n Git is free software.\n\\ No newline at end of file\n```\n#####7.提交修改之后的文件（提交修改和提交新文件是一样的两步：git add、git commit）\n```\n$ git add readme.txt\n\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#       modified:   readme.txt\n\n$ git commit -m \"modify file\"\n[master ee01550] modify file\n 1 file changed, 1 insertion(+), 1 deletion(-)\n\n$ git status\n# On branch master\nnothing to commit (working directory clean)\n```\n#####8.使用git status命令随时掌握工作区的状态\n\n#####9.将本地版本库推到github上\n\n首先：github上建ssk key参考链接：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000\n\n然后：在github上新建一个和本地同名的仓库，参考链接：\nhttps://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000\n![](https://upload-images.jianshu.io/upload_images/5541401-39adc1a02cbcb868.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n最后：根据提示将本地仓库和github仓库关联\n```\n$ git remote add origin git@github.com:mxcz213/git-operate.git\n\n$ git push -u origin master\nCounting objects: 7, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (5/5), done.\nWriting objects: 100% (7/7), 609 bytes, done.\nTotal 7 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), done.\nTo git@github.com:mxcz213/git-operate.git\n * [new branch]      master -> master\nBranch master set up to track remote branch master from origin.\n\n//把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\n//由于远程库是空的，我们第一次推送master分支时，加上了-u参数，\n//Git不但会把本地的master分支内容推送的远程新的master分支，\n//还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n//以后再提交远程仓库就是git push origin master\n```\n#####10.克隆一个远程仓库\n```\ngit clone git@github.com:mxcz213/git-operate.git\n```\n#####11.多次修改提交之后，想改回某一个版本，版本回退，查看提交日志\n```\ngit log    //显示从最近到最远的提交日志\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-7e505696cd334f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n$ git log --pretty=oneline        //单行输出log信息\nc0160df418d31c3b4d3792c814cbad2b90b4b613 commit again\n1852c62687999bb837ff09831c9898e5faede408 modify file\nee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file\nc0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file\n```\n把readme.txt回退到上一个版本modify file\n在git中HEAD表示当前版本，上一个版本是HEAD^,上上一个版本是HEAD^^，往上很多版本比如100个就是HEAD~100,使用git reset命令回退版本\n```\n$ git reset --hard HEAD^\nHEAD is now at 1852c62 modify file\n\n$ cat readme.txt\nGit is a distributed version control system.\nGit is free software. \n//文件被还原了\n```\n```\n//通过commit id来回退版本，缩写id，git自己会去找\n$ git log --pretty=oneline\n1852c62687999bb837ff09831c9898e5faede408 modify file\nee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file\nc0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file\n\n $ git reset --hard ee01\nHEAD is now at ee01550 modify file\n\n$ git log --pretty=oneline\nee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file\nc0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file\n\n$ git reflog     //记录每一次的命令\nee01550 HEAD@{0}: reset: moving to ee01\n1852c62 HEAD@{1}: reset: moving to HEAD^\nc0160df HEAD@{2}: commit: commit again\n1852c62 HEAD@{3}: commit: modify file\nee01550 HEAD@{4}: commit: modify file\nc0b6535 HEAD@{5}: commit (initial): add new file\n```\n##重点--分支管理\nmaster分支只来提交，每次有新功能，每个人都可以建自己的分支，在分支上开发，完成之后合并到master分支，防止代码丢失或者影响到别人的开发进度。\n#####\n1.创建`dev`分支,并切换到`dev`分支\n2.查看当前分支\n3.修改`readme.txt`文件内容：`Creating a new branch is quick.`\n4.查看当前dev分支里readme.txt文件内容\n5.切换并查看master分支里readme.txt文件内容\n6.合并dev分支的内容到master分支\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git checkout -b dev      //创建dev分支并切换到dev分支\nSwitched to a new branch 'dev'\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git branch    //查看分支\n* dev\n  master\n\n//修改dev分支里面readme.txt文件的内容为：`Creating a new branch is quick.`然后提交\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git add readme.txt\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git commit -m \"branch test\"\n[dev e0d6643] branch test\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git checkout master    //切换分支到master\nSwitched to branch 'master'\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ cat readme.txt\nGit is a version control system.\nGit is free software.\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git checkout dev\nSwitched to branch 'dev'\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ cat readme.txt\nCreating a new branch is quick.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (dev)\n$ git checkout master\nSwitched to branch 'master'\nYour branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git merge dev      //将dev分支合并到master分支（这种合并分支不会保存分支操作记录）\nUpdating ee01550..e0d6643\nFast-forward\n readme.txt | 3 +--\n 1 file changed, 1 insertion(+), 2 deletions(-)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ cat readme.txt    //合并成功，文件被修改\nCreating a new branch is quick.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git branch -d dev     //删除dev分支\nDeleted branch dev (was e0d6643).\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git branch    //查看分支只剩master分支了\n* master\n```\n#####保留分支记录的操作`git merge -m \"merge with --no-ff\" bug-101` \n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git checkout -b bug-101\nSwitched to a new branch 'bug-101'\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ cat readme.txt\nCreating a new branch is quick.\ncreate a bug-101 branch\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git add readme.txt\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git commit -m \"create bug-101 branch\"\n[bug-101 5fc13df] create bug-101 branch\n 1 file changed, 1 insertion(+)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git branch\n* bug-101\n  master\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)\n$ git checkout master\nSwitched to branch 'master'\nYour branch and 'origin/master' have diverged,\nand have 1 and 1 different commit each, respectively.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git merge --no-ff -m \"merge with no-ff\" bug-101\nMerge made by the 'recursive' strategy.\n readme.txt | 1 +\n 1 file changed, 1 insertion(+)\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git log --graph --pretty=oneline --abbrev-commit\n*   02bbf1a merge with no-ff\n|\\\n| * 5fc13df create bug-101 branch\n|/\n* e0d6643 branch test\n* ee01550 modify file\n* c0b6535 add new file\n```\n此时的分支信息就有保留，使用`--no-ff`，这时master就不再是一条直线了，分叉了。\n但是git可以通过`rebase`将`变基`成为一条干净的线；\n\n######先解决冲突\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git push origin master\nTo git@github.com:mxcz213/git-operate.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'git@github.com:mxcz213/git-operate.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Merge the remote changes (e.g. 'git pull')\nhint: before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git pull\nAuto-merging readme.txt\nCONFLICT (content): Merge conflict in readme.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master|MERGING)\n$ cat readme.txt\n<<<<<<< HEAD\nCreating a new branch is quick.\ncreate a bug-101 branch\n=======\nGit is a distributed version control system.\nGit is free software.\n>>>>>>> 1852c62687999bb837ff09831c9898e5faede408\n```\n打开readme.txt文件，手动删掉冲突`<<<<<<<=======>>>>>>>`的部分，然后提交\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git push origin master\nCounting objects: 14, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (10/10), 994 bytes, done.\nTotal 10 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), done.\nTo git@github.com:mxcz213/git-operate.git\n   1852c62..6ac178c  master -> master\n\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master)\n$ git log --graph --pretty=oneline --abbrev-commit\n*   6ac178c fixed conflict\n|\\\n| * 1852c62 modify file\n* |   02bbf1a merge with no-ff\n|\\ \\\n| * | 5fc13df create bug-101 branch\n|/ /\n* | e0d6643 branch test\n|/\n* ee01550 modify file\n* c0b6535 add new file\n```\n#####如果commit的注释写错了，要修改掉，怎么办？下面来操作修改最后一次提交的注释`change file`改成`change file xxx`\n```\ngit log\ncommit 9219151d7352b0561ae2d1d5c5c20a4c6dfbd4d1\nAuthor: mxcz<chenjuanhe@pptv.com>\nDate:   Fri Mar 15 13:33:54 2019 +0800\n\n    change file\n\ncommit 6ac178c4d6672ac7de86ed9f7775da908cd02668\nMerge: 02bbf1a 1852c62\nAuthor: mxcz<chenjuanhe@pptv.com>\nDate:   Thu Mar 14 17:17:02 2019 +0800\n\n    fixed conflict\n```\n```\n$ git commit --amend   //进入修改commit里\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-2ab2184c178a770c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n改成`change file xxx`，然后按Esc，再按:wq保存退出编辑：\n```\nmxcz@ITA-1401-0047 /E/workCode/git-operate (master|REBASE-i)\n$ git commit --amend\n[master 464ab48] change file xxx\n 1 file changed, 5 deletions(-)\n```\n然后强制推到服务器\n```\n$ git push -f\nCounting objects: 5, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 294 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@github.com:mxcz213/git-operate.git\n + 9219151...464ab48 master -> master (forced update)\n```\n此时再查看`git log`提交历史，`commit`的`message`已经被修改过来\n```\n$ git log\ncommit 464ab488219208a9e30bcd5b7cb6e5b37c7a43a3\nAuthor: mcxz<chenjuanhe@pptv.com>\nDate:   Fri Mar 15 13:33:54 2019 +0800\n\n    change file xxx\n\ncommit 6ac178c4d6672ac7de86ed9f7775da908cd02668\nMerge: 02bbf1a 1852c62\nAuthor: mxcz<chenjuanhe@pptv.com>\nDate:   Thu Mar 14 17:17:02 2019 +0800\n\n    fixed conflict\n```\n#####`git`打标签\n```\n$ git tag test_20190315_html\n\n$ git push origin test_20190315_html\nTotal 0 (delta 0), reused 0 (delta 0)\nTo git@github.com:mxcz213/git-operate.git\n * [new tag]         test_20190315_html -> test_20190315_html\n\n$ git tag\ntest_20190315_html\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-911537487ec48180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##总结\n#####添加文件\ngit add .     将所有文件添加到暂存区\n\n\n#####分支管理\nGit鼓励大量使用分支：\n查看分支：git branch\n切换分支：git checkout <branch name>\n创建本地分支：git branch <branch name>\n创建+切换本地分支：git checkout -b <branch name>\n将新建的分支推到远程：git push origin <branch name>\n\n合并某分支到当前分支：git merge <branch name>    （这种合并分支不会保存分支操作记录）\n\n强制删除本地分支：git branch -D <branch name>\n删除远程分支：git push origin  --delete <branch name>\n\n#####标签\ngit tag [tag name]    #给当前分支的最后一次commit打上标签\ngit tag [tag name] [commit id]    #给指定的commit打上标签\ngit tag -a [tag name] -m \"[comment]\" [commit id]    #创建有说明的标签\ngit tag    #显示所有标签\ngit show [tag name]    #显示指定标签的提交信息\ngit tag -d [tag name]    #删除标签\ngit push origin [tag name]    #推送指定标签到远程\ngit push origin --tags    #推送所有本地标签到远程\n\n参考：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\n           https://www.jianshu.com/p/c4e66d70e858\n           https://www.jianshu.com/p/54cd784fc9aa\n           \n\n","slug":"git-命令行操作","published":1,"date":"2019-09-13T02:18:12.193Z","updated":"2019-09-13T09:08:34.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73g000cwsl67deajypu","content":"<p>这里参考廖雪峰老师的教程，一步步重头操作一遍。</p>\n<p>##概念<br>Git：分布式版本控制系统<br>和svn 这种集中式的版本控制系统比较</p>\n<p>集中式版本控制系统：版本库是存放在中央服务器的，必须联网才能工作；<br>分布式版本控制系统：每个人的电脑都是一个完整的版本库，工作的时候不需要联网；<br>分布式的安全性高，一个人的损坏了可以从其他人那里拷贝，而集中式的，中央服务挂掉，所有人都干不了活</p>\n<p>##操作<br>前提安装了git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br><span class=\"line\">//git version 1.7.11.msysgit.1</span><br></pre></td></tr></table></figure>\n\n<p>#####1.本地创建版本库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir git-operate</span><br><span class=\"line\">cd git-operate</span><br></pre></td></tr></table></figure>\n\n<p>#####2.把目录变成git管理的仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>#####3.新建readme.txt文件添加到git仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt  //执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</span><br></pre></td></tr></table></figure>\n\n<p>#####4.用git commit 提交到仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;add new file&quot;</span><br><span class=\"line\">[master (root-commit) c0b6535] add new file</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure>\n\n<p>#####5.通常我们会修改已有的文件，用git status查看当前仓库文件的状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes not staged for commit:</span><br><span class=\"line\">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">#</span><br><span class=\"line\">#       modified:   readme.txt</span><br><span class=\"line\">#</span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>#####6.git status告诉我们文件的状态，现在看看修改的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff readme.txt</span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">index 013b5bc..d8036c1 100644</span><br><span class=\"line\">--- a/readme.txt</span><br><span class=\"line\">+++ b/readme.txt</span><br><span class=\"line\">@@ -1,2 +1,2 @@</span><br><span class=\"line\">-Git is a distributed version control system.</span><br><span class=\"line\">+Git is a version control system.</span><br><span class=\"line\"> Git is free software.</span><br><span class=\"line\">\\ No newline at end of file</span><br></pre></td></tr></table></figure>\n\n<p>#####7.提交修改之后的文件（提交修改和提交新文件是一样的两步：git add、git commit）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#       modified:   readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;modify file&quot;</span><br><span class=\"line\">[master ee01550] modify file</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure>\n\n<p>#####8.使用git status命令随时掌握工作区的状态</p>\n<p>#####9.将本地版本库推到github上</p>\n<p>首先：github上建ssk key参考链接：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000</a></p>\n<p>然后：在github上新建一个和本地同名的仓库，参考链接：<br><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000</a><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-39adc1a02cbcb868.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>最后：根据提示将本地仓库和github仓库关联</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">Counting objects: 7, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (7/7), 609 bytes, done.</span><br><span class=\"line\">Total 7 (delta 1), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (1/1), done.</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch master set up to track remote branch master from origin.</span><br><span class=\"line\"></span><br><span class=\"line\">//把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</span><br><span class=\"line\">//由于远程库是空的，我们第一次推送master分支时，加上了-u参数，</span><br><span class=\"line\">//Git不但会把本地的master分支内容推送的远程新的master分支，</span><br><span class=\"line\">//还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span><br><span class=\"line\">//以后再提交远程仓库就是git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>#####10.克隆一个远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:mxcz213/git-operate.git</span><br></pre></td></tr></table></figure>\n\n<p>#####11.多次修改提交之后，想改回某一个版本，版本回退，查看提交日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log    //显示从最近到最远的提交日志</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7e505696cd334f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=oneline        //单行输出log信息</span><br><span class=\"line\">c0160df418d31c3b4d3792c814cbad2b90b4b613 commit again</span><br><span class=\"line\">1852c62687999bb837ff09831c9898e5faede408 modify file</span><br><span class=\"line\">ee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file</span><br><span class=\"line\">c0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file</span><br></pre></td></tr></table></figure>\n\n<p>把readme.txt回退到上一个版本modify file<br>在git中HEAD表示当前版本，上一个版本是HEAD^,上上一个版本是HEAD^^，往上很多版本比如100个就是HEAD~100,使用git reset命令回退版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 1852c62 modify file</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software. </span><br><span class=\"line\">//文件被还原了</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过commit id来回退版本，缩写id，git自己会去找</span><br><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">1852c62687999bb837ff09831c9898e5faede408 modify file</span><br><span class=\"line\">ee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file</span><br><span class=\"line\">c0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file</span><br><span class=\"line\"></span><br><span class=\"line\"> $ git reset --hard ee01</span><br><span class=\"line\">HEAD is now at ee01550 modify file</span><br><span class=\"line\"></span><br><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">ee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file</span><br><span class=\"line\">c0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file</span><br><span class=\"line\"></span><br><span class=\"line\">$ git reflog     //记录每一次的命令</span><br><span class=\"line\">ee01550 HEAD@&#123;0&#125;: reset: moving to ee01</span><br><span class=\"line\">1852c62 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class=\"line\">c0160df HEAD@&#123;2&#125;: commit: commit again</span><br><span class=\"line\">1852c62 HEAD@&#123;3&#125;: commit: modify file</span><br><span class=\"line\">ee01550 HEAD@&#123;4&#125;: commit: modify file</span><br><span class=\"line\">c0b6535 HEAD@&#123;5&#125;: commit (initial): add new file</span><br></pre></td></tr></table></figure>\n\n<p>##重点–分支管理<br>master分支只来提交，每次有新功能，每个人都可以建自己的分支，在分支上开发，完成之后合并到master分支，防止代码丢失或者影响到别人的开发进度。</p>\n<p>#####<br>1.创建<code>dev</code>分支,并切换到<code>dev</code>分支<br>2.查看当前分支<br>3.修改<code>readme.txt</code>文件内容：<code>Creating a new branch is quick.</code><br>4.查看当前dev分支里readme.txt文件内容<br>5.切换并查看master分支里readme.txt文件内容<br>6.合并dev分支的内容到master分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git checkout -b dev      //创建dev分支并切换到dev分支</span><br><span class=\"line\">Switched to a new branch &apos;dev&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git branch    //查看分支</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br><span class=\"line\"></span><br><span class=\"line\">//修改dev分支里面readme.txt文件的内容为：`Creating a new branch is quick.`然后提交</span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git add readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git commit -m &quot;branch test&quot;</span><br><span class=\"line\">[dev e0d6643] branch test</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 2 deletions(-)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git checkout master    //切换分支到master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch is behind &apos;origin/master&apos; by 1 commit, and can be fast-forwarded.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Git is a version control system.</span><br><span class=\"line\">Git is free software.</span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched to branch &apos;dev&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch is behind &apos;origin/master&apos; by 1 commit, and can be fast-forwarded.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git merge dev      //将dev分支合并到master分支（这种合并分支不会保存分支操作记录）</span><br><span class=\"line\">Updating ee01550..e0d6643</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> readme.txt | 3 +--</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 2 deletions(-)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ cat readme.txt    //合并成功，文件被修改</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git branch -d dev     //删除dev分支</span><br><span class=\"line\">Deleted branch dev (was e0d6643).</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git branch    //查看分支只剩master分支了</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n\n<p>#####保留分支记录的操作<code>git merge -m &quot;merge with --no-ff&quot; bug-101</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git checkout -b bug-101</span><br><span class=\"line\">Switched to a new branch &apos;bug-101&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\">create a bug-101 branch</span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git add readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git commit -m &quot;create bug-101 branch&quot;</span><br><span class=\"line\">[bug-101 5fc13df] create bug-101 branch</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">* bug-101</span><br><span class=\"line\">  master</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch and &apos;origin/master&apos; have diverged,</span><br><span class=\"line\">and have 1 and 1 different commit each, respectively.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git merge --no-ff -m &quot;merge with no-ff&quot; bug-101</span><br><span class=\"line\">Merge made by the &apos;recursive&apos; strategy.</span><br><span class=\"line\"> readme.txt | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   02bbf1a merge with no-ff</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 5fc13df create bug-101 branch</span><br><span class=\"line\">|/</span><br><span class=\"line\">* e0d6643 branch test</span><br><span class=\"line\">* ee01550 modify file</span><br><span class=\"line\">* c0b6535 add new file</span><br></pre></td></tr></table></figure>\n\n<p>此时的分支信息就有保留，使用<code>--no-ff</code>，这时master就不再是一条直线了，分叉了。<br>但是git可以通过<code>rebase</code>将<code>变基</code>成为一条干净的线；</p>\n<p>######先解决冲突</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git push origin master</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &apos;git@github.com:mxcz213/git-operate.git&apos;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Merge the remote changes (e.g. &apos;git pull&apos;)</span><br><span class=\"line\">hint: before pushing again.</span><br><span class=\"line\">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git pull</span><br><span class=\"line\">Auto-merging readme.txt</span><br><span class=\"line\">CONFLICT (content): Merge conflict in readme.txt</span><br><span class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master|MERGING)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\">create a bug-101 branch</span><br><span class=\"line\">=======</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software.</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1852c62687999bb837ff09831c9898e5faede408</span><br></pre></td></tr></table></figure>\n\n<p>打开readme.txt文件，手动删掉冲突<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;=======&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>的部分，然后提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git push origin master</span><br><span class=\"line\">Counting objects: 14, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (6/6), done.</span><br><span class=\"line\">Writing objects: 100% (10/10), 994 bytes, done.</span><br><span class=\"line\">Total 10 (delta 1), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (1/1), done.</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\">   1852c62..6ac178c  master -&gt; master</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   6ac178c fixed conflict</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 1852c62 modify file</span><br><span class=\"line\">* |   02bbf1a merge with no-ff</span><br><span class=\"line\">|\\ \\</span><br><span class=\"line\">| * | 5fc13df create bug-101 branch</span><br><span class=\"line\">|/ /</span><br><span class=\"line\">* | e0d6643 branch test</span><br><span class=\"line\">|/</span><br><span class=\"line\">* ee01550 modify file</span><br><span class=\"line\">* c0b6535 add new file</span><br></pre></td></tr></table></figure>\n\n<p>#####如果commit的注释写错了，要修改掉，怎么办？下面来操作修改最后一次提交的注释<code>change file</code>改成<code>change file xxx</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">commit 9219151d7352b0561ae2d1d5c5c20a4c6dfbd4d1</span><br><span class=\"line\">Author: mxcz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 13:33:54 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    change file</span><br><span class=\"line\"></span><br><span class=\"line\">commit 6ac178c4d6672ac7de86ed9f7775da908cd02668</span><br><span class=\"line\">Merge: 02bbf1a 1852c62</span><br><span class=\"line\">Author: mxcz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Thu Mar 14 17:17:02 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fixed conflict</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend   //进入修改commit里</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-2ab2184c178a770c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>改成<code>change file xxx</code>，然后按Esc，再按:wq保存退出编辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master|REBASE-i)</span><br><span class=\"line\">$ git commit --amend</span><br><span class=\"line\">[master 464ab48] change file xxx</span><br><span class=\"line\"> 1 file changed, 5 deletions(-)</span><br></pre></td></tr></table></figure>\n\n<p>然后强制推到服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -f</span><br><span class=\"line\">Counting objects: 5, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 294 bytes, done.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> + 9219151...464ab48 master -&gt; master (forced update)</span><br></pre></td></tr></table></figure>\n\n<p>此时再查看<code>git log</code>提交历史，<code>commit</code>的<code>message</code>已经被修改过来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 464ab488219208a9e30bcd5b7cb6e5b37c7a43a3</span><br><span class=\"line\">Author: mcxz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 13:33:54 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    change file xxx</span><br><span class=\"line\"></span><br><span class=\"line\">commit 6ac178c4d6672ac7de86ed9f7775da908cd02668</span><br><span class=\"line\">Merge: 02bbf1a 1852c62</span><br><span class=\"line\">Author: mxcz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Thu Mar 14 17:17:02 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fixed conflict</span><br></pre></td></tr></table></figure>\n\n<p>#####<code>git</code>打标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag test_20190315_html</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin test_20190315_html</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> * [new tag]         test_20190315_html -&gt; test_20190315_html</span><br><span class=\"line\"></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">test_20190315_html</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-911537487ec48180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>##总结</p>\n<p>#####添加文件<br>git add .     将所有文件添加到暂存区</p>\n<p>#####分支管理<br>Git鼓励大量使用分支：<br>查看分支：git branch<br>切换分支：git checkout <branch name><br>创建本地分支：git branch <branch name><br>创建+切换本地分支：git checkout -b <branch name><br>将新建的分支推到远程：git push origin <branch name></branch></branch></branch></branch></p>\n<p>合并某分支到当前分支：git merge <branch name>    （这种合并分支不会保存分支操作记录）</branch></p>\n<p>强制删除本地分支：git branch -D <branch name><br>删除远程分支：git push origin  –delete <branch name></branch></branch></p>\n<p>#####标签<br>git tag [tag name]    #给当前分支的最后一次commit打上标签<br>git tag [tag name] [commit id]    #给指定的commit打上标签<br>git tag -a [tag name] -m “[comment]” [commit id]    #创建有说明的标签<br>git tag    #显示所有标签<br>git show [tag name]    #显示指定标签的提交信息<br>git tag -d [tag name]    #删除标签<br>git push origin [tag name]    #推送指定标签到远程<br>git push origin –tags    #推送所有本地标签到远程</p>\n<p>参考：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a><br>           <a href=\"https://www.jianshu.com/p/c4e66d70e858\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c4e66d70e858</a><br>           <a href=\"https://www.jianshu.com/p/54cd784fc9aa\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/54cd784fc9aa</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里参考廖雪峰老师的教程，一步步重头操作一遍。</p>\n<p>##概念<br>Git：分布式版本控制系统<br>和svn 这种集中式的版本控制系统比较</p>\n<p>集中式版本控制系统：版本库是存放在中央服务器的，必须联网才能工作；<br>分布式版本控制系统：每个人的电脑都是一个完整的版本库，工作的时候不需要联网；<br>分布式的安全性高，一个人的损坏了可以从其他人那里拷贝，而集中式的，中央服务挂掉，所有人都干不了活</p>\n<p>##操作<br>前提安装了git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br><span class=\"line\">//git version 1.7.11.msysgit.1</span><br></pre></td></tr></table></figure>\n\n<p>#####1.本地创建版本库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir git-operate</span><br><span class=\"line\">cd git-operate</span><br></pre></td></tr></table></figure>\n\n<p>#####2.把目录变成git管理的仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<p>#####3.新建readme.txt文件添加到git仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add readme.txt  //执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</span><br></pre></td></tr></table></figure>\n\n<p>#####4.用git commit 提交到仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;add new file&quot;</span><br><span class=\"line\">[master (root-commit) c0b6535] add new file</span><br><span class=\"line\"> 1 file changed, 2 insertions(+)</span><br><span class=\"line\"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure>\n\n<p>#####5.通常我们会修改已有的文件，用git status查看当前仓库文件的状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes not staged for commit:</span><br><span class=\"line\">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class=\"line\">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class=\"line\">#</span><br><span class=\"line\">#       modified:   readme.txt</span><br><span class=\"line\">#</span><br><span class=\"line\">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>#####6.git status告诉我们文件的状态，现在看看修改的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff readme.txt</span><br><span class=\"line\">diff --git a/readme.txt b/readme.txt</span><br><span class=\"line\">index 013b5bc..d8036c1 100644</span><br><span class=\"line\">--- a/readme.txt</span><br><span class=\"line\">+++ b/readme.txt</span><br><span class=\"line\">@@ -1,2 +1,2 @@</span><br><span class=\"line\">-Git is a distributed version control system.</span><br><span class=\"line\">+Git is a version control system.</span><br><span class=\"line\"> Git is free software.</span><br><span class=\"line\">\\ No newline at end of file</span><br></pre></td></tr></table></figure>\n\n<p>#####7.提交修改之后的文件（提交修改和提交新文件是一样的两步：git add、git commit）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\"># Changes to be committed:</span><br><span class=\"line\">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\">#       modified:   readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">$ git commit -m &quot;modify file&quot;</span><br><span class=\"line\">[master ee01550] modify file</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class=\"line\"></span><br><span class=\"line\">$ git status</span><br><span class=\"line\"># On branch master</span><br><span class=\"line\">nothing to commit (working directory clean)</span><br></pre></td></tr></table></figure>\n\n<p>#####8.使用git status命令随时掌握工作区的状态</p>\n<p>#####9.将本地版本库推到github上</p>\n<p>首先：github上建ssk key参考链接：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000</a></p>\n<p>然后：在github上新建一个和本地同名的仓库，参考链接：<br><a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000</a><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-39adc1a02cbcb868.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>最后：根据提示将本地仓库和github仓库关联</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">Counting objects: 7, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (5/5), done.</span><br><span class=\"line\">Writing objects: 100% (7/7), 609 bytes, done.</span><br><span class=\"line\">Total 7 (delta 1), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (1/1), done.</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> * [new branch]      master -&gt; master</span><br><span class=\"line\">Branch master set up to track remote branch master from origin.</span><br><span class=\"line\"></span><br><span class=\"line\">//把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</span><br><span class=\"line\">//由于远程库是空的，我们第一次推送master分支时，加上了-u参数，</span><br><span class=\"line\">//Git不但会把本地的master分支内容推送的远程新的master分支，</span><br><span class=\"line\">//还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span><br><span class=\"line\">//以后再提交远程仓库就是git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>#####10.克隆一个远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:mxcz213/git-operate.git</span><br></pre></td></tr></table></figure>\n\n<p>#####11.多次修改提交之后，想改回某一个版本，版本回退，查看提交日志</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log    //显示从最近到最远的提交日志</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7e505696cd334f23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --pretty=oneline        //单行输出log信息</span><br><span class=\"line\">c0160df418d31c3b4d3792c814cbad2b90b4b613 commit again</span><br><span class=\"line\">1852c62687999bb837ff09831c9898e5faede408 modify file</span><br><span class=\"line\">ee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file</span><br><span class=\"line\">c0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file</span><br></pre></td></tr></table></figure>\n\n<p>把readme.txt回退到上一个版本modify file<br>在git中HEAD表示当前版本，上一个版本是HEAD^,上上一个版本是HEAD^^，往上很多版本比如100个就是HEAD~100,使用git reset命令回退版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 1852c62 modify file</span><br><span class=\"line\"></span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software. </span><br><span class=\"line\">//文件被还原了</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过commit id来回退版本，缩写id，git自己会去找</span><br><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">1852c62687999bb837ff09831c9898e5faede408 modify file</span><br><span class=\"line\">ee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file</span><br><span class=\"line\">c0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file</span><br><span class=\"line\"></span><br><span class=\"line\"> $ git reset --hard ee01</span><br><span class=\"line\">HEAD is now at ee01550 modify file</span><br><span class=\"line\"></span><br><span class=\"line\">$ git log --pretty=oneline</span><br><span class=\"line\">ee01550aee99f47270cb7c8b9bf08e9ca6431bde modify file</span><br><span class=\"line\">c0b6535d48040e1a26d4cb9cbc1bbef13121b62d add new file</span><br><span class=\"line\"></span><br><span class=\"line\">$ git reflog     //记录每一次的命令</span><br><span class=\"line\">ee01550 HEAD@&#123;0&#125;: reset: moving to ee01</span><br><span class=\"line\">1852c62 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class=\"line\">c0160df HEAD@&#123;2&#125;: commit: commit again</span><br><span class=\"line\">1852c62 HEAD@&#123;3&#125;: commit: modify file</span><br><span class=\"line\">ee01550 HEAD@&#123;4&#125;: commit: modify file</span><br><span class=\"line\">c0b6535 HEAD@&#123;5&#125;: commit (initial): add new file</span><br></pre></td></tr></table></figure>\n\n<p>##重点–分支管理<br>master分支只来提交，每次有新功能，每个人都可以建自己的分支，在分支上开发，完成之后合并到master分支，防止代码丢失或者影响到别人的开发进度。</p>\n<p>#####<br>1.创建<code>dev</code>分支,并切换到<code>dev</code>分支<br>2.查看当前分支<br>3.修改<code>readme.txt</code>文件内容：<code>Creating a new branch is quick.</code><br>4.查看当前dev分支里readme.txt文件内容<br>5.切换并查看master分支里readme.txt文件内容<br>6.合并dev分支的内容到master分支</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git checkout -b dev      //创建dev分支并切换到dev分支</span><br><span class=\"line\">Switched to a new branch &apos;dev&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git branch    //查看分支</span><br><span class=\"line\">* dev</span><br><span class=\"line\">  master</span><br><span class=\"line\"></span><br><span class=\"line\">//修改dev分支里面readme.txt文件的内容为：`Creating a new branch is quick.`然后提交</span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git add readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git commit -m &quot;branch test&quot;</span><br><span class=\"line\">[dev e0d6643] branch test</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 2 deletions(-)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git checkout master    //切换分支到master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch is behind &apos;origin/master&apos; by 1 commit, and can be fast-forwarded.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Git is a version control system.</span><br><span class=\"line\">Git is free software.</span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git checkout dev</span><br><span class=\"line\">Switched to branch &apos;dev&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (dev)</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch is behind &apos;origin/master&apos; by 1 commit, and can be fast-forwarded.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git merge dev      //将dev分支合并到master分支（这种合并分支不会保存分支操作记录）</span><br><span class=\"line\">Updating ee01550..e0d6643</span><br><span class=\"line\">Fast-forward</span><br><span class=\"line\"> readme.txt | 3 +--</span><br><span class=\"line\"> 1 file changed, 1 insertion(+), 2 deletions(-)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ cat readme.txt    //合并成功，文件被修改</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git branch -d dev     //删除dev分支</span><br><span class=\"line\">Deleted branch dev (was e0d6643).</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git branch    //查看分支只剩master分支了</span><br><span class=\"line\">* master</span><br></pre></td></tr></table></figure>\n\n<p>#####保留分支记录的操作<code>git merge -m &quot;merge with --no-ff&quot; bug-101</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git checkout -b bug-101</span><br><span class=\"line\">Switched to a new branch &apos;bug-101&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\">create a bug-101 branch</span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git add readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git commit -m &quot;create bug-101 branch&quot;</span><br><span class=\"line\">[bug-101 5fc13df] create bug-101 branch</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git branch</span><br><span class=\"line\">* bug-101</span><br><span class=\"line\">  master</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (bug-101)</span><br><span class=\"line\">$ git checkout master</span><br><span class=\"line\">Switched to branch &apos;master&apos;</span><br><span class=\"line\">Your branch and &apos;origin/master&apos; have diverged,</span><br><span class=\"line\">and have 1 and 1 different commit each, respectively.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git merge --no-ff -m &quot;merge with no-ff&quot; bug-101</span><br><span class=\"line\">Merge made by the &apos;recursive&apos; strategy.</span><br><span class=\"line\"> readme.txt | 1 +</span><br><span class=\"line\"> 1 file changed, 1 insertion(+)</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   02bbf1a merge with no-ff</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 5fc13df create bug-101 branch</span><br><span class=\"line\">|/</span><br><span class=\"line\">* e0d6643 branch test</span><br><span class=\"line\">* ee01550 modify file</span><br><span class=\"line\">* c0b6535 add new file</span><br></pre></td></tr></table></figure>\n\n<p>此时的分支信息就有保留，使用<code>--no-ff</code>，这时master就不再是一条直线了，分叉了。<br>但是git可以通过<code>rebase</code>将<code>变基</code>成为一条干净的线；</p>\n<p>######先解决冲突</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git push origin master</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &apos;git@github.com:mxcz213/git-operate.git&apos;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Merge the remote changes (e.g. &apos;git pull&apos;)</span><br><span class=\"line\">hint: before pushing again.</span><br><span class=\"line\">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git pull</span><br><span class=\"line\">Auto-merging readme.txt</span><br><span class=\"line\">CONFLICT (content): Merge conflict in readme.txt</span><br><span class=\"line\">Automatic merge failed; fix conflicts and then commit the result.</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master|MERGING)</span><br><span class=\"line\">$ cat readme.txt</span><br><span class=\"line\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class=\"line\">Creating a new branch is quick.</span><br><span class=\"line\">create a bug-101 branch</span><br><span class=\"line\">=======</span><br><span class=\"line\">Git is a distributed version control system.</span><br><span class=\"line\">Git is free software.</span><br><span class=\"line\">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 1852c62687999bb837ff09831c9898e5faede408</span><br></pre></td></tr></table></figure>\n\n<p>打开readme.txt文件，手动删掉冲突<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;=======&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>的部分，然后提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git push origin master</span><br><span class=\"line\">Counting objects: 14, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (6/6), done.</span><br><span class=\"line\">Writing objects: 100% (10/10), 994 bytes, done.</span><br><span class=\"line\">Total 10 (delta 1), reused 0 (delta 0)</span><br><span class=\"line\">remote: Resolving deltas: 100% (1/1), done.</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\">   1852c62..6ac178c  master -&gt; master</span><br><span class=\"line\"></span><br><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master)</span><br><span class=\"line\">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\">*   6ac178c fixed conflict</span><br><span class=\"line\">|\\</span><br><span class=\"line\">| * 1852c62 modify file</span><br><span class=\"line\">* |   02bbf1a merge with no-ff</span><br><span class=\"line\">|\\ \\</span><br><span class=\"line\">| * | 5fc13df create bug-101 branch</span><br><span class=\"line\">|/ /</span><br><span class=\"line\">* | e0d6643 branch test</span><br><span class=\"line\">|/</span><br><span class=\"line\">* ee01550 modify file</span><br><span class=\"line\">* c0b6535 add new file</span><br></pre></td></tr></table></figure>\n\n<p>#####如果commit的注释写错了，要修改掉，怎么办？下面来操作修改最后一次提交的注释<code>change file</code>改成<code>change file xxx</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br><span class=\"line\">commit 9219151d7352b0561ae2d1d5c5c20a4c6dfbd4d1</span><br><span class=\"line\">Author: mxcz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 13:33:54 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    change file</span><br><span class=\"line\"></span><br><span class=\"line\">commit 6ac178c4d6672ac7de86ed9f7775da908cd02668</span><br><span class=\"line\">Merge: 02bbf1a 1852c62</span><br><span class=\"line\">Author: mxcz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Thu Mar 14 17:17:02 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fixed conflict</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit --amend   //进入修改commit里</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-2ab2184c178a770c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>改成<code>change file xxx</code>，然后按Esc，再按:wq保存退出编辑：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mxcz@ITA-1401-0047 /E/workCode/git-operate (master|REBASE-i)</span><br><span class=\"line\">$ git commit --amend</span><br><span class=\"line\">[master 464ab48] change file xxx</span><br><span class=\"line\"> 1 file changed, 5 deletions(-)</span><br></pre></td></tr></table></figure>\n\n<p>然后强制推到服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push -f</span><br><span class=\"line\">Counting objects: 5, done.</span><br><span class=\"line\">Delta compression using up to 4 threads.</span><br><span class=\"line\">Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 294 bytes, done.</span><br><span class=\"line\">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> + 9219151...464ab48 master -&gt; master (forced update)</span><br></pre></td></tr></table></figure>\n\n<p>此时再查看<code>git log</code>提交历史，<code>commit</code>的<code>message</code>已经被修改过来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log</span><br><span class=\"line\">commit 464ab488219208a9e30bcd5b7cb6e5b37c7a43a3</span><br><span class=\"line\">Author: mcxz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Fri Mar 15 13:33:54 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    change file xxx</span><br><span class=\"line\"></span><br><span class=\"line\">commit 6ac178c4d6672ac7de86ed9f7775da908cd02668</span><br><span class=\"line\">Merge: 02bbf1a 1852c62</span><br><span class=\"line\">Author: mxcz&lt;chenjuanhe@pptv.com&gt;</span><br><span class=\"line\">Date:   Thu Mar 14 17:17:02 2019 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    fixed conflict</span><br></pre></td></tr></table></figure>\n\n<p>#####<code>git</code>打标签</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag test_20190315_html</span><br><span class=\"line\"></span><br><span class=\"line\">$ git push origin test_20190315_html</span><br><span class=\"line\">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class=\"line\">To git@github.com:mxcz213/git-operate.git</span><br><span class=\"line\"> * [new tag]         test_20190315_html -&gt; test_20190315_html</span><br><span class=\"line\"></span><br><span class=\"line\">$ git tag</span><br><span class=\"line\">test_20190315_html</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-911537487ec48180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>##总结</p>\n<p>#####添加文件<br>git add .     将所有文件添加到暂存区</p>\n<p>#####分支管理<br>Git鼓励大量使用分支：<br>查看分支：git branch<br>切换分支：git checkout <branch name><br>创建本地分支：git branch <branch name><br>创建+切换本地分支：git checkout -b <branch name><br>将新建的分支推到远程：git push origin <branch name></branch></branch></branch></branch></p>\n<p>合并某分支到当前分支：git merge <branch name>    （这种合并分支不会保存分支操作记录）</branch></p>\n<p>强制删除本地分支：git branch -D <branch name><br>删除远程分支：git push origin  –delete <branch name></branch></branch></p>\n<p>#####标签<br>git tag [tag name]    #给当前分支的最后一次commit打上标签<br>git tag [tag name] [commit id]    #给指定的commit打上标签<br>git tag -a [tag name] -m “[comment]” [commit id]    #创建有说明的标签<br>git tag    #显示所有标签<br>git show [tag name]    #显示指定标签的提交信息<br>git tag -d [tag name]    #删除标签<br>git push origin [tag name]    #推送指定标签到远程<br>git push origin –tags    #推送所有本地标签到远程</p>\n<p>参考：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a><br>           <a href=\"https://www.jianshu.com/p/c4e66d70e858\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/c4e66d70e858</a><br>           <a href=\"https://www.jianshu.com/p/54cd784fc9aa\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/54cd784fc9aa</a></p>\n"},{"title":"mini-css-extract-plugin","_content":"undefined","source":"_posts/mini-css-extract-plugin.md","raw":"---\ntitle: mini-css-extract-plugin\n---\nundefined","slug":"mini-css-extract-plugin","published":1,"date":"2019-09-13T02:18:12.153Z","updated":"2019-09-13T09:08:38.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73i000dwsl6hems2aot","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"npm-发布一个简单的-TypeScript-模块","_content":"undefined","source":"_posts/npm-发布一个简单的-TypeScript-模块.md","raw":"---\ntitle: npm-发布一个简单的-TypeScript-模块\n---\nundefined","slug":"npm-发布一个简单的-TypeScript-模块","published":1,"date":"2019-09-13T02:18:11.661Z","updated":"2019-09-13T09:08:38.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73j000ewsl6zec9hvqh","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"vue入门","_content":"undefined","source":"_posts/vue入门.md","raw":"---\ntitle: vue入门\n---\nundefined","slug":"vue入门","published":1,"date":"2019-09-13T02:18:11.657Z","updated":"2019-09-13T09:08:38.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73k000fwsl69qxmp1p5","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"webpack-4-搭建-React-架构：-antd-中后台项目架构（一）","_content":"前言：最近工作需要，有三个项目，需要做三个中后台管理页面，除了页面不一样，其他的内容组织都一样，所以搭建这么一个通用的项目架构来应用到这个三个项目中，以下是笔记总结。\n\n前端工程师要有自己架构项目的能力，`create-react-app` 生成的是一个比较通用的项目结构，通常里面很多内容我们是用不到的，而且要改起来里面的 `webpack` 配置也更是繁琐，这就需要我们自己搭建一个适合自己项目的框架，然后配置必要的优化方案，这样能对这个项目做到了如指掌。也能锻炼我们的架构能力，组织代码的能力。\n\n下面我们基于 `React` 框架架构一个自己的项目，亲手配置开发环境 `webapck 4` 配置（本地跑起服务）；\n生产环境的 `webpack` （网络优化，缓存，压缩代码等）配置，基于 `webpack 4` 做相应打包构建优化。\n\n系统环境要求：\n基于`windows`系统，node版本是`v8.9.1`，npm版本是`v5.5.1`，webpack的版本是`v4.35.0`，安装模块使用淘宝镜像，这样使安装更快速，`$ npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n首先应该是要先考虑项目如何架构，模块如何划分，就近维护原则，以及单一职责原则，工具函数怎么规划等，我们可以借鉴`vue-cli`的架构模式，其中有很多我们可以学习效仿的。\n\n我们自己写的模块都放到 `src` 下面，`index.html` 作为 `html` 的模板，`webpack` 的配置直接放在根目录，这样更清晰，`dist` 目录用来放打包的项目代码，这个在 `webpack` 里面配置好，不需要手动建，每次 `build` 完之后清除目录重新打包，`mockData` 用来做数据模拟，`assets` 目录来放置静态图片和样式。\n\n目录建好之后，第一步先把项目跑起来，接下来做具体的配置；\n####安装依赖\n\n* 首先初始化项目\n```\nnpm init -y\n```\n* 基于webpack，所以我们要安装webpack相关：`webpack webpack-cli webpack-dev-server webpack-merge`，因为我们是开发和生产环境配置分离，需要`webpack-merge`这个工具来合并配置；\n```\ncnpm install webpack webpack-cli webpack-dev-server webpack-merge --save-dev\n```\n* 安装处理`css`文件的模块，`css-loader` 负责将 `js` 中 `import` 的 `css` 文件提取出来，`style-loader` 负责将 `css` 插入到 `head` 的 `style`v标签内，`autoprefixer` 浏览器前缀自动补全，`less-loader` 处理 `less` 文件，`postcss-loader` 将 `css` 解析为 `css`，这个过程中可以使用很多插件来继续处理 `css` ，比如`autoprefixer`， `cssnano`，`cssnext`等；\n```\ncnpm install css-loader style-loader postcss-loader autoprefixer less less-loader --save-dev\n```\n* 安装 `babel` 转换 `javascript`  语法，转换es6，es7的新方法，安装`@babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill`\n![](https://upload-images.jianshu.io/upload_images/5541401-469960a7950e912f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果配置好运行 `webpack`，出现这错误，说明 `babel-core babel-loader` 版本不对应，安装对应版本即可。\n\n```\ncnpm install @babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill --save-dev\n```\n* 安装处理静态资源 `file-loader url-loader`\n```\ncnpm install file-loader url-loader --save-dev\n```\n* 安装根据 `html` 模板打包动态生成 `html` 文件的插件 `html-webpack-plugin`\n```\ncnpm install html-webpack-plugin --save-dev\n```\n* 安装提取 `css` 到独立样式文件的插件 `extract-text-webpack-plugin`，安装提示说这个插件在 `webpack 4` 版本已弃用，采用异步加载，性能更好的的 `mini-css-extract-plugin` 代替， `mini-css-extract-plugin` 支持按需加载 `css` 和 `sourceMap`，只能用在 `webpack4` 中，由于这个插件不支持 `HMR`，所以只在生产环境上配置。\n![](https://upload-images.jianshu.io/upload_images/5541401-9cbf6658855a706a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//cnpm install extract-text-webpack-plugin --save-dev\ncnpm install mini-css-extract-plugin --save-dev\n```\n* 安装用来生产环境优化/最小化 `css` 代码的插件 `optimize-css-assets-webpack-plugin`：\n```\ncnpm install optimize-css-assets-webpack-plugin --save--dev\n```\n* 安装压缩 `js` 的插件 `uglifyjs-webpack-plugin`\n```\ncnpm install uglifyjs-webpack-plugin --save--dev\n```\n* 安装用于清除 `dist` 构建文件夹的插件，`clean-webpack-plugin`\n```\ncnpm install clean-webpack-plugin --save-dev\n```\n* 继续安装 `React` 相关配置：`react react-dom react-router` \n```\ncnpm install react react-dom react-router --save-dev\n```\n* 最后安装 `React` 的组件库` antd`：`antd babel-plugin-import`，`babel-plugin-import` 用来按需引入 `antd` 的组件；\n####配置  `.babelrc` 文件\n```\n//.babelrc\n{\n    \"presets\": [\n        [\n            \"@babel/preset-env\",\n            {\n                \"modules\": false,\n                \"targets\": {\n                    \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <=8\"]\n                }\n            }\n        ],\n        \"@babel/preset-react\"\n    ],\n    \"plugins\": [\n        [\n            \"import\",\n            {\n                \"libraryName\": \"antd\",\n                \"style\": true\n            }\n        ],\n        \"@babel/transform-runtime\", \"@babel/plugin-transform-regenerator\"\n    ]\n}\n```\n####配置 `postcss.config.js` 文件\n```\nmodule.exports = {\n    plugins: [\n        require('autoprefixer')(),\n    ]\n}\n```\n####配置 `package.json` 中 `script` 运行、打包命令\n```\n{\n  \"name\": \"webpack-4-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n    \"dev\": \"webpack-dev-server --open --config webpack.dev.js\",\n    \"build\": \"webpack --config webpack.prod.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.0\",\n    \"@babel/plugin-transform-regenerator\": \"^7.4.5\",\n    \"@babel/plugin-transform-runtime\": \"^7.5.0\",\n    \"@babel/preset-env\": \"^7.5.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@babel/preset-stage-2\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.5.0\",\n    \"autoprefixer\": \"^9.6.0\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.12.0\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.0.0\",\n    \"file-loader\": \"^4.0.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.9.0\",\n    \"less-loader\": \"^5.0.0\",\n    \"mini-css-extract-plugin\": \"^0.7.0\",\n    \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",\n    \"postcss-cssnext\": \"^3.1.0\",\n    \"postcss-import\": \"^12.0.1\",\n    \"postcss-loader\": \"^3.0.0\",\n    \"react\": \"^16.8.6\",\n    \"react-dom\": \"^16.8.6\",\n    \"react-router\": \"^5.0.1\",\n    \"style-loader\": \"^0.23.1\",\n    \"uglifyjs-webpack-plugin\": \"^2.1.3\",\n    \"url-loader\": \"^2.0.1\",\n    \"webpack\": \"^4.35.0\",\n    \"webpack-cli\": \"^3.3.5\",\n    \"webpack-dev-server\": \"^3.7.2\",\n    \"webpack-merge\": \"^4.2.1\"\n  },\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"antd\": \"^3.20.0\"\n  },\n  \"theme\": \"./src/theme.js\"\n}\n```\n注意：`theme` 字段是 `antd` 主题相关的配置\n`src/theme.js` 文件\n```\n/*\n *定制antd 样式\n*/\nmodule.exports = {\n    'text-color':'#576077',\n    'font-size-base':'14px', //默认字体大小\n    'layout-header-background': '#0c8cee', //头部的颜色\n    'layout-sider-background': '#2f3847', //边栏的颜色\n    'layout-body-background': '#e4f3ff', //页面的背景颜色\n    'layout-header-height':'50px', //头部的高\n    'layout-header-padding':0, //头部的padding\n    'card-head-color':'#333',\n    'card-head-background':'#f7f9f9', //卡片的头部背景颜色\n    'primary-color':'#3eacff', //确认的颜色\n    'primary-5':'#0c8cee' , //确认的hover颜色\n    'tabs-card-head-background':'#fff', //tab的headerColor\n    'tabs-title-font-size':'14px',\n    'tooltip-max-width':'500px',\n    'tooltip-bg':'#efefef',\n    'tooltip-color':'#000',\n    'tooltip-arrow-width':'10px',\n    'table-header-bg':'#e4f3ff',  //表格头部的背景颜色\n    'border-radius-base':0,\n    'border-radius-sm':0\n}\n```\n####开发环境和生产环境公共配置 `webpack.common.js`\n```\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst theme = require('./src/theme')\n\nmodule.exports = {\n    entry: {\n        app: './src/main.js',\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            title: 'webpack 4 production',\n            template: 'index.html',\n            filename: 'index.html'\n        }),\n    ],\n    output: {\n        filename: 'js/[name].[hash:8].js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    resolve: {\n        extensions: ['.js', '.css', '.less']\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader',\n                exclude: path.resolve(__dirname, 'node_modules'),\n                include:path.resolve(__dirname, 'src')\n            },\n            {\n                test: /\\.(woff2?|eot|ttf|otf|svg)(\\?.*)?$/,\n                loader: 'url-loader',\n                include: /fonts?/,\n                options: {\n                    limit: 1024,\n                    name: 'fonts/[name].[hash:7].[ext]'\n                }\n            },\n            {\n                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n                loader: 'url-loader',\n                exclude: /fonts?/,\n                options: {\n                    limit: 4096,                                \n                    name: 'images/[name].[hash:7].[ext]'                        \n                }\n            },\n            {\n                test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n                loader: 'url-loader',\n                options: {\n                    limit: 4096,\n                    name: 'media/[name].[hash:7].[ext]'\n                }\n            },\n        ]\n    }\n}\n```\n####开发环境配置`webpack.dev.js`\n```\nconst path = require('path')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\nconst webpack = require('webpack')\nconst theme = require('./src/theme')\n\nmodule.exports = merge(common, {\n    mode: 'development',\n    devtool: 'inline-source-map',\n    devServer: {\n        contentBase: path.resolve(__dirname, 'dist'),\n        hot: true,\n        port: 9000,\n        overlay: {\n            warnings: false,\n            errors: true\n        }\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot\n    ],\n    module: {\n        rules: [\n            {\n                test:/\\.css$/,\n                use:[\n                  'style-loader',\n                  'css-loader',\n                  'postcss-loader'\n                ]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                  'style-loader',\n                  'css-loader',\n                  'postcss-loader',\n                  {\n                    loader: 'less-loader',\n                    options: {'modifyVars':theme,'javascriptEnabled': true}\n                  }\n                ]\n            }\n        ]\n    }\n})\n```\n####生产环境优化配置`webpack.prod.js`\n```\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst path = require('path')\nconst theme = require('./src/theme')\n\nmodule.exports = merge(common, {\n    mode: 'production',\n    devtool: 'source-map',\n    plugins: [\n        new CleanWebpackPlugin(),\n        new MiniCssExtractPlugin({\n            filename: 'css/[name].[chunkhash:8].css',\n           // chunkFilename: 'css/[name]-[id].[chunkhash:8].css',\n        }),\n    ],\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                cache: true,\n                parallel: false,\n                sourceMap: false,\n                uglifyOptions:{\n                    output: {\n                        ascii_only: true\n                    }\n                }\n            }),\n            new OptimizeCSSAssetsPlugin({})\n        ],\n        // splitChunks:{\n        //     minChunks: 2,\n        //     cacheGroups: {\n        //         vendor: {\n        //             name: 'vendor',\n        //             chunks: 'initial',\n        //             test: /[\\\\/]node_modules[\\\\/]/\n        //         }\n        //     }\n        // }\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: MiniCssExtractPlugin.loader,\n                        options: {\n\n                        }\n                    },\n                    'css-loader',\n                    'postcss-loader'\n                ]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                    {\n                        loader: MiniCssExtractPlugin.loader,\n                        options: {\n\n                        }\n                    },\n                    'css-loader',\n                    'postcss-loader',\n                    {\n                        loader: 'less-loader',\n                        options: {'modifyVars':theme,'javascriptEnabled': true}\n                    }\n                ]\n            }\n        ]\n    },\n    performance: {\n        hints: false\n    }\n})\n```\n####运行项目 打包构建\n```\nnpm run dev\nnpm run build\n```\n最后：在项目开发过程中，可以逐渐完善项目的架构。\n参考：\nhttps://webpack.docschina.org/guides/\nhttps://www.babeljs.cn/docs/babel-preset-stage-2\nhttps://ant.design/docs/react/customize-theme-cn\n\n\n\n\n\n","source":"_posts/webpack-4-搭建-React-架构：-antd-中后台项目架构（一）.md","raw":"---\ntitle: webpack-4-搭建-React-架构：-antd-中后台项目架构（一）\n---\n前言：最近工作需要，有三个项目，需要做三个中后台管理页面，除了页面不一样，其他的内容组织都一样，所以搭建这么一个通用的项目架构来应用到这个三个项目中，以下是笔记总结。\n\n前端工程师要有自己架构项目的能力，`create-react-app` 生成的是一个比较通用的项目结构，通常里面很多内容我们是用不到的，而且要改起来里面的 `webpack` 配置也更是繁琐，这就需要我们自己搭建一个适合自己项目的框架，然后配置必要的优化方案，这样能对这个项目做到了如指掌。也能锻炼我们的架构能力，组织代码的能力。\n\n下面我们基于 `React` 框架架构一个自己的项目，亲手配置开发环境 `webapck 4` 配置（本地跑起服务）；\n生产环境的 `webpack` （网络优化，缓存，压缩代码等）配置，基于 `webpack 4` 做相应打包构建优化。\n\n系统环境要求：\n基于`windows`系统，node版本是`v8.9.1`，npm版本是`v5.5.1`，webpack的版本是`v4.35.0`，安装模块使用淘宝镜像，这样使安装更快速，`$ npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n首先应该是要先考虑项目如何架构，模块如何划分，就近维护原则，以及单一职责原则，工具函数怎么规划等，我们可以借鉴`vue-cli`的架构模式，其中有很多我们可以学习效仿的。\n\n我们自己写的模块都放到 `src` 下面，`index.html` 作为 `html` 的模板，`webpack` 的配置直接放在根目录，这样更清晰，`dist` 目录用来放打包的项目代码，这个在 `webpack` 里面配置好，不需要手动建，每次 `build` 完之后清除目录重新打包，`mockData` 用来做数据模拟，`assets` 目录来放置静态图片和样式。\n\n目录建好之后，第一步先把项目跑起来，接下来做具体的配置；\n####安装依赖\n\n* 首先初始化项目\n```\nnpm init -y\n```\n* 基于webpack，所以我们要安装webpack相关：`webpack webpack-cli webpack-dev-server webpack-merge`，因为我们是开发和生产环境配置分离，需要`webpack-merge`这个工具来合并配置；\n```\ncnpm install webpack webpack-cli webpack-dev-server webpack-merge --save-dev\n```\n* 安装处理`css`文件的模块，`css-loader` 负责将 `js` 中 `import` 的 `css` 文件提取出来，`style-loader` 负责将 `css` 插入到 `head` 的 `style`v标签内，`autoprefixer` 浏览器前缀自动补全，`less-loader` 处理 `less` 文件，`postcss-loader` 将 `css` 解析为 `css`，这个过程中可以使用很多插件来继续处理 `css` ，比如`autoprefixer`， `cssnano`，`cssnext`等；\n```\ncnpm install css-loader style-loader postcss-loader autoprefixer less less-loader --save-dev\n```\n* 安装 `babel` 转换 `javascript`  语法，转换es6，es7的新方法，安装`@babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill`\n![](https://upload-images.jianshu.io/upload_images/5541401-469960a7950e912f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n如果配置好运行 `webpack`，出现这错误，说明 `babel-core babel-loader` 版本不对应，安装对应版本即可。\n\n```\ncnpm install @babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill --save-dev\n```\n* 安装处理静态资源 `file-loader url-loader`\n```\ncnpm install file-loader url-loader --save-dev\n```\n* 安装根据 `html` 模板打包动态生成 `html` 文件的插件 `html-webpack-plugin`\n```\ncnpm install html-webpack-plugin --save-dev\n```\n* 安装提取 `css` 到独立样式文件的插件 `extract-text-webpack-plugin`，安装提示说这个插件在 `webpack 4` 版本已弃用，采用异步加载，性能更好的的 `mini-css-extract-plugin` 代替， `mini-css-extract-plugin` 支持按需加载 `css` 和 `sourceMap`，只能用在 `webpack4` 中，由于这个插件不支持 `HMR`，所以只在生产环境上配置。\n![](https://upload-images.jianshu.io/upload_images/5541401-9cbf6658855a706a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//cnpm install extract-text-webpack-plugin --save-dev\ncnpm install mini-css-extract-plugin --save-dev\n```\n* 安装用来生产环境优化/最小化 `css` 代码的插件 `optimize-css-assets-webpack-plugin`：\n```\ncnpm install optimize-css-assets-webpack-plugin --save--dev\n```\n* 安装压缩 `js` 的插件 `uglifyjs-webpack-plugin`\n```\ncnpm install uglifyjs-webpack-plugin --save--dev\n```\n* 安装用于清除 `dist` 构建文件夹的插件，`clean-webpack-plugin`\n```\ncnpm install clean-webpack-plugin --save-dev\n```\n* 继续安装 `React` 相关配置：`react react-dom react-router` \n```\ncnpm install react react-dom react-router --save-dev\n```\n* 最后安装 `React` 的组件库` antd`：`antd babel-plugin-import`，`babel-plugin-import` 用来按需引入 `antd` 的组件；\n####配置  `.babelrc` 文件\n```\n//.babelrc\n{\n    \"presets\": [\n        [\n            \"@babel/preset-env\",\n            {\n                \"modules\": false,\n                \"targets\": {\n                    \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <=8\"]\n                }\n            }\n        ],\n        \"@babel/preset-react\"\n    ],\n    \"plugins\": [\n        [\n            \"import\",\n            {\n                \"libraryName\": \"antd\",\n                \"style\": true\n            }\n        ],\n        \"@babel/transform-runtime\", \"@babel/plugin-transform-regenerator\"\n    ]\n}\n```\n####配置 `postcss.config.js` 文件\n```\nmodule.exports = {\n    plugins: [\n        require('autoprefixer')(),\n    ]\n}\n```\n####配置 `package.json` 中 `script` 运行、打包命令\n```\n{\n  \"name\": \"webpack-4-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n    \"dev\": \"webpack-dev-server --open --config webpack.dev.js\",\n    \"build\": \"webpack --config webpack.prod.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.0.0\",\n    \"@babel/plugin-transform-regenerator\": \"^7.4.5\",\n    \"@babel/plugin-transform-runtime\": \"^7.5.0\",\n    \"@babel/preset-env\": \"^7.5.0\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"@babel/preset-stage-2\": \"^7.0.0\",\n    \"@babel/runtime\": \"^7.5.0\",\n    \"autoprefixer\": \"^9.6.0\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.12.0\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.0.0\",\n    \"file-loader\": \"^4.0.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.9.0\",\n    \"less-loader\": \"^5.0.0\",\n    \"mini-css-extract-plugin\": \"^0.7.0\",\n    \"optimize-css-assets-webpack-plugin\": \"^5.0.3\",\n    \"postcss-cssnext\": \"^3.1.0\",\n    \"postcss-import\": \"^12.0.1\",\n    \"postcss-loader\": \"^3.0.0\",\n    \"react\": \"^16.8.6\",\n    \"react-dom\": \"^16.8.6\",\n    \"react-router\": \"^5.0.1\",\n    \"style-loader\": \"^0.23.1\",\n    \"uglifyjs-webpack-plugin\": \"^2.1.3\",\n    \"url-loader\": \"^2.0.1\",\n    \"webpack\": \"^4.35.0\",\n    \"webpack-cli\": \"^3.3.5\",\n    \"webpack-dev-server\": \"^3.7.2\",\n    \"webpack-merge\": \"^4.2.1\"\n  },\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"antd\": \"^3.20.0\"\n  },\n  \"theme\": \"./src/theme.js\"\n}\n```\n注意：`theme` 字段是 `antd` 主题相关的配置\n`src/theme.js` 文件\n```\n/*\n *定制antd 样式\n*/\nmodule.exports = {\n    'text-color':'#576077',\n    'font-size-base':'14px', //默认字体大小\n    'layout-header-background': '#0c8cee', //头部的颜色\n    'layout-sider-background': '#2f3847', //边栏的颜色\n    'layout-body-background': '#e4f3ff', //页面的背景颜色\n    'layout-header-height':'50px', //头部的高\n    'layout-header-padding':0, //头部的padding\n    'card-head-color':'#333',\n    'card-head-background':'#f7f9f9', //卡片的头部背景颜色\n    'primary-color':'#3eacff', //确认的颜色\n    'primary-5':'#0c8cee' , //确认的hover颜色\n    'tabs-card-head-background':'#fff', //tab的headerColor\n    'tabs-title-font-size':'14px',\n    'tooltip-max-width':'500px',\n    'tooltip-bg':'#efefef',\n    'tooltip-color':'#000',\n    'tooltip-arrow-width':'10px',\n    'table-header-bg':'#e4f3ff',  //表格头部的背景颜色\n    'border-radius-base':0,\n    'border-radius-sm':0\n}\n```\n####开发环境和生产环境公共配置 `webpack.common.js`\n```\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst theme = require('./src/theme')\n\nmodule.exports = {\n    entry: {\n        app: './src/main.js',\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            title: 'webpack 4 production',\n            template: 'index.html',\n            filename: 'index.html'\n        }),\n    ],\n    output: {\n        filename: 'js/[name].[hash:8].js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    resolve: {\n        extensions: ['.js', '.css', '.less']\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: 'babel-loader',\n                exclude: path.resolve(__dirname, 'node_modules'),\n                include:path.resolve(__dirname, 'src')\n            },\n            {\n                test: /\\.(woff2?|eot|ttf|otf|svg)(\\?.*)?$/,\n                loader: 'url-loader',\n                include: /fonts?/,\n                options: {\n                    limit: 1024,\n                    name: 'fonts/[name].[hash:7].[ext]'\n                }\n            },\n            {\n                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n                loader: 'url-loader',\n                exclude: /fonts?/,\n                options: {\n                    limit: 4096,                                \n                    name: 'images/[name].[hash:7].[ext]'                        \n                }\n            },\n            {\n                test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n                loader: 'url-loader',\n                options: {\n                    limit: 4096,\n                    name: 'media/[name].[hash:7].[ext]'\n                }\n            },\n        ]\n    }\n}\n```\n####开发环境配置`webpack.dev.js`\n```\nconst path = require('path')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\nconst webpack = require('webpack')\nconst theme = require('./src/theme')\n\nmodule.exports = merge(common, {\n    mode: 'development',\n    devtool: 'inline-source-map',\n    devServer: {\n        contentBase: path.resolve(__dirname, 'dist'),\n        hot: true,\n        port: 9000,\n        overlay: {\n            warnings: false,\n            errors: true\n        }\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot\n    ],\n    module: {\n        rules: [\n            {\n                test:/\\.css$/,\n                use:[\n                  'style-loader',\n                  'css-loader',\n                  'postcss-loader'\n                ]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                  'style-loader',\n                  'css-loader',\n                  'postcss-loader',\n                  {\n                    loader: 'less-loader',\n                    options: {'modifyVars':theme,'javascriptEnabled': true}\n                  }\n                ]\n            }\n        ]\n    }\n})\n```\n####生产环境优化配置`webpack.prod.js`\n```\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\nconst OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')\nconst path = require('path')\nconst theme = require('./src/theme')\n\nmodule.exports = merge(common, {\n    mode: 'production',\n    devtool: 'source-map',\n    plugins: [\n        new CleanWebpackPlugin(),\n        new MiniCssExtractPlugin({\n            filename: 'css/[name].[chunkhash:8].css',\n           // chunkFilename: 'css/[name]-[id].[chunkhash:8].css',\n        }),\n    ],\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                cache: true,\n                parallel: false,\n                sourceMap: false,\n                uglifyOptions:{\n                    output: {\n                        ascii_only: true\n                    }\n                }\n            }),\n            new OptimizeCSSAssetsPlugin({})\n        ],\n        // splitChunks:{\n        //     minChunks: 2,\n        //     cacheGroups: {\n        //         vendor: {\n        //             name: 'vendor',\n        //             chunks: 'initial',\n        //             test: /[\\\\/]node_modules[\\\\/]/\n        //         }\n        //     }\n        // }\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: MiniCssExtractPlugin.loader,\n                        options: {\n\n                        }\n                    },\n                    'css-loader',\n                    'postcss-loader'\n                ]\n            },\n            {\n                test: /\\.less$/,\n                use: [\n                    {\n                        loader: MiniCssExtractPlugin.loader,\n                        options: {\n\n                        }\n                    },\n                    'css-loader',\n                    'postcss-loader',\n                    {\n                        loader: 'less-loader',\n                        options: {'modifyVars':theme,'javascriptEnabled': true}\n                    }\n                ]\n            }\n        ]\n    },\n    performance: {\n        hints: false\n    }\n})\n```\n####运行项目 打包构建\n```\nnpm run dev\nnpm run build\n```\n最后：在项目开发过程中，可以逐渐完善项目的架构。\n参考：\nhttps://webpack.docschina.org/guides/\nhttps://www.babeljs.cn/docs/babel-preset-stage-2\nhttps://ant.design/docs/react/customize-theme-cn\n\n\n\n\n\n","slug":"webpack-4-搭建-React-架构：-antd-中后台项目架构（一）","published":1,"date":"2019-09-13T02:18:12.189Z","updated":"2019-09-13T09:08:37.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73l000gwsl6lyv0523y","content":"<p>前言：最近工作需要，有三个项目，需要做三个中后台管理页面，除了页面不一样，其他的内容组织都一样，所以搭建这么一个通用的项目架构来应用到这个三个项目中，以下是笔记总结。</p>\n<p>前端工程师要有自己架构项目的能力，<code>create-react-app</code> 生成的是一个比较通用的项目结构，通常里面很多内容我们是用不到的，而且要改起来里面的 <code>webpack</code> 配置也更是繁琐，这就需要我们自己搭建一个适合自己项目的框架，然后配置必要的优化方案，这样能对这个项目做到了如指掌。也能锻炼我们的架构能力，组织代码的能力。</p>\n<p>下面我们基于 <code>React</code> 框架架构一个自己的项目，亲手配置开发环境 <code>webapck 4</code> 配置（本地跑起服务）；<br>生产环境的 <code>webpack</code> （网络优化，缓存，压缩代码等）配置，基于 <code>webpack 4</code> 做相应打包构建优化。</p>\n<p>系统环境要求：<br>基于<code>windows</code>系统，node版本是<code>v8.9.1</code>，npm版本是<code>v5.5.1</code>，webpack的版本是<code>v4.35.0</code>，安装模块使用淘宝镜像，这样使安装更快速，<code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<p>首先应该是要先考虑项目如何架构，模块如何划分，就近维护原则，以及单一职责原则，工具函数怎么规划等，我们可以借鉴<code>vue-cli</code>的架构模式，其中有很多我们可以学习效仿的。</p>\n<p>我们自己写的模块都放到 <code>src</code> 下面，<code>index.html</code> 作为 <code>html</code> 的模板，<code>webpack</code> 的配置直接放在根目录，这样更清晰，<code>dist</code> 目录用来放打包的项目代码，这个在 <code>webpack</code> 里面配置好，不需要手动建，每次 <code>build</code> 完之后清除目录重新打包，<code>mockData</code> 用来做数据模拟，<code>assets</code> 目录来放置静态图片和样式。</p>\n<p>目录建好之后，第一步先把项目跑起来，接下来做具体的配置；</p>\n<p>####安装依赖</p>\n<ul>\n<li><p>首先初始化项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基于webpack，所以我们要安装webpack相关：<code>webpack webpack-cli webpack-dev-server webpack-merge</code>，因为我们是开发和生产环境配置分离，需要<code>webpack-merge</code>这个工具来合并配置；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install webpack webpack-cli webpack-dev-server webpack-merge --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装处理<code>css</code>文件的模块，<code>css-loader</code> 负责将 <code>js</code> 中 <code>import</code> 的 <code>css</code> 文件提取出来，<code>style-loader</code> 负责将 <code>css</code> 插入到 <code>head</code> 的 <code>style</code>v标签内，<code>autoprefixer</code> 浏览器前缀自动补全，<code>less-loader</code> 处理 <code>less</code> 文件，<code>postcss-loader</code> 将 <code>css</code> 解析为 <code>css</code>，这个过程中可以使用很多插件来继续处理 <code>css</code> ，比如<code>autoprefixer</code>， <code>cssnano</code>，<code>cssnext</code>等；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install css-loader style-loader postcss-loader autoprefixer less less-loader --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 <code>babel</code> 转换 <code>javascript</code>  语法，转换es6，es7的新方法，安装<code>@babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-469960a7950e912f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>如果配置好运行 <code>webpack</code>，出现这错误，说明 <code>babel-core babel-loader</code> 版本不对应，安装对应版本即可。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill --save-dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装处理静态资源 <code>file-loader url-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install file-loader url-loader --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装根据 <code>html</code> 模板打包动态生成 <code>html</code> 文件的插件 <code>html-webpack-plugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装提取 <code>css</code> 到独立样式文件的插件 <code>extract-text-webpack-plugin</code>，安装提示说这个插件在 <code>webpack 4</code> 版本已弃用，采用异步加载，性能更好的的 <code>mini-css-extract-plugin</code> 代替， <code>mini-css-extract-plugin</code> 支持按需加载 <code>css</code> 和 <code>sourceMap</code>，只能用在 <code>webpack4</code> 中，由于这个插件不支持 <code>HMR</code>，所以只在生产环境上配置。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-9cbf6658855a706a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//cnpm install extract-text-webpack-plugin --save-dev</span><br><span class=\"line\">cnpm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装用来生产环境优化/最小化 <code>css</code> 代码的插件 <code>optimize-css-assets-webpack-plugin</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install optimize-css-assets-webpack-plugin --save--dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装压缩 <code>js</code> 的插件 <code>uglifyjs-webpack-plugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install uglifyjs-webpack-plugin --save--dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装用于清除 <code>dist</code> 构建文件夹的插件，<code>clean-webpack-plugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继续安装 <code>React</code> 相关配置：<code>react react-dom react-router</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install react react-dom react-router --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后安装 <code>React</code> 的组件库<code>antd</code>：<code>antd babel-plugin-import</code>，<code>babel-plugin-import</code> 用来按需引入 <code>antd</code> 的组件；<br>####配置  <code>.babelrc</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &quot;@babel/preset-env&quot;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;modules&quot;: false,</span><br><span class=\"line\">                &quot;targets&quot;: &#123;</span><br><span class=\"line\">                    &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;=8&quot;]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;@babel/preset-react&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;plugins&quot;: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &quot;import&quot;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;libraryName&quot;: &quot;antd&quot;,</span><br><span class=\"line\">                &quot;style&quot;: true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;@babel/transform-runtime&quot;, &quot;@babel/plugin-transform-regenerator&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>####配置 <code>postcss.config.js</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        require(&apos;autoprefixer&apos;)(),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####配置 <code>package.json</code> 中 <code>script</code> 运行、打包命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-4-demo&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class=\"line\">    &quot;dev&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@babel/core&quot;: &quot;^7.0.0&quot;,</span><br><span class=\"line\">    &quot;@babel/plugin-transform-regenerator&quot;: &quot;^7.4.5&quot;,</span><br><span class=\"line\">    &quot;@babel/plugin-transform-runtime&quot;: &quot;^7.5.0&quot;,</span><br><span class=\"line\">    &quot;@babel/preset-env&quot;: &quot;^7.5.0&quot;,</span><br><span class=\"line\">    &quot;@babel/preset-react&quot;: &quot;^7.0.0&quot;,</span><br><span class=\"line\">    &quot;@babel/preset-stage-2&quot;: &quot;^7.0.0&quot;,</span><br><span class=\"line\">    &quot;@babel/runtime&quot;: &quot;^7.5.0&quot;,</span><br><span class=\"line\">    &quot;autoprefixer&quot;: &quot;^9.6.0&quot;,</span><br><span class=\"line\">    &quot;babel-loader&quot;: &quot;^8.0.6&quot;,</span><br><span class=\"line\">    &quot;babel-plugin-import&quot;: &quot;^1.12.0&quot;,</span><br><span class=\"line\">    &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;css-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;file-loader&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;less&quot;: &quot;^3.9.0&quot;,</span><br><span class=\"line\">    &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class=\"line\">    &quot;mini-css-extract-plugin&quot;: &quot;^0.7.0&quot;,</span><br><span class=\"line\">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class=\"line\">    &quot;postcss-cssnext&quot;: &quot;^3.1.0&quot;,</span><br><span class=\"line\">    &quot;postcss-import&quot;: &quot;^12.0.1&quot;,</span><br><span class=\"line\">    &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;react&quot;: &quot;^16.8.6&quot;,</span><br><span class=\"line\">    &quot;react-dom&quot;: &quot;^16.8.6&quot;,</span><br><span class=\"line\">    &quot;react-router&quot;: &quot;^5.0.1&quot;,</span><br><span class=\"line\">    &quot;style-loader&quot;: &quot;^0.23.1&quot;,</span><br><span class=\"line\">    &quot;uglifyjs-webpack-plugin&quot;: &quot;^2.1.3&quot;,</span><br><span class=\"line\">    &quot;url-loader&quot;: &quot;^2.0.1&quot;,</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^4.35.0&quot;,</span><br><span class=\"line\">    &quot;webpack-cli&quot;: &quot;^3.3.5&quot;,</span><br><span class=\"line\">    &quot;webpack-dev-server&quot;: &quot;^3.7.2&quot;,</span><br><span class=\"line\">    &quot;webpack-merge&quot;: &quot;^4.2.1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;sideEffects&quot;: false,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;antd&quot;: &quot;^3.20.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;theme&quot;: &quot;./src/theme.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>theme</code> 字段是 <code>antd</code> 主题相关的配置<br><code>src/theme.js</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> *定制antd 样式</span><br><span class=\"line\">*/</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    &apos;text-color&apos;:&apos;#576077&apos;,</span><br><span class=\"line\">    &apos;font-size-base&apos;:&apos;14px&apos;, //默认字体大小</span><br><span class=\"line\">    &apos;layout-header-background&apos;: &apos;#0c8cee&apos;, //头部的颜色</span><br><span class=\"line\">    &apos;layout-sider-background&apos;: &apos;#2f3847&apos;, //边栏的颜色</span><br><span class=\"line\">    &apos;layout-body-background&apos;: &apos;#e4f3ff&apos;, //页面的背景颜色</span><br><span class=\"line\">    &apos;layout-header-height&apos;:&apos;50px&apos;, //头部的高</span><br><span class=\"line\">    &apos;layout-header-padding&apos;:0, //头部的padding</span><br><span class=\"line\">    &apos;card-head-color&apos;:&apos;#333&apos;,</span><br><span class=\"line\">    &apos;card-head-background&apos;:&apos;#f7f9f9&apos;, //卡片的头部背景颜色</span><br><span class=\"line\">    &apos;primary-color&apos;:&apos;#3eacff&apos;, //确认的颜色</span><br><span class=\"line\">    &apos;primary-5&apos;:&apos;#0c8cee&apos; , //确认的hover颜色</span><br><span class=\"line\">    &apos;tabs-card-head-background&apos;:&apos;#fff&apos;, //tab的headerColor</span><br><span class=\"line\">    &apos;tabs-title-font-size&apos;:&apos;14px&apos;,</span><br><span class=\"line\">    &apos;tooltip-max-width&apos;:&apos;500px&apos;,</span><br><span class=\"line\">    &apos;tooltip-bg&apos;:&apos;#efefef&apos;,</span><br><span class=\"line\">    &apos;tooltip-color&apos;:&apos;#000&apos;,</span><br><span class=\"line\">    &apos;tooltip-arrow-width&apos;:&apos;10px&apos;,</span><br><span class=\"line\">    &apos;table-header-bg&apos;:&apos;#e4f3ff&apos;,  //表格头部的背景颜色</span><br><span class=\"line\">    &apos;border-radius-base&apos;:0,</span><br><span class=\"line\">    &apos;border-radius-sm&apos;:0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####开发环境和生产环境公共配置 <code>webpack.common.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\">const theme = require(&apos;./src/theme&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: &apos;./src/main.js&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            title: &apos;webpack 4 production&apos;,</span><br><span class=\"line\">            template: &apos;index.html&apos;,</span><br><span class=\"line\">            filename: &apos;index.html&apos;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &apos;js/[name].[hash:8].js&apos;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [&apos;.js&apos;, &apos;.css&apos;, &apos;.less&apos;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.js$/,</span><br><span class=\"line\">                use: &apos;babel-loader&apos;,</span><br><span class=\"line\">                exclude: path.resolve(__dirname, &apos;node_modules&apos;),</span><br><span class=\"line\">                include:path.resolve(__dirname, &apos;src&apos;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.(woff2?|eot|ttf|otf|svg)(\\?.*)?$/,</span><br><span class=\"line\">                loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                include: /fonts?/,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    limit: 1024,</span><br><span class=\"line\">                    name: &apos;fonts/[name].[hash:7].[ext]&apos;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,</span><br><span class=\"line\">                loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                exclude: /fonts?/,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    limit: 4096,                                </span><br><span class=\"line\">                    name: &apos;images/[name].[hash:7].[ext]&apos;                        </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,</span><br><span class=\"line\">                loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    limit: 4096,</span><br><span class=\"line\">                    name: &apos;media/[name].[hash:7].[ext]&apos;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####开发环境配置<code>webpack.dev.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">const theme = require(&apos;./src/theme&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;development&apos;,</span><br><span class=\"line\">    devtool: &apos;inline-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class=\"line\">        hot: true,</span><br><span class=\"line\">        port: 9000,</span><br><span class=\"line\">        overlay: &#123;</span><br><span class=\"line\">            warnings: false,</span><br><span class=\"line\">            errors: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.css$/,</span><br><span class=\"line\">                use:[</span><br><span class=\"line\">                  &apos;style-loader&apos;,</span><br><span class=\"line\">                  &apos;css-loader&apos;,</span><br><span class=\"line\">                  &apos;postcss-loader&apos;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.less$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                  &apos;style-loader&apos;,</span><br><span class=\"line\">                  &apos;css-loader&apos;,</span><br><span class=\"line\">                  &apos;postcss-loader&apos;,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    loader: &apos;less-loader&apos;,</span><br><span class=\"line\">                    options: &#123;&apos;modifyVars&apos;:theme,&apos;javascriptEnabled&apos;: true&#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>####生产环境优化配置<code>webpack.prod.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\">const &#123; CleanWebpackPlugin &#125; = require(&apos;clean-webpack-plugin&apos;)</span><br><span class=\"line\">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class=\"line\">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;)</span><br><span class=\"line\">const OptimizeCSSAssetsPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const theme = require(&apos;./src/theme&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;production&apos;,</span><br><span class=\"line\">    devtool: &apos;source-map&apos;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new CleanWebpackPlugin(),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &apos;css/[name].[chunkhash:8].css&apos;,</span><br><span class=\"line\">           // chunkFilename: &apos;css/[name]-[id].[chunkhash:8].css&apos;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        minimizer: [</span><br><span class=\"line\">            new UglifyJsPlugin(&#123;</span><br><span class=\"line\">                cache: true,</span><br><span class=\"line\">                parallel: false,</span><br><span class=\"line\">                sourceMap: false,</span><br><span class=\"line\">                uglifyOptions:&#123;</span><br><span class=\"line\">                    output: &#123;</span><br><span class=\"line\">                        ascii_only: true</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            new OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        // splitChunks:&#123;</span><br><span class=\"line\">        //     minChunks: 2,</span><br><span class=\"line\">        //     cacheGroups: &#123;</span><br><span class=\"line\">        //         vendor: &#123;</span><br><span class=\"line\">        //             name: &apos;vendor&apos;,</span><br><span class=\"line\">        //             chunks: &apos;initial&apos;,</span><br><span class=\"line\">        //             test: /[\\\\/]node_modules[\\\\/]/</span><br><span class=\"line\">        //         &#125;</span><br><span class=\"line\">        //     &#125;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &apos;css-loader&apos;,</span><br><span class=\"line\">                    &apos;postcss-loader&apos;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.less$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &apos;css-loader&apos;,</span><br><span class=\"line\">                    &apos;postcss-loader&apos;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &apos;less-loader&apos;,</span><br><span class=\"line\">                        options: &#123;&apos;modifyVars&apos;:theme,&apos;javascriptEnabled&apos;: true&#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    performance: &#123;</span><br><span class=\"line\">        hints: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>####运行项目 打包构建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>最后：在项目开发过程中，可以逐渐完善项目的架构。<br>参考：<br><a href=\"https://webpack.docschina.org/guides/\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/</a><br><a href=\"https://www.babeljs.cn/docs/babel-preset-stage-2\" target=\"_blank\" rel=\"noopener\">https://www.babeljs.cn/docs/babel-preset-stage-2</a><br><a href=\"https://ant.design/docs/react/customize-theme-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/docs/react/customize-theme-cn</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言：最近工作需要，有三个项目，需要做三个中后台管理页面，除了页面不一样，其他的内容组织都一样，所以搭建这么一个通用的项目架构来应用到这个三个项目中，以下是笔记总结。</p>\n<p>前端工程师要有自己架构项目的能力，<code>create-react-app</code> 生成的是一个比较通用的项目结构，通常里面很多内容我们是用不到的，而且要改起来里面的 <code>webpack</code> 配置也更是繁琐，这就需要我们自己搭建一个适合自己项目的框架，然后配置必要的优化方案，这样能对这个项目做到了如指掌。也能锻炼我们的架构能力，组织代码的能力。</p>\n<p>下面我们基于 <code>React</code> 框架架构一个自己的项目，亲手配置开发环境 <code>webapck 4</code> 配置（本地跑起服务）；<br>生产环境的 <code>webpack</code> （网络优化，缓存，压缩代码等）配置，基于 <code>webpack 4</code> 做相应打包构建优化。</p>\n<p>系统环境要求：<br>基于<code>windows</code>系统，node版本是<code>v8.9.1</code>，npm版本是<code>v5.5.1</code>，webpack的版本是<code>v4.35.0</code>，安装模块使用淘宝镜像，这样使安装更快速，<code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<p>首先应该是要先考虑项目如何架构，模块如何划分，就近维护原则，以及单一职责原则，工具函数怎么规划等，我们可以借鉴<code>vue-cli</code>的架构模式，其中有很多我们可以学习效仿的。</p>\n<p>我们自己写的模块都放到 <code>src</code> 下面，<code>index.html</code> 作为 <code>html</code> 的模板，<code>webpack</code> 的配置直接放在根目录，这样更清晰，<code>dist</code> 目录用来放打包的项目代码，这个在 <code>webpack</code> 里面配置好，不需要手动建，每次 <code>build</code> 完之后清除目录重新打包，<code>mockData</code> 用来做数据模拟，<code>assets</code> 目录来放置静态图片和样式。</p>\n<p>目录建好之后，第一步先把项目跑起来，接下来做具体的配置；</p>\n<p>####安装依赖</p>\n<ul>\n<li><p>首先初始化项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>基于webpack，所以我们要安装webpack相关：<code>webpack webpack-cli webpack-dev-server webpack-merge</code>，因为我们是开发和生产环境配置分离，需要<code>webpack-merge</code>这个工具来合并配置；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install webpack webpack-cli webpack-dev-server webpack-merge --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装处理<code>css</code>文件的模块，<code>css-loader</code> 负责将 <code>js</code> 中 <code>import</code> 的 <code>css</code> 文件提取出来，<code>style-loader</code> 负责将 <code>css</code> 插入到 <code>head</code> 的 <code>style</code>v标签内，<code>autoprefixer</code> 浏览器前缀自动补全，<code>less-loader</code> 处理 <code>less</code> 文件，<code>postcss-loader</code> 将 <code>css</code> 解析为 <code>css</code>，这个过程中可以使用很多插件来继续处理 <code>css</code> ，比如<code>autoprefixer</code>， <code>cssnano</code>，<code>cssnext</code>等；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install css-loader style-loader postcss-loader autoprefixer less less-loader --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 <code>babel</code> 转换 <code>javascript</code>  语法，转换es6，es7的新方法，安装<code>@babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-469960a7950e912f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>如果配置好运行 <code>webpack</code>，出现这错误，说明 <code>babel-core babel-loader</code> 版本不对应，安装对应版本即可。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @babel/core babel-loader @babel/preset-env @babel/preset-stage-2 @babel/runtime @babel/plugin-transform-runtime @babel/plugin-transform-regenerator babel-polyfill --save-dev</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>安装处理静态资源 <code>file-loader url-loader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install file-loader url-loader --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装根据 <code>html</code> 模板打包动态生成 <code>html</code> 文件的插件 <code>html-webpack-plugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装提取 <code>css</code> 到独立样式文件的插件 <code>extract-text-webpack-plugin</code>，安装提示说这个插件在 <code>webpack 4</code> 版本已弃用，采用异步加载，性能更好的的 <code>mini-css-extract-plugin</code> 代替， <code>mini-css-extract-plugin</code> 支持按需加载 <code>css</code> 和 <code>sourceMap</code>，只能用在 <code>webpack4</code> 中，由于这个插件不支持 <code>HMR</code>，所以只在生产环境上配置。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-9cbf6658855a706a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//cnpm install extract-text-webpack-plugin --save-dev</span><br><span class=\"line\">cnpm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装用来生产环境优化/最小化 <code>css</code> 代码的插件 <code>optimize-css-assets-webpack-plugin</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install optimize-css-assets-webpack-plugin --save--dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装压缩 <code>js</code> 的插件 <code>uglifyjs-webpack-plugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install uglifyjs-webpack-plugin --save--dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装用于清除 <code>dist</code> 构建文件夹的插件，<code>clean-webpack-plugin</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继续安装 <code>React</code> 相关配置：<code>react react-dom react-router</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install react react-dom react-router --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后安装 <code>React</code> 的组件库<code>antd</code>：<code>antd babel-plugin-import</code>，<code>babel-plugin-import</code> 用来按需引入 <code>antd</code> 的组件；<br>####配置  <code>.babelrc</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &quot;@babel/preset-env&quot;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;modules&quot;: false,</span><br><span class=\"line\">                &quot;targets&quot;: &#123;</span><br><span class=\"line\">                    &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;=8&quot;]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;@babel/preset-react&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;plugins&quot;: [</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &quot;import&quot;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                &quot;libraryName&quot;: &quot;antd&quot;,</span><br><span class=\"line\">                &quot;style&quot;: true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        &quot;@babel/transform-runtime&quot;, &quot;@babel/plugin-transform-regenerator&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>####配置 <code>postcss.config.js</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        require(&apos;autoprefixer&apos;)(),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####配置 <code>package.json</code> 中 <code>script</code> 运行、打包命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-4-demo&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class=\"line\">    &quot;dev&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;@babel/core&quot;: &quot;^7.0.0&quot;,</span><br><span class=\"line\">    &quot;@babel/plugin-transform-regenerator&quot;: &quot;^7.4.5&quot;,</span><br><span class=\"line\">    &quot;@babel/plugin-transform-runtime&quot;: &quot;^7.5.0&quot;,</span><br><span class=\"line\">    &quot;@babel/preset-env&quot;: &quot;^7.5.0&quot;,</span><br><span class=\"line\">    &quot;@babel/preset-react&quot;: &quot;^7.0.0&quot;,</span><br><span class=\"line\">    &quot;@babel/preset-stage-2&quot;: &quot;^7.0.0&quot;,</span><br><span class=\"line\">    &quot;@babel/runtime&quot;: &quot;^7.5.0&quot;,</span><br><span class=\"line\">    &quot;autoprefixer&quot;: &quot;^9.6.0&quot;,</span><br><span class=\"line\">    &quot;babel-loader&quot;: &quot;^8.0.6&quot;,</span><br><span class=\"line\">    &quot;babel-plugin-import&quot;: &quot;^1.12.0&quot;,</span><br><span class=\"line\">    &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,</span><br><span class=\"line\">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;css-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;file-loader&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;less&quot;: &quot;^3.9.0&quot;,</span><br><span class=\"line\">    &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class=\"line\">    &quot;mini-css-extract-plugin&quot;: &quot;^0.7.0&quot;,</span><br><span class=\"line\">    &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class=\"line\">    &quot;postcss-cssnext&quot;: &quot;^3.1.0&quot;,</span><br><span class=\"line\">    &quot;postcss-import&quot;: &quot;^12.0.1&quot;,</span><br><span class=\"line\">    &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;react&quot;: &quot;^16.8.6&quot;,</span><br><span class=\"line\">    &quot;react-dom&quot;: &quot;^16.8.6&quot;,</span><br><span class=\"line\">    &quot;react-router&quot;: &quot;^5.0.1&quot;,</span><br><span class=\"line\">    &quot;style-loader&quot;: &quot;^0.23.1&quot;,</span><br><span class=\"line\">    &quot;uglifyjs-webpack-plugin&quot;: &quot;^2.1.3&quot;,</span><br><span class=\"line\">    &quot;url-loader&quot;: &quot;^2.0.1&quot;,</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^4.35.0&quot;,</span><br><span class=\"line\">    &quot;webpack-cli&quot;: &quot;^3.3.5&quot;,</span><br><span class=\"line\">    &quot;webpack-dev-server&quot;: &quot;^3.7.2&quot;,</span><br><span class=\"line\">    &quot;webpack-merge&quot;: &quot;^4.2.1&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;sideEffects&quot;: false,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;antd&quot;: &quot;^3.20.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;theme&quot;: &quot;./src/theme.js&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意：<code>theme</code> 字段是 <code>antd</code> 主题相关的配置<br><code>src/theme.js</code> 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\"> *定制antd 样式</span><br><span class=\"line\">*/</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    &apos;text-color&apos;:&apos;#576077&apos;,</span><br><span class=\"line\">    &apos;font-size-base&apos;:&apos;14px&apos;, //默认字体大小</span><br><span class=\"line\">    &apos;layout-header-background&apos;: &apos;#0c8cee&apos;, //头部的颜色</span><br><span class=\"line\">    &apos;layout-sider-background&apos;: &apos;#2f3847&apos;, //边栏的颜色</span><br><span class=\"line\">    &apos;layout-body-background&apos;: &apos;#e4f3ff&apos;, //页面的背景颜色</span><br><span class=\"line\">    &apos;layout-header-height&apos;:&apos;50px&apos;, //头部的高</span><br><span class=\"line\">    &apos;layout-header-padding&apos;:0, //头部的padding</span><br><span class=\"line\">    &apos;card-head-color&apos;:&apos;#333&apos;,</span><br><span class=\"line\">    &apos;card-head-background&apos;:&apos;#f7f9f9&apos;, //卡片的头部背景颜色</span><br><span class=\"line\">    &apos;primary-color&apos;:&apos;#3eacff&apos;, //确认的颜色</span><br><span class=\"line\">    &apos;primary-5&apos;:&apos;#0c8cee&apos; , //确认的hover颜色</span><br><span class=\"line\">    &apos;tabs-card-head-background&apos;:&apos;#fff&apos;, //tab的headerColor</span><br><span class=\"line\">    &apos;tabs-title-font-size&apos;:&apos;14px&apos;,</span><br><span class=\"line\">    &apos;tooltip-max-width&apos;:&apos;500px&apos;,</span><br><span class=\"line\">    &apos;tooltip-bg&apos;:&apos;#efefef&apos;,</span><br><span class=\"line\">    &apos;tooltip-color&apos;:&apos;#000&apos;,</span><br><span class=\"line\">    &apos;tooltip-arrow-width&apos;:&apos;10px&apos;,</span><br><span class=\"line\">    &apos;table-header-bg&apos;:&apos;#e4f3ff&apos;,  //表格头部的背景颜色</span><br><span class=\"line\">    &apos;border-radius-base&apos;:0,</span><br><span class=\"line\">    &apos;border-radius-sm&apos;:0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####开发环境和生产环境公共配置 <code>webpack.common.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\">const theme = require(&apos;./src/theme&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: &apos;./src/main.js&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            title: &apos;webpack 4 production&apos;,</span><br><span class=\"line\">            template: &apos;index.html&apos;,</span><br><span class=\"line\">            filename: &apos;index.html&apos;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &apos;js/[name].[hash:8].js&apos;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    resolve: &#123;</span><br><span class=\"line\">        extensions: [&apos;.js&apos;, &apos;.css&apos;, &apos;.less&apos;]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.js$/,</span><br><span class=\"line\">                use: &apos;babel-loader&apos;,</span><br><span class=\"line\">                exclude: path.resolve(__dirname, &apos;node_modules&apos;),</span><br><span class=\"line\">                include:path.resolve(__dirname, &apos;src&apos;)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.(woff2?|eot|ttf|otf|svg)(\\?.*)?$/,</span><br><span class=\"line\">                loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                include: /fonts?/,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    limit: 1024,</span><br><span class=\"line\">                    name: &apos;fonts/[name].[hash:7].[ext]&apos;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,</span><br><span class=\"line\">                loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                exclude: /fonts?/,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    limit: 4096,                                </span><br><span class=\"line\">                    name: &apos;images/[name].[hash:7].[ext]&apos;                        </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,</span><br><span class=\"line\">                loader: &apos;url-loader&apos;,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    limit: 4096,</span><br><span class=\"line\">                    name: &apos;media/[name].[hash:7].[ext]&apos;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>####开发环境配置<code>webpack.dev.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\">const theme = require(&apos;./src/theme&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;development&apos;,</span><br><span class=\"line\">    devtool: &apos;inline-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class=\"line\">        hot: true,</span><br><span class=\"line\">        port: 9000,</span><br><span class=\"line\">        overlay: &#123;</span><br><span class=\"line\">            warnings: false,</span><br><span class=\"line\">            errors: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.css$/,</span><br><span class=\"line\">                use:[</span><br><span class=\"line\">                  &apos;style-loader&apos;,</span><br><span class=\"line\">                  &apos;css-loader&apos;,</span><br><span class=\"line\">                  &apos;postcss-loader&apos;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.less$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                  &apos;style-loader&apos;,</span><br><span class=\"line\">                  &apos;css-loader&apos;,</span><br><span class=\"line\">                  &apos;postcss-loader&apos;,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    loader: &apos;less-loader&apos;,</span><br><span class=\"line\">                    options: &#123;&apos;modifyVars&apos;:theme,&apos;javascriptEnabled&apos;: true&#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>####生产环境优化配置<code>webpack.prod.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\">const &#123; CleanWebpackPlugin &#125; = require(&apos;clean-webpack-plugin&apos;)</span><br><span class=\"line\">const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;)</span><br><span class=\"line\">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;)</span><br><span class=\"line\">const OptimizeCSSAssetsPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const theme = require(&apos;./src/theme&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;production&apos;,</span><br><span class=\"line\">    devtool: &apos;source-map&apos;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new CleanWebpackPlugin(),</span><br><span class=\"line\">        new MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">            filename: &apos;css/[name].[chunkhash:8].css&apos;,</span><br><span class=\"line\">           // chunkFilename: &apos;css/[name]-[id].[chunkhash:8].css&apos;,</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    optimization: &#123;</span><br><span class=\"line\">        minimizer: [</span><br><span class=\"line\">            new UglifyJsPlugin(&#123;</span><br><span class=\"line\">                cache: true,</span><br><span class=\"line\">                parallel: false,</span><br><span class=\"line\">                sourceMap: false,</span><br><span class=\"line\">                uglifyOptions:&#123;</span><br><span class=\"line\">                    output: &#123;</span><br><span class=\"line\">                        ascii_only: true</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;),</span><br><span class=\"line\">            new OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        // splitChunks:&#123;</span><br><span class=\"line\">        //     minChunks: 2,</span><br><span class=\"line\">        //     cacheGroups: &#123;</span><br><span class=\"line\">        //         vendor: &#123;</span><br><span class=\"line\">        //             name: &apos;vendor&apos;,</span><br><span class=\"line\">        //             chunks: &apos;initial&apos;,</span><br><span class=\"line\">        //             test: /[\\\\/]node_modules[\\\\/]/</span><br><span class=\"line\">        //         &#125;</span><br><span class=\"line\">        //     &#125;</span><br><span class=\"line\">        // &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.css$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &apos;css-loader&apos;,</span><br><span class=\"line\">                    &apos;postcss-loader&apos;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: /\\.less$/,</span><br><span class=\"line\">                use: [</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: MiniCssExtractPlugin.loader,</span><br><span class=\"line\">                        options: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &apos;css-loader&apos;,</span><br><span class=\"line\">                    &apos;postcss-loader&apos;,</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        loader: &apos;less-loader&apos;,</span><br><span class=\"line\">                        options: &#123;&apos;modifyVars&apos;:theme,&apos;javascriptEnabled&apos;: true&#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    performance: &#123;</span><br><span class=\"line\">        hints: false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>####运行项目 打包构建</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n\n<p>最后：在项目开发过程中，可以逐渐完善项目的架构。<br>参考：<br><a href=\"https://webpack.docschina.org/guides/\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/</a><br><a href=\"https://www.babeljs.cn/docs/babel-preset-stage-2\" target=\"_blank\" rel=\"noopener\">https://www.babeljs.cn/docs/babel-preset-stage-2</a><br><a href=\"https://ant.design/docs/react/customize-theme-cn\" target=\"_blank\" rel=\"noopener\">https://ant.design/docs/react/customize-theme-cn</a></p>\n"},{"title":"webpack-4-中-tree-shaking-生产环境配置","_content":"上一篇介绍了什么是`tree shaking`，这一篇我们来实操一下。\nnode 版本是` v8.9.1`，webpack的版本是`4.35.0`。\n\n最终的项目文件目录结构如下：\n![](https://upload-images.jianshu.io/upload_images/5541401-94d7de55e8f4bb2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n新建一个项目`webpack-4-demo`，然后`npm init -y`，生成`package.json`文件，然后安装`webpack 4`\n```\n npm install --save-dev webpack webpack-cli webpack-dev-server webpack-merge\n```\n```\nnpm install --save-dev clean-webpack-plugin html-webpack-plugin\n```\n新建`src `目录作为源文件目录，新建webpack配置文件，区分开发环境和生产环境，然后使用`webpack-merge`来合并配置。\n新建基础配置文件`webpack.common.js`，代码如下\n```\n//webpack.common.js\nconst path = require('path')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: {\n        app: './src/index.js',\n    },\n    plugins: [\n        new CleanWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            title: 'webpack 4 production',\n            template: 'index.html',\n            filename: 'index.html'\n        }),\n    ],\n    output: {\n        filename: '[name].bandle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n        ]\n    }\n}\n```\n新建开发环境配置文件`webpack.dev.js`\n```\n//webpack.dev.js\nconst path = require('path')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\nconst webpack = require('webpack')\n\nmodule.exports = merge(common, {\n    mode: 'development',\n    devtool: 'inline-source-map',\n    devServer: {\n        contentBase: './dist',\n        hot: true,\n        port: 9000\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot\n    ]\n})\n```\n新建生产环境配置文件`webpack.prod.js `\n```\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\n\nmodule.exports = merge(common, {\n    devtool: 'source-map'\n})\n```\n新建项目入口文件src/index.js\n```\n//src/index.js\nimport { square } from './math.js'\nconsole.log('打印2的平方',square(2))\n\nconst app = document.getElementById('app')\napp.innerHTML = 'hello world';\n```\n再建一个`index.js`依赖的模块文件`math.js`\n```\n//src/math.js\nexport function square(x) {\n    return x * x;\n}\n\nexport function cube(x) {\n    return x * x * x;\n}\n```\n新建打包需要的模板文件`index.html`\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n</html>\n```\n最后配置我们需要的npm script 启动命令，package.json\n```\n//package.json\n{\n  \"name\": \"webpack-4-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n    \"build\": \"webpack --config webpack.prod.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"webpack\": \"^4.35.0\",\n    \"webpack-cli\": \"^3.3.5\",\n    \"webpack-dev-server\": \"^3.7.2\",\n    \"webpack-merge\": \"^4.2.1\"\n  }\n}\n```\n现在我们来直接打包，没有做`tree shaking`的优化，看下打包的大小；\n```\nE:\\workCode\\webpack-4-demo>npm run build\n\n> webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo\n> webpack --config webpack.prod.js\n\nHash: 59507293492d05eeeeff\nVersion: webpack 4.35.0\nTime: 473ms\nBuilt at: 2019-06-27 13:01:07\n            Asset       Size  Chunks             Chunk Names\n    app.bandle.js    4.7 KiB     app  [emitted]  app\napp.bandle.js.map   3.97 KiB     app  [emitted]  app\n       index.html  366 bytes          [emitted]\nEntrypoint app = app.bandle.js app.bandle.js.map\n[./src/index.js] 145 bytes {app} [built]\n[./src/math.js] 104 bytes {app} [built]\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint undefined = index.html\n    [./node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./index.html] e:/wo\nrkCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./in\ndex.html 582 bytes {0} [built]\n        + 3 hidden modules\n\nE:\\workCode\\webpack-4-demo>\n```\n可以看出项目打包的大小是：`app.bandle.js    4.7 KiB`。我们`index.js`文件引入了`math.js`模块，只用到了`square`方法，并没有用到`cube`方法，查看打包之后的`app.bandle.js`，找到我们自己的代码：\n```\n...\n/***/ \"./src/index.js\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! no exports provided */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./src/math.js\");\n\nconsole.log('打印2的平方',Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[\"square\"])(2))\n\nconst app = document.getElementById('app')\napp.innerHTML = 'hello world';\n\n/***/ }),\n\n/***/ \"./src/math.js\":\n/*!*********************!*\\\n  !*** ./src/math.js ***!\n  \\*********************/\n/*! exports provided: square, cube */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"square\", function() { return square; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cube\", function() { return cube; });\nfunction square(x) {\n    return x * x;\n}\n\nfunction cube(x) {\n    return x * x * x;\n}\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=app.bandle.js.map\n...\n```\n可以看到`cube`方法仍然被打包到了`app.bandle.js`里面。\n现在我们使用`tree shaking`，看看看打包之后的文件大小。（`注意，也可以在命令行接口中使用webpack  --optimize-minimize 标记，来启用 TerserPlugin。`）\n在`webpack 4`版本中，直接对生产环境配置`mode:'production'`，即可启用`tree shaking`，并将代码压缩，\n然后在`package.json`文件加上`\"sideEffects\": false`，（`注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 css-loader 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：`）用来提示` webpack compiler `找出哪些代码是未被引用的，然后删除掉。\n```\n//webpack.prod.js\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\n\nmodule.exports = merge(common, {\n    mode: 'production',\n    devtool: 'source-map'\n})\n```\n```\n//package.json\n{\n  ...\n  \"sideEffects\": false\n  ...\n}\n```\n继续运行`npm run build`，可以看到代码体积变小了`app.bandle.js   1.06 KiB`，\n```\nE:\\workCode\\webpack-4-demo>npm run build\n\n> webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo\n> webpack --config webpack.prod.js\n\nHash: d1508bf9df4f2ca17868\nVersion: webpack 4.35.0\nTime: 662ms\nBuilt at: 2019-06-27 13:41:06\n            Asset       Size  Chunks             Chunk Names\n    app.bandle.js   1.06 KiB       0  [emitted]  app\napp.bandle.js.map   4.88 KiB       0  [emitted]  app\n       index.html  366 bytes          [emitted]\nEntrypoint app = app.bandle.js app.bandle.js.map\n[0] ./src/index.js + 1 modules 249 bytes {0} [built]\n    | ./src/index.js 145 bytes [built]\n    | ./src/math.js 104 bytes [built]\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint undefined = index.html\n    [0] e:/workCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/l\noader.js!./index.html 582 bytes {0} [built]\n        + 3 hidden modules\n\nE:\\workCode\\webpack-4-demo>\n```\n再来看一下打包之后的代码`app.bandle.js`，现在整个 `bundle` 都已经被 `minify(压缩)` 和 `mangle(混淆破坏)`，但是如果仔细观察，则不会看到引入` cube `函数，但能看到 `square`函数的混淆破坏版本`{\"use strict\";var n;r.r(t),console.log(\"打印2的平方\",(n=2)*n),document.getElementById(\"app\").innerHTML=\"hello world\"}`\n```\n!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";var n;r.r(t),console.log(\"打印2的平方\",(n=2)*n),document.getElementById(\"app\").innerHTML=\"hello world\"}]);\n//# sourceMappingURL=app.bandle.js.map\n```\n更多详细的`tree shaking`介绍，大家可以参考官方文档。\n参考：\nhttps://webpack.js.org/guides/tree-shaking/#root\nhttps://webpack.docschina.org/guides/production\nhttps://webpack.docschina.org/guides/tree-shaking/\n","source":"_posts/webpack-4-中-tree-shaking-生产环境配置.md","raw":"---\ntitle: webpack-4-中-tree-shaking-生产环境配置\n---\n上一篇介绍了什么是`tree shaking`，这一篇我们来实操一下。\nnode 版本是` v8.9.1`，webpack的版本是`4.35.0`。\n\n最终的项目文件目录结构如下：\n![](https://upload-images.jianshu.io/upload_images/5541401-94d7de55e8f4bb2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n新建一个项目`webpack-4-demo`，然后`npm init -y`，生成`package.json`文件，然后安装`webpack 4`\n```\n npm install --save-dev webpack webpack-cli webpack-dev-server webpack-merge\n```\n```\nnpm install --save-dev clean-webpack-plugin html-webpack-plugin\n```\n新建`src `目录作为源文件目录，新建webpack配置文件，区分开发环境和生产环境，然后使用`webpack-merge`来合并配置。\n新建基础配置文件`webpack.common.js`，代码如下\n```\n//webpack.common.js\nconst path = require('path')\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\n\nmodule.exports = {\n    entry: {\n        app: './src/index.js',\n    },\n    plugins: [\n        new CleanWebpackPlugin(),\n        new HtmlWebpackPlugin({\n            title: 'webpack 4 production',\n            template: 'index.html',\n            filename: 'index.html'\n        }),\n    ],\n    output: {\n        filename: '[name].bandle.js',\n        path: path.resolve(__dirname, 'dist')\n    },\n    module: {\n        rules: [\n        ]\n    }\n}\n```\n新建开发环境配置文件`webpack.dev.js`\n```\n//webpack.dev.js\nconst path = require('path')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\nconst webpack = require('webpack')\n\nmodule.exports = merge(common, {\n    mode: 'development',\n    devtool: 'inline-source-map',\n    devServer: {\n        contentBase: './dist',\n        hot: true,\n        port: 9000\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot\n    ]\n})\n```\n新建生产环境配置文件`webpack.prod.js `\n```\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\n\nmodule.exports = merge(common, {\n    devtool: 'source-map'\n})\n```\n新建项目入口文件src/index.js\n```\n//src/index.js\nimport { square } from './math.js'\nconsole.log('打印2的平方',square(2))\n\nconst app = document.getElementById('app')\napp.innerHTML = 'hello world';\n```\n再建一个`index.js`依赖的模块文件`math.js`\n```\n//src/math.js\nexport function square(x) {\n    return x * x;\n}\n\nexport function cube(x) {\n    return x * x * x;\n}\n```\n新建打包需要的模板文件`index.html`\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title><%= htmlWebpackPlugin.options.title %></title>\n</head>\n<body>\n    <div id=\"app\"></div>\n</body>\n</html>\n```\n最后配置我们需要的npm script 启动命令，package.json\n```\n//package.json\n{\n  \"name\": \"webpack-4-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n    \"build\": \"webpack --config webpack.prod.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"webpack\": \"^4.35.0\",\n    \"webpack-cli\": \"^3.3.5\",\n    \"webpack-dev-server\": \"^3.7.2\",\n    \"webpack-merge\": \"^4.2.1\"\n  }\n}\n```\n现在我们来直接打包，没有做`tree shaking`的优化，看下打包的大小；\n```\nE:\\workCode\\webpack-4-demo>npm run build\n\n> webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo\n> webpack --config webpack.prod.js\n\nHash: 59507293492d05eeeeff\nVersion: webpack 4.35.0\nTime: 473ms\nBuilt at: 2019-06-27 13:01:07\n            Asset       Size  Chunks             Chunk Names\n    app.bandle.js    4.7 KiB     app  [emitted]  app\napp.bandle.js.map   3.97 KiB     app  [emitted]  app\n       index.html  366 bytes          [emitted]\nEntrypoint app = app.bandle.js app.bandle.js.map\n[./src/index.js] 145 bytes {app} [built]\n[./src/math.js] 104 bytes {app} [built]\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint undefined = index.html\n    [./node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./index.html] e:/wo\nrkCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./in\ndex.html 582 bytes {0} [built]\n        + 3 hidden modules\n\nE:\\workCode\\webpack-4-demo>\n```\n可以看出项目打包的大小是：`app.bandle.js    4.7 KiB`。我们`index.js`文件引入了`math.js`模块，只用到了`square`方法，并没有用到`cube`方法，查看打包之后的`app.bandle.js`，找到我们自己的代码：\n```\n...\n/***/ \"./src/index.js\":\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! no exports provided */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"./src/math.js\");\n\nconsole.log('打印2的平方',Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[\"square\"])(2))\n\nconst app = document.getElementById('app')\napp.innerHTML = 'hello world';\n\n/***/ }),\n\n/***/ \"./src/math.js\":\n/*!*********************!*\\\n  !*** ./src/math.js ***!\n  \\*********************/\n/*! exports provided: square, cube */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"square\", function() { return square; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cube\", function() { return cube; });\nfunction square(x) {\n    return x * x;\n}\n\nfunction cube(x) {\n    return x * x * x;\n}\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=app.bandle.js.map\n...\n```\n可以看到`cube`方法仍然被打包到了`app.bandle.js`里面。\n现在我们使用`tree shaking`，看看看打包之后的文件大小。（`注意，也可以在命令行接口中使用webpack  --optimize-minimize 标记，来启用 TerserPlugin。`）\n在`webpack 4`版本中，直接对生产环境配置`mode:'production'`，即可启用`tree shaking`，并将代码压缩，\n然后在`package.json`文件加上`\"sideEffects\": false`，（`注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 css-loader 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：`）用来提示` webpack compiler `找出哪些代码是未被引用的，然后删除掉。\n```\n//webpack.prod.js\nconst merge = require('webpack-merge')\nconst common = require('./webpack.common.js')\n\nmodule.exports = merge(common, {\n    mode: 'production',\n    devtool: 'source-map'\n})\n```\n```\n//package.json\n{\n  ...\n  \"sideEffects\": false\n  ...\n}\n```\n继续运行`npm run build`，可以看到代码体积变小了`app.bandle.js   1.06 KiB`，\n```\nE:\\workCode\\webpack-4-demo>npm run build\n\n> webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo\n> webpack --config webpack.prod.js\n\nHash: d1508bf9df4f2ca17868\nVersion: webpack 4.35.0\nTime: 662ms\nBuilt at: 2019-06-27 13:41:06\n            Asset       Size  Chunks             Chunk Names\n    app.bandle.js   1.06 KiB       0  [emitted]  app\napp.bandle.js.map   4.88 KiB       0  [emitted]  app\n       index.html  366 bytes          [emitted]\nEntrypoint app = app.bandle.js app.bandle.js.map\n[0] ./src/index.js + 1 modules 249 bytes {0} [built]\n    | ./src/index.js 145 bytes [built]\n    | ./src/math.js 104 bytes [built]\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint undefined = index.html\n    [0] e:/workCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/l\noader.js!./index.html 582 bytes {0} [built]\n        + 3 hidden modules\n\nE:\\workCode\\webpack-4-demo>\n```\n再来看一下打包之后的代码`app.bandle.js`，现在整个 `bundle` 都已经被 `minify(压缩)` 和 `mangle(混淆破坏)`，但是如果仔细观察，则不会看到引入` cube `函数，但能看到 `square`函数的混淆破坏版本`{\"use strict\";var n;r.r(t),console.log(\"打印2的平方\",(n=2)*n),document.getElementById(\"app\").innerHTML=\"hello world\"}`\n```\n!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=0)}([function(e,t,r){\"use strict\";var n;r.r(t),console.log(\"打印2的平方\",(n=2)*n),document.getElementById(\"app\").innerHTML=\"hello world\"}]);\n//# sourceMappingURL=app.bandle.js.map\n```\n更多详细的`tree shaking`介绍，大家可以参考官方文档。\n参考：\nhttps://webpack.js.org/guides/tree-shaking/#root\nhttps://webpack.docschina.org/guides/production\nhttps://webpack.docschina.org/guides/tree-shaking/\n","slug":"webpack-4-中-tree-shaking-生产环境配置","published":1,"date":"2019-09-13T02:18:12.177Z","updated":"2019-09-13T09:08:37.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73m000hwsl66vfjihpy","content":"<p>上一篇介绍了什么是<code>tree shaking</code>，这一篇我们来实操一下。<br>node 版本是<code>v8.9.1</code>，webpack的版本是<code>4.35.0</code>。</p>\n<p>最终的项目文件目录结构如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-94d7de55e8f4bb2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>新建一个项目<code>webpack-4-demo</code>，然后<code>npm init -y</code>，生成<code>package.json</code>文件，然后安装<code>webpack 4</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack webpack-cli webpack-dev-server webpack-merge</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>新建<code>src</code>目录作为源文件目录，新建webpack配置文件，区分开发环境和生产环境，然后使用<code>webpack-merge</code>来合并配置。<br>新建基础配置文件<code>webpack.common.js</code>，代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const &#123; CleanWebpackPlugin &#125; = require(&apos;clean-webpack-plugin&apos;)</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: &apos;./src/index.js&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new CleanWebpackPlugin(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            title: &apos;webpack 4 production&apos;,</span><br><span class=\"line\">            template: &apos;index.html&apos;,</span><br><span class=\"line\">            filename: &apos;index.html&apos;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &apos;[name].bandle.js&apos;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建开发环境配置文件<code>webpack.dev.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.dev.js</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;development&apos;,</span><br><span class=\"line\">    devtool: &apos;inline-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &apos;./dist&apos;,</span><br><span class=\"line\">        hot: true,</span><br><span class=\"line\">        port: 9000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建生产环境配置文件<code>webpack.prod.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    devtool: &apos;source-map&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建项目入口文件src/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.js</span><br><span class=\"line\">import &#123; square &#125; from &apos;./math.js&apos;</span><br><span class=\"line\">console.log(&apos;打印2的平方&apos;,square(2))</span><br><span class=\"line\"></span><br><span class=\"line\">const app = document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">app.innerHTML = &apos;hello world&apos;;</span><br></pre></td></tr></table></figure>\n\n<p>再建一个<code>index.js</code>依赖的模块文件<code>math.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/math.js</span><br><span class=\"line\">export function square(x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function cube(x) &#123;</span><br><span class=\"line\">    return x * x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建打包需要的模板文件<code>index.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后配置我们需要的npm script 启动命令，package.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-4-demo&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^4.35.0&quot;,</span><br><span class=\"line\">    &quot;webpack-cli&quot;: &quot;^3.3.5&quot;,</span><br><span class=\"line\">    &quot;webpack-dev-server&quot;: &quot;^3.7.2&quot;,</span><br><span class=\"line\">    &quot;webpack-merge&quot;: &quot;^4.2.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们来直接打包，没有做<code>tree shaking</code>的优化，看下打包的大小；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo</span><br><span class=\"line\">&gt; webpack --config webpack.prod.js</span><br><span class=\"line\"></span><br><span class=\"line\">Hash: 59507293492d05eeeeff</span><br><span class=\"line\">Version: webpack 4.35.0</span><br><span class=\"line\">Time: 473ms</span><br><span class=\"line\">Built at: 2019-06-27 13:01:07</span><br><span class=\"line\">            Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">    app.bandle.js    4.7 KiB     app  [emitted]  app</span><br><span class=\"line\">app.bandle.js.map   3.97 KiB     app  [emitted]  app</span><br><span class=\"line\">       index.html  366 bytes          [emitted]</span><br><span class=\"line\">Entrypoint app = app.bandle.js app.bandle.js.map</span><br><span class=\"line\">[./src/index.js] 145 bytes &#123;app&#125; [built]</span><br><span class=\"line\">[./src/math.js] 104 bytes &#123;app&#125; [built]</span><br><span class=\"line\">Child html-webpack-plugin for &quot;index.html&quot;:</span><br><span class=\"line\">     1 asset</span><br><span class=\"line\">    Entrypoint undefined = index.html</span><br><span class=\"line\">    [./node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./index.html] e:/wo</span><br><span class=\"line\">rkCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./in</span><br><span class=\"line\">dex.html 582 bytes &#123;0&#125; [built]</span><br><span class=\"line\">        + 3 hidden modules</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出项目打包的大小是：<code>app.bandle.js    4.7 KiB</code>。我们<code>index.js</code>文件引入了<code>math.js</code>模块，只用到了<code>square</code>方法，并没有用到<code>cube</code>方法，查看打包之后的<code>app.bandle.js</code>，找到我们自己的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">/***/ &quot;./src/index.js&quot;:</span><br><span class=\"line\">/*!**********************!*\\</span><br><span class=\"line\">  !*** ./src/index.js ***!</span><br><span class=\"line\">  \\**********************/</span><br><span class=\"line\">/*! no exports provided */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ &quot;./src/math.js&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;打印2的平方&apos;,Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[&quot;square&quot;])(2))</span><br><span class=\"line\"></span><br><span class=\"line\">const app = document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">app.innerHTML = &apos;hello world&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &quot;./src/math.js&quot;:</span><br><span class=\"line\">/*!*********************!*\\</span><br><span class=\"line\">  !*** ./src/math.js ***!</span><br><span class=\"line\">  \\*********************/</span><br><span class=\"line\">/*! exports provided: square, cube */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;square&quot;, function() &#123; return square; &#125;);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;cube&quot;, function() &#123; return cube; &#125;);</span><br><span class=\"line\">function square(x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function cube(x) &#123;</span><br><span class=\"line\">    return x * x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/******/ &#125;);</span><br><span class=\"line\">//# sourceMappingURL=app.bandle.js.map</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>cube</code>方法仍然被打包到了<code>app.bandle.js</code>里面。<br>现在我们使用<code>tree shaking</code>，看看看打包之后的文件大小。（<code>注意，也可以在命令行接口中使用webpack  --optimize-minimize 标记，来启用 TerserPlugin。</code>）<br>在<code>webpack 4</code>版本中，直接对生产环境配置<code>mode:&#39;production&#39;</code>，即可启用<code>tree shaking</code>，并将代码压缩，<br>然后在<code>package.json</code>文件加上<code>&quot;sideEffects&quot;: false</code>，（<code>注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 css-loader 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：</code>）用来提示<code>webpack compiler</code>找出哪些代码是未被引用的，然后删除掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.prod.js</span><br><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;production&apos;,</span><br><span class=\"line\">    devtool: &apos;source-map&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;sideEffects&quot;: false</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继续运行<code>npm run build</code>，可以看到代码体积变小了<code>app.bandle.js   1.06 KiB</code>，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo</span><br><span class=\"line\">&gt; webpack --config webpack.prod.js</span><br><span class=\"line\"></span><br><span class=\"line\">Hash: d1508bf9df4f2ca17868</span><br><span class=\"line\">Version: webpack 4.35.0</span><br><span class=\"line\">Time: 662ms</span><br><span class=\"line\">Built at: 2019-06-27 13:41:06</span><br><span class=\"line\">            Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">    app.bandle.js   1.06 KiB       0  [emitted]  app</span><br><span class=\"line\">app.bandle.js.map   4.88 KiB       0  [emitted]  app</span><br><span class=\"line\">       index.html  366 bytes          [emitted]</span><br><span class=\"line\">Entrypoint app = app.bandle.js app.bandle.js.map</span><br><span class=\"line\">[0] ./src/index.js + 1 modules 249 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    | ./src/index.js 145 bytes [built]</span><br><span class=\"line\">    | ./src/math.js 104 bytes [built]</span><br><span class=\"line\">Child html-webpack-plugin for &quot;index.html&quot;:</span><br><span class=\"line\">     1 asset</span><br><span class=\"line\">    Entrypoint undefined = index.html</span><br><span class=\"line\">    [0] e:/workCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/l</span><br><span class=\"line\">oader.js!./index.html 582 bytes &#123;0&#125; [built]</span><br><span class=\"line\">        + 3 hidden modules</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再来看一下打包之后的代码<code>app.bandle.js</code>，现在整个 <code>bundle</code> 都已经被 <code>minify(压缩)</code> 和 <code>mangle(混淆破坏)</code>，但是如果仔细观察，则不会看到引入<code>cube</code>函数，但能看到 <code>square</code>函数的混淆破坏版本<code>{&quot;use strict&quot;;var n;r.r(t),console.log(&quot;打印2的平方&quot;,(n=2)*n),document.getElementById(&quot;app&quot;).innerHTML=&quot;hello world&quot;}</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e)&#123;var t=&#123;&#125;;function r(n)&#123;if(t[n])return t[n].exports;var o=t[n]=&#123;i:n,l:!1,exports:&#123;&#125;&#125;;return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports&#125;r.m=e,r.c=t,r.d=function(e,t,n)&#123;r.o(e,t)||Object.defineProperty(e,t,&#123;enumerable:!0,get:n&#125;)&#125;,r.r=function(e)&#123;&quot;undefined&quot;!=typeof Symbol&amp;&amp;Symbol.toStringTag&amp;&amp;Object.defineProperty(e,Symbol.toStringTag,&#123;value:&quot;Module&quot;&#125;),Object.defineProperty(e,&quot;__esModule&quot;,&#123;value:!0&#125;)&#125;,r.t=function(e,t)&#123;if(1&amp;t&amp;&amp;(e=r(e)),8&amp;t)return e;if(4&amp;t&amp;&amp;&quot;object&quot;==typeof e&amp;&amp;e&amp;&amp;e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,&quot;default&quot;,&#123;enumerable:!0,value:e&#125;),2&amp;t&amp;&amp;&quot;string&quot;!=typeof e)for(var o in e)r.d(n,o,function(t)&#123;return e[t]&#125;.bind(null,o));return n&#125;,r.n=function(e)&#123;var t=e&amp;&amp;e.__esModule?function()&#123;return e.default&#125;:function()&#123;return e&#125;;return r.d(t,&quot;a&quot;,t),t&#125;,r.o=function(e,t)&#123;return Object.prototype.hasOwnProperty.call(e,t)&#125;,r.p=&quot;&quot;,r(r.s=0)&#125;([function(e,t,r)&#123;&quot;use strict&quot;;var n;r.r(t),console.log(&quot;打印2的平方&quot;,(n=2)*n),document.getElementById(&quot;app&quot;).innerHTML=&quot;hello world&quot;&#125;]);</span><br><span class=\"line\">//# sourceMappingURL=app.bandle.js.map</span><br></pre></td></tr></table></figure>\n\n<p>更多详细的<code>tree shaking</code>介绍，大家可以参考官方文档。<br>参考：<br><a href=\"https://webpack.js.org/guides/tree-shaking/#root\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/guides/tree-shaking/#root</a><br><a href=\"https://webpack.docschina.org/guides/production\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/production</a><br><a href=\"https://webpack.docschina.org/guides/tree-shaking/\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/tree-shaking/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇介绍了什么是<code>tree shaking</code>，这一篇我们来实操一下。<br>node 版本是<code>v8.9.1</code>，webpack的版本是<code>4.35.0</code>。</p>\n<p>最终的项目文件目录结构如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-94d7de55e8f4bb2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>新建一个项目<code>webpack-4-demo</code>，然后<code>npm init -y</code>，生成<code>package.json</code>文件，然后安装<code>webpack 4</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev webpack webpack-cli webpack-dev-server webpack-merge</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev clean-webpack-plugin html-webpack-plugin</span><br></pre></td></tr></table></figure>\n\n<p>新建<code>src</code>目录作为源文件目录，新建webpack配置文件，区分开发环境和生产环境，然后使用<code>webpack-merge</code>来合并配置。<br>新建基础配置文件<code>webpack.common.js</code>，代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const &#123; CleanWebpackPlugin &#125; = require(&apos;clean-webpack-plugin&apos;)</span><br><span class=\"line\">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        app: &apos;./src/index.js&apos;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new CleanWebpackPlugin(),</span><br><span class=\"line\">        new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">            title: &apos;webpack 4 production&apos;,</span><br><span class=\"line\">            template: &apos;index.html&apos;,</span><br><span class=\"line\">            filename: &apos;index.html&apos;</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: &apos;[name].bandle.js&apos;,</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist&apos;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建开发环境配置文件<code>webpack.dev.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.dev.js</span><br><span class=\"line\">const path = require(&apos;path&apos;)</span><br><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\">const webpack = require(&apos;webpack&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;development&apos;,</span><br><span class=\"line\">    devtool: &apos;inline-source-map&apos;,</span><br><span class=\"line\">    devServer: &#123;</span><br><span class=\"line\">        contentBase: &apos;./dist&apos;,</span><br><span class=\"line\">        hot: true,</span><br><span class=\"line\">        port: 9000</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        new webpack.HotModuleReplacementPlugin(),   //启用HMR,配合server的hot</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建生产环境配置文件<code>webpack.prod.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    devtool: &apos;source-map&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>新建项目入口文件src/index.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.js</span><br><span class=\"line\">import &#123; square &#125; from &apos;./math.js&apos;</span><br><span class=\"line\">console.log(&apos;打印2的平方&apos;,square(2))</span><br><span class=\"line\"></span><br><span class=\"line\">const app = document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">app.innerHTML = &apos;hello world&apos;;</span><br></pre></td></tr></table></figure>\n\n<p>再建一个<code>index.js</code>依赖的模块文件<code>math.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/math.js</span><br><span class=\"line\">export function square(x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export function cube(x) &#123;</span><br><span class=\"line\">    return x * x * x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新建打包需要的模板文件<code>index.html</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后配置我们需要的npm script 启动命令，package.json</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;webpack-4-demo&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">  &quot;description&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack-dev-server --open --config webpack.dev.js&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;author&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class=\"line\">  &quot;devDependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;clean-webpack-plugin&quot;: &quot;^3.0.0&quot;,</span><br><span class=\"line\">    &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class=\"line\">    &quot;webpack&quot;: &quot;^4.35.0&quot;,</span><br><span class=\"line\">    &quot;webpack-cli&quot;: &quot;^3.3.5&quot;,</span><br><span class=\"line\">    &quot;webpack-dev-server&quot;: &quot;^3.7.2&quot;,</span><br><span class=\"line\">    &quot;webpack-merge&quot;: &quot;^4.2.1&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在我们来直接打包，没有做<code>tree shaking</code>的优化，看下打包的大小；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo</span><br><span class=\"line\">&gt; webpack --config webpack.prod.js</span><br><span class=\"line\"></span><br><span class=\"line\">Hash: 59507293492d05eeeeff</span><br><span class=\"line\">Version: webpack 4.35.0</span><br><span class=\"line\">Time: 473ms</span><br><span class=\"line\">Built at: 2019-06-27 13:01:07</span><br><span class=\"line\">            Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">    app.bandle.js    4.7 KiB     app  [emitted]  app</span><br><span class=\"line\">app.bandle.js.map   3.97 KiB     app  [emitted]  app</span><br><span class=\"line\">       index.html  366 bytes          [emitted]</span><br><span class=\"line\">Entrypoint app = app.bandle.js app.bandle.js.map</span><br><span class=\"line\">[./src/index.js] 145 bytes &#123;app&#125; [built]</span><br><span class=\"line\">[./src/math.js] 104 bytes &#123;app&#125; [built]</span><br><span class=\"line\">Child html-webpack-plugin for &quot;index.html&quot;:</span><br><span class=\"line\">     1 asset</span><br><span class=\"line\">    Entrypoint undefined = index.html</span><br><span class=\"line\">    [./node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./index.html] e:/wo</span><br><span class=\"line\">rkCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/loader.js!./in</span><br><span class=\"line\">dex.html 582 bytes &#123;0&#125; [built]</span><br><span class=\"line\">        + 3 hidden modules</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>可以看出项目打包的大小是：<code>app.bandle.js    4.7 KiB</code>。我们<code>index.js</code>文件引入了<code>math.js</code>模块，只用到了<code>square</code>方法，并没有用到<code>cube</code>方法，查看打包之后的<code>app.bandle.js</code>，找到我们自己的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">/***/ &quot;./src/index.js&quot;:</span><br><span class=\"line\">/*!**********************!*\\</span><br><span class=\"line\">  !*** ./src/index.js ***!</span><br><span class=\"line\">  \\**********************/</span><br><span class=\"line\">/*! no exports provided */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ &quot;./src/math.js&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;打印2的平方&apos;,Object(_math_js__WEBPACK_IMPORTED_MODULE_0__[&quot;square&quot;])(2))</span><br><span class=\"line\"></span><br><span class=\"line\">const app = document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">app.innerHTML = &apos;hello world&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &quot;./src/math.js&quot;:</span><br><span class=\"line\">/*!*********************!*\\</span><br><span class=\"line\">  !*** ./src/math.js ***!</span><br><span class=\"line\">  \\*********************/</span><br><span class=\"line\">/*! exports provided: square, cube */</span><br><span class=\"line\">/***/ (function(module, __webpack_exports__, __webpack_require__) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">__webpack_require__.r(__webpack_exports__);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;square&quot;, function() &#123; return square; &#125;);</span><br><span class=\"line\">/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, &quot;cube&quot;, function() &#123; return cube; &#125;);</span><br><span class=\"line\">function square(x) &#123;</span><br><span class=\"line\">    return x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function cube(x) &#123;</span><br><span class=\"line\">    return x * x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/***/ &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">/******/ &#125;);</span><br><span class=\"line\">//# sourceMappingURL=app.bandle.js.map</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>cube</code>方法仍然被打包到了<code>app.bandle.js</code>里面。<br>现在我们使用<code>tree shaking</code>，看看看打包之后的文件大小。（<code>注意，也可以在命令行接口中使用webpack  --optimize-minimize 标记，来启用 TerserPlugin。</code>）<br>在<code>webpack 4</code>版本中，直接对生产环境配置<code>mode:&#39;production&#39;</code>，即可启用<code>tree shaking</code>，并将代码压缩，<br>然后在<code>package.json</code>文件加上<code>&quot;sideEffects&quot;: false</code>，（<code>注意，所有导入文件都会受到 tree shaking 的影响。这意味着，如果在项目中使用类似 css-loader 并 import 一个 CSS 文件，则需要将其添加到 side effect 列表中，以免在生产模式中无意中将它删除：</code>）用来提示<code>webpack compiler</code>找出哪些代码是未被引用的，然后删除掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.prod.js</span><br><span class=\"line\">const merge = require(&apos;webpack-merge&apos;)</span><br><span class=\"line\">const common = require(&apos;./webpack.common.js&apos;)</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = merge(common, &#123;</span><br><span class=\"line\">    mode: &apos;production&apos;,</span><br><span class=\"line\">    devtool: &apos;source-map&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//package.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;sideEffects&quot;: false</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继续运行<code>npm run build</code>，可以看到代码体积变小了<code>app.bandle.js   1.06 KiB</code>，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;npm run build</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; webpack-4-demo@1.0.0 build E:\\workCode\\webpack-4-demo</span><br><span class=\"line\">&gt; webpack --config webpack.prod.js</span><br><span class=\"line\"></span><br><span class=\"line\">Hash: d1508bf9df4f2ca17868</span><br><span class=\"line\">Version: webpack 4.35.0</span><br><span class=\"line\">Time: 662ms</span><br><span class=\"line\">Built at: 2019-06-27 13:41:06</span><br><span class=\"line\">            Asset       Size  Chunks             Chunk Names</span><br><span class=\"line\">    app.bandle.js   1.06 KiB       0  [emitted]  app</span><br><span class=\"line\">app.bandle.js.map   4.88 KiB       0  [emitted]  app</span><br><span class=\"line\">       index.html  366 bytes          [emitted]</span><br><span class=\"line\">Entrypoint app = app.bandle.js app.bandle.js.map</span><br><span class=\"line\">[0] ./src/index.js + 1 modules 249 bytes &#123;0&#125; [built]</span><br><span class=\"line\">    | ./src/index.js 145 bytes [built]</span><br><span class=\"line\">    | ./src/math.js 104 bytes [built]</span><br><span class=\"line\">Child html-webpack-plugin for &quot;index.html&quot;:</span><br><span class=\"line\">     1 asset</span><br><span class=\"line\">    Entrypoint undefined = index.html</span><br><span class=\"line\">    [0] e:/workCode/webpack-4-demo/node_modules/.3.2.0@html-webpack-plugin/lib/l</span><br><span class=\"line\">oader.js!./index.html 582 bytes &#123;0&#125; [built]</span><br><span class=\"line\">        + 3 hidden modules</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\webpack-4-demo&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再来看一下打包之后的代码<code>app.bandle.js</code>，现在整个 <code>bundle</code> 都已经被 <code>minify(压缩)</code> 和 <code>mangle(混淆破坏)</code>，但是如果仔细观察，则不会看到引入<code>cube</code>函数，但能看到 <code>square</code>函数的混淆破坏版本<code>{&quot;use strict&quot;;var n;r.r(t),console.log(&quot;打印2的平方&quot;,(n=2)*n),document.getElementById(&quot;app&quot;).innerHTML=&quot;hello world&quot;}</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e)&#123;var t=&#123;&#125;;function r(n)&#123;if(t[n])return t[n].exports;var o=t[n]=&#123;i:n,l:!1,exports:&#123;&#125;&#125;;return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports&#125;r.m=e,r.c=t,r.d=function(e,t,n)&#123;r.o(e,t)||Object.defineProperty(e,t,&#123;enumerable:!0,get:n&#125;)&#125;,r.r=function(e)&#123;&quot;undefined&quot;!=typeof Symbol&amp;&amp;Symbol.toStringTag&amp;&amp;Object.defineProperty(e,Symbol.toStringTag,&#123;value:&quot;Module&quot;&#125;),Object.defineProperty(e,&quot;__esModule&quot;,&#123;value:!0&#125;)&#125;,r.t=function(e,t)&#123;if(1&amp;t&amp;&amp;(e=r(e)),8&amp;t)return e;if(4&amp;t&amp;&amp;&quot;object&quot;==typeof e&amp;&amp;e&amp;&amp;e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,&quot;default&quot;,&#123;enumerable:!0,value:e&#125;),2&amp;t&amp;&amp;&quot;string&quot;!=typeof e)for(var o in e)r.d(n,o,function(t)&#123;return e[t]&#125;.bind(null,o));return n&#125;,r.n=function(e)&#123;var t=e&amp;&amp;e.__esModule?function()&#123;return e.default&#125;:function()&#123;return e&#125;;return r.d(t,&quot;a&quot;,t),t&#125;,r.o=function(e,t)&#123;return Object.prototype.hasOwnProperty.call(e,t)&#125;,r.p=&quot;&quot;,r(r.s=0)&#125;([function(e,t,r)&#123;&quot;use strict&quot;;var n;r.r(t),console.log(&quot;打印2的平方&quot;,(n=2)*n),document.getElementById(&quot;app&quot;).innerHTML=&quot;hello world&quot;&#125;]);</span><br><span class=\"line\">//# sourceMappingURL=app.bandle.js.map</span><br></pre></td></tr></table></figure>\n\n<p>更多详细的<code>tree shaking</code>介绍，大家可以参考官方文档。<br>参考：<br><a href=\"https://webpack.js.org/guides/tree-shaking/#root\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/guides/tree-shaking/#root</a><br><a href=\"https://webpack.docschina.org/guides/production\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/production</a><br><a href=\"https://webpack.docschina.org/guides/tree-shaking/\" target=\"_blank\" rel=\"noopener\">https://webpack.docschina.org/guides/tree-shaking/</a></p>\n"},{"title":"webpack-4-搭建-React-架构：使用Typescript（五）","_content":"undefined","source":"_posts/webpack-4-搭建-React-架构：使用Typescript（五）.md","raw":"---\ntitle: webpack-4-搭建-React-架构：使用Typescript（五）\n---\nundefined","slug":"webpack-4-搭建-React-架构：使用Typescript（五）","published":1,"date":"2019-09-13T02:18:13.155Z","updated":"2019-09-13T09:08:38.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73n000iwsl6kauu5yla","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"webpack-4-搭建-React-架构：使用React-新特性-Hook（四）","_content":"####简介\nHook 是`React 16.8` 的新增特性，它可以让你在不编写 class 的情况下，使用 state 以及其他 React 特性。\n\n以前我们在写 React 组件的时候，如果是纯展示型组件，从上层接收数据显示，这时候我们是通过函数组件的方式来写，通过 props 将数据展示出来。函数组件本身是没有生命周期和实例方法的，所以不能管理自身的 state，如果想要使用 state，只能通过类组件来改写。Hook 就是来解决这个问题，让函数组件可以操作自身的 state 以及应用其他的 React 特性。\n\n####什么是Hook\nHook 是一些可以让我们在函数组件里`钩入` React state 及生命周期等特性的函数。这使得我们不使用 class 组件也能使用 React。所以我们可以在新组件中开始使用 Hook。\n\n####Hook 概览\n\n* **State Hook：useState**\n一个简单的演示：\n```\nimport React, { useState } from 'react'\nfunction Example() {\n  const [count, setCount] = useState(0)\n  return(\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n   )\n}\n```\nuseState 参数是初始的 state，返回的是一对值，当前状态，以及更新状态的函数，如上代码。\n还可以在一个组件中多次使用 State Hook\n```\nfunction ExampleWithManyStates() {\n  // 声明多个 state 变量！\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}\n```\n* **Effect Hook：useEffect**\n之前我们在 React 组件中执行过数据的获取，订阅，手动修改过 DOM等，这些我们统一称之为副作用，或者说是作用。\n\nuseEffect 就是一个 Effect Hook，给函数组件增加操作副作用的能力。它跟 class 组件中的componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。\n\n现在我们使用 useEffect 来写一个组价在 React 更新 DOM 后设置一个页面标题\n```\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // 相当于 componentDidMount 和 componentDidUpdate:\n  useEffect(() => {\n    // 使用浏览器的 API 更新页面标题\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\nuseEffect 会在第一次渲染之后和每次状态更新后都执行。在某些情况下我们不需要每次更新之后都执行 effect，可以设置 useEffect 的第二个参数：\n```\nuseEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]); // 仅在 count 更改时更新\n```\n如果想执行只运行一次的 effect，可以传递一个空数组：\n```\nuseEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, []); //只在组件第一次挂载之后执行\n```\n####Hook 规则\nHook 本质就是 JavaScript 函数，但是使用的时候需要遵循两个规则：\n* 只在最顶层使用 Hook（不要在循环，条件或者嵌套函数中调用 Hook）\n* 只在 React 函数组件中调用 Hook（不要在普通的 JavaScript 函数中调用 Hook）\n\n--------------------------------------------------分割线------------------------------------------------------\n\n前面介绍完了 Hook，现在在我们的项目中用起来，尝试一下吧：）\n安装 react-router，`npm install react-router react-router-dom --save-dev`，\n接下来改造入口文件 main.js，不用 class，采用函数组件，使用 useState Hook\n```\n// src/main.js\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter, Route } from 'react-router-dom'\nimport Layout from './components/Layout/Layout'\nimport Home from './pages/Home'\nimport VodManage from './pages/VodManage'\n\nconst App = () => {\n    const [selectedKeys, setSelectedKeys] = useState(['1'])\n\n    return(\n        <HashRouter basename=\"/\">\n            <Layout selectedKeys={selectedKeys} onChangeSelectKey={(keys) => setSelectedKeys(keys)}>\n                <Route path=\"/\" render={() => <Home onChangeSelectKey={(keys) => setSelectedKeys(keys)} />} exact />\n                <Route path=\"/vodmanage\" render={() => <VodManage onChangeSelectKey={(keys) => setSelectedKeys(keys)} />} />\n            </Layout>\n        </HashRouter>\n    )\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('app')\n)\n\nif(module.hot){\n    module.hot.accept();\n}\n```\n用 useState 来保存切换路由的 keys `const [selectedKeys, setSelectedKeys] = useState(['home'])`\n接下来在pages目录下写两个页面用来路由跳转，Home.js 和 VodManage.js，用useEffect来调用设置选中状态的路由keys，因为只有在第一次组件挂载之后执行一次即可，所以useEffect的第二参数设为空数组`useEffect(() => {},[]) `\n```\n// src/pages/Home.js\nimport React, { useEffect } from 'react'\n\nconst Home = ({ onChangeSelectKey }) => {\n    const keys = ['home']\n\n    useEffect(() => {\n        onChangeSelectKey(keys)\n    }, [])\n\n    return (\n        <div>\n            home  home   home \n        </div>\n    )\n}\nexport default Home\n```\nVodManage.js 同样的写法\n```\n// src/pages/VodMange.js\nimport React, { useEffect } from 'react'\n\nconst VodManage = ({ onChangeSelectKey }) => {\n    const keys = ['vodmanage']\n\n    useEffect(() => {\n        onChangeSelectKey(keys)\n    }, [])\n\n    return (\n        <div>\n            vod manage\n        </div>\n    )\n}\nexport default VodManage\n```\n我们把左边的菜单栏单独抽出来一个组件，将左边栏数据保存在一个 canstant.js 文件中\n```\n// src/components/constant.js\nexport const leftMenu = [\n    {\n        title: 'Home',\n        key: 'home',\n        path: '/',\n        iconType: 'pie-chart',\n        subMenu: []\n    },\n    {\n        title: '点播管理',\n        key: 'vodmanage',\n        path: '/vodmanage',\n        iconType: 'desktop',\n        subMenu: []\n    }\n]\n```\n左边栏组件 LeftMenu.js\n```\n// src/components/LeftMenu/LeftMenu.js\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Menu, Icon } from 'antd'\nimport { leftMenu } from '../constant'\n\nconst MenuItem = Menu.Item\nconst SubMenu = Menu.SubMenu\n\nconst LeftMenu = ({ selectedKeys, onChangeSelectKey }) => {\n    const constMenuStr = leftMenu.map((item, index) => {\n        return item.subMenu.length === 0 \n            ? \n                <MenuItem key={item.key}>\n                    <Link to={item.path}>\n                        <Icon type={item.iconType} />\n                        <span>{item.title}</span>\n                    </Link>\n                </MenuItem>\n            :   <SubMenu \n                    key={item.key} \n                    title={\n                        <span>\n                            <Icon type={item.iconType} />\n                            <span>{item.title}</span>                       \n                        </span>\n                    }\n                >\n                    {\n                        item.subMenu.map((sub) => {\n                            return (\n                                <MenuItem key={sub.key}>\n                                    <Link to={sub.path}>\n                                        <Icon type={sub.iconType} />\n                                        <span>{sub.title}</span>\n                                    </Link>\n                                </MenuItem>\n                            )\n                        })\n                    }\n                </SubMenu>\n\n    })\n    return(\n        <Menu \n            theme=\"dark\"\n            selectedKeys={selectedKeys}\n            mode=\"inline\" \n            onClick={({ item, key, keyPath, domEvent }) => onChangeSelectKey([key])}\n        >\n            { constMenuStr }\n        </Menu>\n    )\n}\n\nexport default LeftMenu\n```\n可以看到页面可以很好的展示：\n![](https://upload-images.jianshu.io/upload_images/5541401-865886e5ab2925c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n更多的 Hook 的使用方法可以参考官网解读。这个例子只做入门。\n\n参考：\nhttps://react.docschina.org/docs/hooks-intro.html\n","source":"_posts/webpack-4-搭建-React-架构：使用React-新特性-Hook（四）.md","raw":"---\ntitle: webpack-4-搭建-React-架构：使用React-新特性-Hook（四）\n---\n####简介\nHook 是`React 16.8` 的新增特性，它可以让你在不编写 class 的情况下，使用 state 以及其他 React 特性。\n\n以前我们在写 React 组件的时候，如果是纯展示型组件，从上层接收数据显示，这时候我们是通过函数组件的方式来写，通过 props 将数据展示出来。函数组件本身是没有生命周期和实例方法的，所以不能管理自身的 state，如果想要使用 state，只能通过类组件来改写。Hook 就是来解决这个问题，让函数组件可以操作自身的 state 以及应用其他的 React 特性。\n\n####什么是Hook\nHook 是一些可以让我们在函数组件里`钩入` React state 及生命周期等特性的函数。这使得我们不使用 class 组件也能使用 React。所以我们可以在新组件中开始使用 Hook。\n\n####Hook 概览\n\n* **State Hook：useState**\n一个简单的演示：\n```\nimport React, { useState } from 'react'\nfunction Example() {\n  const [count, setCount] = useState(0)\n  return(\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n   )\n}\n```\nuseState 参数是初始的 state，返回的是一对值，当前状态，以及更新状态的函数，如上代码。\n还可以在一个组件中多次使用 State Hook\n```\nfunction ExampleWithManyStates() {\n  // 声明多个 state 变量！\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}\n```\n* **Effect Hook：useEffect**\n之前我们在 React 组件中执行过数据的获取，订阅，手动修改过 DOM等，这些我们统一称之为副作用，或者说是作用。\n\nuseEffect 就是一个 Effect Hook，给函数组件增加操作副作用的能力。它跟 class 组件中的componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。\n\n现在我们使用 useEffect 来写一个组价在 React 更新 DOM 后设置一个页面标题\n```\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // 相当于 componentDidMount 和 componentDidUpdate:\n  useEffect(() => {\n    // 使用浏览器的 API 更新页面标题\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\nuseEffect 会在第一次渲染之后和每次状态更新后都执行。在某些情况下我们不需要每次更新之后都执行 effect，可以设置 useEffect 的第二个参数：\n```\nuseEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]); // 仅在 count 更改时更新\n```\n如果想执行只运行一次的 effect，可以传递一个空数组：\n```\nuseEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, []); //只在组件第一次挂载之后执行\n```\n####Hook 规则\nHook 本质就是 JavaScript 函数，但是使用的时候需要遵循两个规则：\n* 只在最顶层使用 Hook（不要在循环，条件或者嵌套函数中调用 Hook）\n* 只在 React 函数组件中调用 Hook（不要在普通的 JavaScript 函数中调用 Hook）\n\n--------------------------------------------------分割线------------------------------------------------------\n\n前面介绍完了 Hook，现在在我们的项目中用起来，尝试一下吧：）\n安装 react-router，`npm install react-router react-router-dom --save-dev`，\n接下来改造入口文件 main.js，不用 class，采用函数组件，使用 useState Hook\n```\n// src/main.js\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter, Route } from 'react-router-dom'\nimport Layout from './components/Layout/Layout'\nimport Home from './pages/Home'\nimport VodManage from './pages/VodManage'\n\nconst App = () => {\n    const [selectedKeys, setSelectedKeys] = useState(['1'])\n\n    return(\n        <HashRouter basename=\"/\">\n            <Layout selectedKeys={selectedKeys} onChangeSelectKey={(keys) => setSelectedKeys(keys)}>\n                <Route path=\"/\" render={() => <Home onChangeSelectKey={(keys) => setSelectedKeys(keys)} />} exact />\n                <Route path=\"/vodmanage\" render={() => <VodManage onChangeSelectKey={(keys) => setSelectedKeys(keys)} />} />\n            </Layout>\n        </HashRouter>\n    )\n}\n\nReactDOM.render(\n    <App />,\n    document.getElementById('app')\n)\n\nif(module.hot){\n    module.hot.accept();\n}\n```\n用 useState 来保存切换路由的 keys `const [selectedKeys, setSelectedKeys] = useState(['home'])`\n接下来在pages目录下写两个页面用来路由跳转，Home.js 和 VodManage.js，用useEffect来调用设置选中状态的路由keys，因为只有在第一次组件挂载之后执行一次即可，所以useEffect的第二参数设为空数组`useEffect(() => {},[]) `\n```\n// src/pages/Home.js\nimport React, { useEffect } from 'react'\n\nconst Home = ({ onChangeSelectKey }) => {\n    const keys = ['home']\n\n    useEffect(() => {\n        onChangeSelectKey(keys)\n    }, [])\n\n    return (\n        <div>\n            home  home   home \n        </div>\n    )\n}\nexport default Home\n```\nVodManage.js 同样的写法\n```\n// src/pages/VodMange.js\nimport React, { useEffect } from 'react'\n\nconst VodManage = ({ onChangeSelectKey }) => {\n    const keys = ['vodmanage']\n\n    useEffect(() => {\n        onChangeSelectKey(keys)\n    }, [])\n\n    return (\n        <div>\n            vod manage\n        </div>\n    )\n}\nexport default VodManage\n```\n我们把左边的菜单栏单独抽出来一个组件，将左边栏数据保存在一个 canstant.js 文件中\n```\n// src/components/constant.js\nexport const leftMenu = [\n    {\n        title: 'Home',\n        key: 'home',\n        path: '/',\n        iconType: 'pie-chart',\n        subMenu: []\n    },\n    {\n        title: '点播管理',\n        key: 'vodmanage',\n        path: '/vodmanage',\n        iconType: 'desktop',\n        subMenu: []\n    }\n]\n```\n左边栏组件 LeftMenu.js\n```\n// src/components/LeftMenu/LeftMenu.js\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Menu, Icon } from 'antd'\nimport { leftMenu } from '../constant'\n\nconst MenuItem = Menu.Item\nconst SubMenu = Menu.SubMenu\n\nconst LeftMenu = ({ selectedKeys, onChangeSelectKey }) => {\n    const constMenuStr = leftMenu.map((item, index) => {\n        return item.subMenu.length === 0 \n            ? \n                <MenuItem key={item.key}>\n                    <Link to={item.path}>\n                        <Icon type={item.iconType} />\n                        <span>{item.title}</span>\n                    </Link>\n                </MenuItem>\n            :   <SubMenu \n                    key={item.key} \n                    title={\n                        <span>\n                            <Icon type={item.iconType} />\n                            <span>{item.title}</span>                       \n                        </span>\n                    }\n                >\n                    {\n                        item.subMenu.map((sub) => {\n                            return (\n                                <MenuItem key={sub.key}>\n                                    <Link to={sub.path}>\n                                        <Icon type={sub.iconType} />\n                                        <span>{sub.title}</span>\n                                    </Link>\n                                </MenuItem>\n                            )\n                        })\n                    }\n                </SubMenu>\n\n    })\n    return(\n        <Menu \n            theme=\"dark\"\n            selectedKeys={selectedKeys}\n            mode=\"inline\" \n            onClick={({ item, key, keyPath, domEvent }) => onChangeSelectKey([key])}\n        >\n            { constMenuStr }\n        </Menu>\n    )\n}\n\nexport default LeftMenu\n```\n可以看到页面可以很好的展示：\n![](https://upload-images.jianshu.io/upload_images/5541401-865886e5ab2925c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n更多的 Hook 的使用方法可以参考官网解读。这个例子只做入门。\n\n参考：\nhttps://react.docschina.org/docs/hooks-intro.html\n","slug":"webpack-4-搭建-React-架构：使用React-新特性-Hook（四）","published":1,"date":"2019-09-13T02:18:11.056Z","updated":"2019-09-13T09:08:38.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73o000jwsl6ewgo3ap4","content":"<p>####简介<br>Hook 是<code>React 16.8</code> 的新增特性，它可以让你在不编写 class 的情况下，使用 state 以及其他 React 特性。</p>\n<p>以前我们在写 React 组件的时候，如果是纯展示型组件，从上层接收数据显示，这时候我们是通过函数组件的方式来写，通过 props 将数据展示出来。函数组件本身是没有生命周期和实例方法的，所以不能管理自身的 state，如果想要使用 state，只能通过类组件来改写。Hook 就是来解决这个问题，让函数组件可以操作自身的 state 以及应用其他的 React 特性。</p>\n<p>####什么是Hook<br>Hook 是一些可以让我们在函数组件里<code>钩入</code> React state 及生命周期等特性的函数。这使得我们不使用 class 组件也能使用 React。所以我们可以在新组件中开始使用 Hook。</p>\n<p>####Hook 概览</p>\n<ul>\n<li><strong>State Hook：useState</strong><br>一个简单的演示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0)</span><br><span class=\"line\">  return(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">   )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>useState 参数是初始的 state，返回的是一对值，当前状态，以及更新状态的函数，如上代码。<br>还可以在一个组件中多次使用 State Hook</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ExampleWithManyStates() &#123;</span><br><span class=\"line\">  // 声明多个 state 变量！</span><br><span class=\"line\">  const [age, setAge] = useState(42);</span><br><span class=\"line\">  const [fruit, setFruit] = useState(&apos;banana&apos;);</span><br><span class=\"line\">  const [todos, setTodos] = useState([&#123; text: &apos;Learn Hooks&apos; &#125;]);</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Effect Hook：useEffect</strong><br>之前我们在 React 组件中执行过数据的获取，订阅，手动修改过 DOM等，这些我们统一称之为副作用，或者说是作用。</li>\n</ul>\n<p>useEffect 就是一个 Effect Hook，给函数组件增加操作副作用的能力。它跟 class 组件中的componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。</p>\n<p>现在我们使用 useEffect 来写一个组价在 React 更新 DOM 后设置一个页面标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useEffect &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 相当于 componentDidMount 和 componentDidUpdate:</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    // 使用浏览器的 API 更新页面标题</span><br><span class=\"line\">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>useEffect 会在第一次渲染之后和每次状态更新后都执行。在某些情况下我们不需要每次更新之后都执行 effect，可以设置 useEffect 的第二个参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">&#125;, [count]); // 仅在 count 更改时更新</span><br></pre></td></tr></table></figure>\n\n<p>如果想执行只运行一次的 effect，可以传递一个空数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">&#125;, []); //只在组件第一次挂载之后执行</span><br></pre></td></tr></table></figure>\n\n<p>####Hook 规则<br>Hook 本质就是 JavaScript 函数，但是使用的时候需要遵循两个规则：</p>\n<ul>\n<li>只在最顶层使用 Hook（不要在循环，条件或者嵌套函数中调用 Hook）</li>\n<li>只在 React 函数组件中调用 Hook（不要在普通的 JavaScript 函数中调用 Hook）</li>\n</ul>\n<p>————————————————–分割线——————————————————</p>\n<p>前面介绍完了 Hook，现在在我们的项目中用起来，尝试一下吧：）<br>安装 react-router，<code>npm install react-router react-router-dom --save-dev</code>，<br>接下来改造入口文件 main.js，不用 class，采用函数组件，使用 useState Hook</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import &#123; HashRouter, Route &#125; from &apos;react-router-dom&apos;</span><br><span class=\"line\">import Layout from &apos;./components/Layout/Layout&apos;</span><br><span class=\"line\">import Home from &apos;./pages/Home&apos;</span><br><span class=\"line\">import VodManage from &apos;./pages/VodManage&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const App = () =&gt; &#123;</span><br><span class=\"line\">    const [selectedKeys, setSelectedKeys] = useState([&apos;1&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">    return(</span><br><span class=\"line\">        &lt;HashRouter basename=&quot;/&quot;&gt;</span><br><span class=\"line\">            &lt;Layout selectedKeys=&#123;selectedKeys&#125; onChangeSelectKey=&#123;(keys) =&gt; setSelectedKeys(keys)&#125;&gt;</span><br><span class=\"line\">                &lt;Route path=&quot;/&quot; render=&#123;() =&gt; &lt;Home onChangeSelectKey=&#123;(keys) =&gt; setSelectedKeys(keys)&#125; /&gt;&#125; exact /&gt;</span><br><span class=\"line\">                &lt;Route path=&quot;/vodmanage&quot; render=&#123;() =&gt; &lt;VodManage onChangeSelectKey=&#123;(keys) =&gt; setSelectedKeys(keys)&#125; /&gt;&#125; /&gt;</span><br><span class=\"line\">            &lt;/Layout&gt;</span><br><span class=\"line\">        &lt;/HashRouter&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;App /&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">if(module.hot)&#123;</span><br><span class=\"line\">    module.hot.accept();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 useState 来保存切换路由的 keys <code>const [selectedKeys, setSelectedKeys] = useState([&#39;home&#39;])</code><br>接下来在pages目录下写两个页面用来路由跳转，Home.js 和 VodManage.js，用useEffect来调用设置选中状态的路由keys，因为只有在第一次组件挂载之后执行一次即可，所以useEffect的第二参数设为空数组<code>useEffect(() =&gt; {},[])</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/pages/Home.js</span><br><span class=\"line\">import React, &#123; useEffect &#125; from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Home = (&#123; onChangeSelectKey &#125;) =&gt; &#123;</span><br><span class=\"line\">    const keys = [&apos;home&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    useEffect(() =&gt; &#123;</span><br><span class=\"line\">        onChangeSelectKey(keys)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            home  home   home </span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Home</span><br></pre></td></tr></table></figure>\n\n<p>VodManage.js 同样的写法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/pages/VodMange.js</span><br><span class=\"line\">import React, &#123; useEffect &#125; from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const VodManage = (&#123; onChangeSelectKey &#125;) =&gt; &#123;</span><br><span class=\"line\">    const keys = [&apos;vodmanage&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    useEffect(() =&gt; &#123;</span><br><span class=\"line\">        onChangeSelectKey(keys)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            vod manage</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default VodManage</span><br></pre></td></tr></table></figure>\n\n<p>我们把左边的菜单栏单独抽出来一个组件，将左边栏数据保存在一个 canstant.js 文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/components/constant.js</span><br><span class=\"line\">export const leftMenu = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: &apos;Home&apos;,</span><br><span class=\"line\">        key: &apos;home&apos;,</span><br><span class=\"line\">        path: &apos;/&apos;,</span><br><span class=\"line\">        iconType: &apos;pie-chart&apos;,</span><br><span class=\"line\">        subMenu: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: &apos;点播管理&apos;,</span><br><span class=\"line\">        key: &apos;vodmanage&apos;,</span><br><span class=\"line\">        path: &apos;/vodmanage&apos;,</span><br><span class=\"line\">        iconType: &apos;desktop&apos;,</span><br><span class=\"line\">        subMenu: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>左边栏组件 LeftMenu.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/components/LeftMenu/LeftMenu.js</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; Link &#125; from &apos;react-router-dom&apos;</span><br><span class=\"line\">import &#123; Menu, Icon &#125; from &apos;antd&apos;</span><br><span class=\"line\">import &#123; leftMenu &#125; from &apos;../constant&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const MenuItem = Menu.Item</span><br><span class=\"line\">const SubMenu = Menu.SubMenu</span><br><span class=\"line\"></span><br><span class=\"line\">const LeftMenu = (&#123; selectedKeys, onChangeSelectKey &#125;) =&gt; &#123;</span><br><span class=\"line\">    const constMenuStr = leftMenu.map((item, index) =&gt; &#123;</span><br><span class=\"line\">        return item.subMenu.length === 0 </span><br><span class=\"line\">            ? </span><br><span class=\"line\">                &lt;MenuItem key=&#123;item.key&#125;&gt;</span><br><span class=\"line\">                    &lt;Link to=&#123;item.path&#125;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&#123;item.iconType&#125; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;&#123;item.title&#125;&lt;/span&gt;</span><br><span class=\"line\">                    &lt;/Link&gt;</span><br><span class=\"line\">                &lt;/MenuItem&gt;</span><br><span class=\"line\">            :   &lt;SubMenu </span><br><span class=\"line\">                    key=&#123;item.key&#125; </span><br><span class=\"line\">                    title=&#123;</span><br><span class=\"line\">                        &lt;span&gt;</span><br><span class=\"line\">                            &lt;Icon type=&#123;item.iconType&#125; /&gt;</span><br><span class=\"line\">                            &lt;span&gt;&#123;item.title&#125;&lt;/span&gt;                       </span><br><span class=\"line\">                        &lt;/span&gt;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        item.subMenu.map((sub) =&gt; &#123;</span><br><span class=\"line\">                            return (</span><br><span class=\"line\">                                &lt;MenuItem key=&#123;sub.key&#125;&gt;</span><br><span class=\"line\">                                    &lt;Link to=&#123;sub.path&#125;&gt;</span><br><span class=\"line\">                                        &lt;Icon type=&#123;sub.iconType&#125; /&gt;</span><br><span class=\"line\">                                        &lt;span&gt;&#123;sub.title&#125;&lt;/span&gt;</span><br><span class=\"line\">                                    &lt;/Link&gt;</span><br><span class=\"line\">                                &lt;/MenuItem&gt;</span><br><span class=\"line\">                            )</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &lt;/SubMenu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return(</span><br><span class=\"line\">        &lt;Menu </span><br><span class=\"line\">            theme=&quot;dark&quot;</span><br><span class=\"line\">            selectedKeys=&#123;selectedKeys&#125;</span><br><span class=\"line\">            mode=&quot;inline&quot; </span><br><span class=\"line\">            onClick=&#123;(&#123; item, key, keyPath, domEvent &#125;) =&gt; onChangeSelectKey([key])&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">            &#123; constMenuStr &#125;</span><br><span class=\"line\">        &lt;/Menu&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default LeftMenu</span><br></pre></td></tr></table></figure>\n\n<p>可以看到页面可以很好的展示：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-865886e5ab2925c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>更多的 Hook 的使用方法可以参考官网解读。这个例子只做入门。</p>\n<p>参考：<br><a href=\"https://react.docschina.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">https://react.docschina.org/docs/hooks-intro.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####简介<br>Hook 是<code>React 16.8</code> 的新增特性，它可以让你在不编写 class 的情况下，使用 state 以及其他 React 特性。</p>\n<p>以前我们在写 React 组件的时候，如果是纯展示型组件，从上层接收数据显示，这时候我们是通过函数组件的方式来写，通过 props 将数据展示出来。函数组件本身是没有生命周期和实例方法的，所以不能管理自身的 state，如果想要使用 state，只能通过类组件来改写。Hook 就是来解决这个问题，让函数组件可以操作自身的 state 以及应用其他的 React 特性。</p>\n<p>####什么是Hook<br>Hook 是一些可以让我们在函数组件里<code>钩入</code> React state 及生命周期等特性的函数。这使得我们不使用 class 组件也能使用 React。所以我们可以在新组件中开始使用 Hook。</p>\n<p>####Hook 概览</p>\n<ul>\n<li><strong>State Hook：useState</strong><br>一个简单的演示：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0)</span><br><span class=\"line\">  return(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">   )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>useState 参数是初始的 state，返回的是一对值，当前状态，以及更新状态的函数，如上代码。<br>还可以在一个组件中多次使用 State Hook</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ExampleWithManyStates() &#123;</span><br><span class=\"line\">  // 声明多个 state 变量！</span><br><span class=\"line\">  const [age, setAge] = useState(42);</span><br><span class=\"line\">  const [fruit, setFruit] = useState(&apos;banana&apos;);</span><br><span class=\"line\">  const [todos, setTodos] = useState([&#123; text: &apos;Learn Hooks&apos; &#125;]);</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Effect Hook：useEffect</strong><br>之前我们在 React 组件中执行过数据的获取，订阅，手动修改过 DOM等，这些我们统一称之为副作用，或者说是作用。</li>\n</ul>\n<p>useEffect 就是一个 Effect Hook，给函数组件增加操作副作用的能力。它跟 class 组件中的componentDidMount、componentDidUpdate 和 componentWillUnmount 具有相同的用途，只不过被合并成了一个 API。</p>\n<p>现在我们使用 useEffect 来写一个组价在 React 更新 DOM 后设置一个页面标题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useEffect &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\"></span><br><span class=\"line\">  // 相当于 componentDidMount 和 componentDidUpdate:</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    // 使用浏览器的 API 更新页面标题</span><br><span class=\"line\">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;You clicked &#123;count&#125; times&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span><br><span class=\"line\">        Click me</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>useEffect 会在第一次渲染之后和每次状态更新后都执行。在某些情况下我们不需要每次更新之后都执行 effect，可以设置 useEffect 的第二个参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">&#125;, [count]); // 仅在 count 更改时更新</span><br></pre></td></tr></table></figure>\n\n<p>如果想执行只运行一次的 effect，可以传递一个空数组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">&#125;, []); //只在组件第一次挂载之后执行</span><br></pre></td></tr></table></figure>\n\n<p>####Hook 规则<br>Hook 本质就是 JavaScript 函数，但是使用的时候需要遵循两个规则：</p>\n<ul>\n<li>只在最顶层使用 Hook（不要在循环，条件或者嵌套函数中调用 Hook）</li>\n<li>只在 React 函数组件中调用 Hook（不要在普通的 JavaScript 函数中调用 Hook）</li>\n</ul>\n<p>————————————————–分割线——————————————————</p>\n<p>前面介绍完了 Hook，现在在我们的项目中用起来，尝试一下吧：）<br>安装 react-router，<code>npm install react-router react-router-dom --save-dev</code>，<br>接下来改造入口文件 main.js，不用 class，采用函数组件，使用 useState Hook</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/main.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import &#123; HashRouter, Route &#125; from &apos;react-router-dom&apos;</span><br><span class=\"line\">import Layout from &apos;./components/Layout/Layout&apos;</span><br><span class=\"line\">import Home from &apos;./pages/Home&apos;</span><br><span class=\"line\">import VodManage from &apos;./pages/VodManage&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const App = () =&gt; &#123;</span><br><span class=\"line\">    const [selectedKeys, setSelectedKeys] = useState([&apos;1&apos;])</span><br><span class=\"line\"></span><br><span class=\"line\">    return(</span><br><span class=\"line\">        &lt;HashRouter basename=&quot;/&quot;&gt;</span><br><span class=\"line\">            &lt;Layout selectedKeys=&#123;selectedKeys&#125; onChangeSelectKey=&#123;(keys) =&gt; setSelectedKeys(keys)&#125;&gt;</span><br><span class=\"line\">                &lt;Route path=&quot;/&quot; render=&#123;() =&gt; &lt;Home onChangeSelectKey=&#123;(keys) =&gt; setSelectedKeys(keys)&#125; /&gt;&#125; exact /&gt;</span><br><span class=\"line\">                &lt;Route path=&quot;/vodmanage&quot; render=&#123;() =&gt; &lt;VodManage onChangeSelectKey=&#123;(keys) =&gt; setSelectedKeys(keys)&#125; /&gt;&#125; /&gt;</span><br><span class=\"line\">            &lt;/Layout&gt;</span><br><span class=\"line\">        &lt;/HashRouter&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;App /&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">if(module.hot)&#123;</span><br><span class=\"line\">    module.hot.accept();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用 useState 来保存切换路由的 keys <code>const [selectedKeys, setSelectedKeys] = useState([&#39;home&#39;])</code><br>接下来在pages目录下写两个页面用来路由跳转，Home.js 和 VodManage.js，用useEffect来调用设置选中状态的路由keys，因为只有在第一次组件挂载之后执行一次即可，所以useEffect的第二参数设为空数组<code>useEffect(() =&gt; {},[])</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/pages/Home.js</span><br><span class=\"line\">import React, &#123; useEffect &#125; from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const Home = (&#123; onChangeSelectKey &#125;) =&gt; &#123;</span><br><span class=\"line\">    const keys = [&apos;home&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    useEffect(() =&gt; &#123;</span><br><span class=\"line\">        onChangeSelectKey(keys)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            home  home   home </span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Home</span><br></pre></td></tr></table></figure>\n\n<p>VodManage.js 同样的写法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/pages/VodMange.js</span><br><span class=\"line\">import React, &#123; useEffect &#125; from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const VodManage = (&#123; onChangeSelectKey &#125;) =&gt; &#123;</span><br><span class=\"line\">    const keys = [&apos;vodmanage&apos;]</span><br><span class=\"line\"></span><br><span class=\"line\">    useEffect(() =&gt; &#123;</span><br><span class=\"line\">        onChangeSelectKey(keys)</span><br><span class=\"line\">    &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            vod manage</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default VodManage</span><br></pre></td></tr></table></figure>\n\n<p>我们把左边的菜单栏单独抽出来一个组件，将左边栏数据保存在一个 canstant.js 文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/components/constant.js</span><br><span class=\"line\">export const leftMenu = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: &apos;Home&apos;,</span><br><span class=\"line\">        key: &apos;home&apos;,</span><br><span class=\"line\">        path: &apos;/&apos;,</span><br><span class=\"line\">        iconType: &apos;pie-chart&apos;,</span><br><span class=\"line\">        subMenu: []</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        title: &apos;点播管理&apos;,</span><br><span class=\"line\">        key: &apos;vodmanage&apos;,</span><br><span class=\"line\">        path: &apos;/vodmanage&apos;,</span><br><span class=\"line\">        iconType: &apos;desktop&apos;,</span><br><span class=\"line\">        subMenu: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>左边栏组件 LeftMenu.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// src/components/LeftMenu/LeftMenu.js</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; Link &#125; from &apos;react-router-dom&apos;</span><br><span class=\"line\">import &#123; Menu, Icon &#125; from &apos;antd&apos;</span><br><span class=\"line\">import &#123; leftMenu &#125; from &apos;../constant&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const MenuItem = Menu.Item</span><br><span class=\"line\">const SubMenu = Menu.SubMenu</span><br><span class=\"line\"></span><br><span class=\"line\">const LeftMenu = (&#123; selectedKeys, onChangeSelectKey &#125;) =&gt; &#123;</span><br><span class=\"line\">    const constMenuStr = leftMenu.map((item, index) =&gt; &#123;</span><br><span class=\"line\">        return item.subMenu.length === 0 </span><br><span class=\"line\">            ? </span><br><span class=\"line\">                &lt;MenuItem key=&#123;item.key&#125;&gt;</span><br><span class=\"line\">                    &lt;Link to=&#123;item.path&#125;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&#123;item.iconType&#125; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;&#123;item.title&#125;&lt;/span&gt;</span><br><span class=\"line\">                    &lt;/Link&gt;</span><br><span class=\"line\">                &lt;/MenuItem&gt;</span><br><span class=\"line\">            :   &lt;SubMenu </span><br><span class=\"line\">                    key=&#123;item.key&#125; </span><br><span class=\"line\">                    title=&#123;</span><br><span class=\"line\">                        &lt;span&gt;</span><br><span class=\"line\">                            &lt;Icon type=&#123;item.iconType&#125; /&gt;</span><br><span class=\"line\">                            &lt;span&gt;&#123;item.title&#125;&lt;/span&gt;                       </span><br><span class=\"line\">                        &lt;/span&gt;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &gt;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        item.subMenu.map((sub) =&gt; &#123;</span><br><span class=\"line\">                            return (</span><br><span class=\"line\">                                &lt;MenuItem key=&#123;sub.key&#125;&gt;</span><br><span class=\"line\">                                    &lt;Link to=&#123;sub.path&#125;&gt;</span><br><span class=\"line\">                                        &lt;Icon type=&#123;sub.iconType&#125; /&gt;</span><br><span class=\"line\">                                        &lt;span&gt;&#123;sub.title&#125;&lt;/span&gt;</span><br><span class=\"line\">                                    &lt;/Link&gt;</span><br><span class=\"line\">                                &lt;/MenuItem&gt;</span><br><span class=\"line\">                            )</span><br><span class=\"line\">                        &#125;)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &lt;/SubMenu&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return(</span><br><span class=\"line\">        &lt;Menu </span><br><span class=\"line\">            theme=&quot;dark&quot;</span><br><span class=\"line\">            selectedKeys=&#123;selectedKeys&#125;</span><br><span class=\"line\">            mode=&quot;inline&quot; </span><br><span class=\"line\">            onClick=&#123;(&#123; item, key, keyPath, domEvent &#125;) =&gt; onChangeSelectKey([key])&#125;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">            &#123; constMenuStr &#125;</span><br><span class=\"line\">        &lt;/Menu&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default LeftMenu</span><br></pre></td></tr></table></figure>\n\n<p>可以看到页面可以很好的展示：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-865886e5ab2925c6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>更多的 Hook 的使用方法可以参考官网解读。这个例子只做入门。</p>\n<p>参考：<br><a href=\"https://react.docschina.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener\">https://react.docschina.org/docs/hooks-intro.html</a></p>\n"},{"title":"webpack-4-搭建-React-架构：实现热更新（二）","_content":"上一篇文章 [webpack 4 搭建React antd 中后台项目架构](https://www.jianshu.com/p/846001b37a83) 实现了基本的架构工作，让项目可以跑起来，虽说依照 webpack 中文官网，在 webpack.dev.js 中配置了 hot，只有修改样式的时候才能热更新，可以像在浏览器中修改样式一样的快速，修改 js 文件依然没有效果，主要是原因是 style-loader 实现了HMR接口，而 react 的 js 文件并没有实现这个功能：  \n\n```\n//webpack.dev.js\n...\ndevServer: {\n        contentBase: path.resolve(__dirname, 'dist'),\n+        hot: true,\n        hotOnly: true,\n        open: false,  //自动打开浏览器\n        port: 9000,\n        overlay: {\n            warnings: false,\n            errors: true\n        }\n    },\n    plugins: [\n+        new webpack.NamedModulesPlugin(),\n+        new webpack.HotModuleReplacementPlugin()\n    ],\n...\n```\n```\n//main.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport Layout from './components/Layout/Layout'\nimport './css/main'\nimport './css/base'\n\nReactDOM.render(\n    //<App />,\n    <Layout />,\n    document.getElementById('app')\n)\n\n+ if(module.hot){\n+     module.hot.accept();\n+ }\n```\n猜想可能是引入 react 的缘故，于是重新加一个入口文件 `index.js` 来使验证一下\n```\n//webpack.common.js\n...\nentry: {\n  app: './src/index.js'\n}\n...\n```\n```\n//入口文件 index.js\nimport { square } from './math.js'\nconsole.log('打印2的平方',square(2))\n\nlet arr = [1,2,3];\nlet arr2 = arr.map(item => item + 2)\narr.includes(8)\nconsole.log('new Set(arr2):', new Set(arr2))\n\nasync function l() {\n    return await 1;\n}\nl().then((value) => {\n    console.log(value);\n    console.log(111111)\n})\n\nconst app = document.getElementById('app')\napp.innerHTML = 'hello world';\n\n+ if(module.hot){\n+     module.hot.accept();\n+ }\n```\n这样在启动项目，刷新页面，可以看到直接修改 `index.js` 中的 html 内容，页面实时更新了。由此可见 react 框架并没有做热更新，以前用 vue-cli 创建项目的时候，是可以进行热更新的，原因是 vue-loader 实现了这个功能，而 react 没有做到这样，所有我们需要借助插件来实现，插件就是 `react-hot-loader`。\n\n现在通过 `react-hot-loader` 来实现 react 的热更新：\n* 安装最新版的 react-hot-loader；\n```\ncnpm install @hot-loader/react-dom --save-dev\n```\n* 将入口文件换成 main.js\n```\n//webpack.common.js\n...\nentry: {\n  app: './src/main.js'\n}\n...\n```\n* 修改 root component （src/components/Layout/Layout.js），在 react react-dom 之前引入 `react-hot-loader/root`，然后将组件用 `hot` 包起来；\n```\n+ import { hot } from 'react-hot-loader/root'\nimport React from 'react'\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd'\nimport Header from '../Header/Header'\nimport Footer from '../Footer/Footer'\nimport './layout.less'\n\nconst { Content, Sider } = Layout\nconst { SubMenu } = Menu\n\nclass LayoutContainer extends React.Component {\n    state = {\n        collapsed: false,\n    }\n\n    onCollapse = collapsed => {\n        console.log(collapsed);\n        this.setState({ collapsed });\n    };\n\n    render() {\n        return (\n        <Layout style={{ minHeight: '100vh' }}>\n            <Header />           \n            <Layout>\n                <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n                    <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                        <Menu.Item key=\"1\">\n                        <Icon type=\"pie-chart\" />\n                        <span>Option 1</span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                        <Icon type=\"desktop\" />\n                        <span>Option 2</span>\n                        </Menu.Item>\n                        <SubMenu\n                        key=\"sub1\"\n                        title={\n                            <span>\n                            <Icon type=\"user\" />\n                            <span>User</span>\n                            </span>\n                        }\n                        >\n                        <Menu.Item key=\"3\">Tom</Menu.Item>\n                        <Menu.Item key=\"4\">Bill</Menu.Item>\n                        <Menu.Item key=\"5\">Alex</Menu.Item>\n                        </SubMenu>\n                        <SubMenu\n                        key=\"sub2\"\n                        title={\n                            <span>\n                            <Icon type=\"team\" />\n                            <span>Team</span>\n                            </span>\n                        }\n                        >\n                        <Menu.Item key=\"6\">Team 1</Menu.Item>\n                        <Menu.Item key=\"8\">Team 2</Menu.Item>\n                        </SubMenu>\n                        <Menu.Item key=\"9\">\n                        <Icon type=\"file\" />\n                        <span>File</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Content style={{ margin: '0 16px' }}>\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>User</Breadcrumb.Item>\n                        <Breadcrumb.Item>Bill</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>Bill is a cat.</div>\n                    <Footer />\n                </Content>\n            </Layout>\n        </Layout>\n        );\n    }\n}\n\n+ export default hot(LayoutContainer)\n```\n* 继续运行项目，如图，已经可以实时更新了，并将修改的文件路径也给打印出来了；\n![](https://upload-images.jianshu.io/upload_images/5541401-a50f47d451f0c069.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到控制台出现了警告，说是 `react-dom pacth` 没有检测到，可能会影响我们使用 `react 16.6` 以上版本的特性，比如 `hook`，查看 `react-hot-loader` 配置，安装 `@hot-loader/react-dom` 这个插件，将其指到 react-dom 即可；在 webpack.common.js 中作如下配置：\n```\n//webpack.common.js\n...\nresolve: {\n        extensions: ['.js', '.css', '.less'],\n        alias: {\n            'react-dom': '@hot-loader/react-dom'\n        }\n    },\n...\n```\n最后运行项目，这个警告就没有了；\n![](https://upload-images.jianshu.io/upload_images/5541401-32c6b9118806b502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后我们来验证一下用 `hook` 特性来写 `Header.js`，看一下 `hot` 是不是起作用；修改 `Header.js` 为一个函数组件，然后使用 hook，来使用 react class 的 state 特性；\n```\n//src/components/Header/Header.js\nimport React, { useState } from 'react'\nimport { Layout, Button } from 'antd'\nconst { Header } = Layout\n\nimport './header.less'\n\nexport default () => {\n    const [ username, setUsername ] = useState('john');\n    return (\n        <Header className=\"app-header\">\n            <span>我的名字叫 {username}</span>\n            <Button type=\"primary\" onClick={() => setUsername('lyli')}>修改名字</Button>\n        </Header>\n    )\n}\n```\n我们在 Header.js 中引入 `useState` hook，新建一个变量和设置变量的函数，初始值是 `john`，点击按钮修改为 `lyli`，可以看到页面直接更新了，并没有重新刷新；\n![](https://upload-images.jianshu.io/upload_images/5541401-8f2e28a34109899b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最终我们实现了 react 项目的热更新，项目地址在这里，大家可以下载尝试一下：https://github.com/mxcz213/webpack4-demo\n\n参考：\nhttps://webpack.js.org/guides/hot-module-replacement/\nhttps://www.npmjs.com/package/react-hot-loader\n","source":"_posts/webpack-4-搭建-React-架构：实现热更新（二）.md","raw":"---\ntitle: webpack-4-搭建-React-架构：实现热更新（二）\n---\n上一篇文章 [webpack 4 搭建React antd 中后台项目架构](https://www.jianshu.com/p/846001b37a83) 实现了基本的架构工作，让项目可以跑起来，虽说依照 webpack 中文官网，在 webpack.dev.js 中配置了 hot，只有修改样式的时候才能热更新，可以像在浏览器中修改样式一样的快速，修改 js 文件依然没有效果，主要是原因是 style-loader 实现了HMR接口，而 react 的 js 文件并没有实现这个功能：  \n\n```\n//webpack.dev.js\n...\ndevServer: {\n        contentBase: path.resolve(__dirname, 'dist'),\n+        hot: true,\n        hotOnly: true,\n        open: false,  //自动打开浏览器\n        port: 9000,\n        overlay: {\n            warnings: false,\n            errors: true\n        }\n    },\n    plugins: [\n+        new webpack.NamedModulesPlugin(),\n+        new webpack.HotModuleReplacementPlugin()\n    ],\n...\n```\n```\n//main.js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport Layout from './components/Layout/Layout'\nimport './css/main'\nimport './css/base'\n\nReactDOM.render(\n    //<App />,\n    <Layout />,\n    document.getElementById('app')\n)\n\n+ if(module.hot){\n+     module.hot.accept();\n+ }\n```\n猜想可能是引入 react 的缘故，于是重新加一个入口文件 `index.js` 来使验证一下\n```\n//webpack.common.js\n...\nentry: {\n  app: './src/index.js'\n}\n...\n```\n```\n//入口文件 index.js\nimport { square } from './math.js'\nconsole.log('打印2的平方',square(2))\n\nlet arr = [1,2,3];\nlet arr2 = arr.map(item => item + 2)\narr.includes(8)\nconsole.log('new Set(arr2):', new Set(arr2))\n\nasync function l() {\n    return await 1;\n}\nl().then((value) => {\n    console.log(value);\n    console.log(111111)\n})\n\nconst app = document.getElementById('app')\napp.innerHTML = 'hello world';\n\n+ if(module.hot){\n+     module.hot.accept();\n+ }\n```\n这样在启动项目，刷新页面，可以看到直接修改 `index.js` 中的 html 内容，页面实时更新了。由此可见 react 框架并没有做热更新，以前用 vue-cli 创建项目的时候，是可以进行热更新的，原因是 vue-loader 实现了这个功能，而 react 没有做到这样，所有我们需要借助插件来实现，插件就是 `react-hot-loader`。\n\n现在通过 `react-hot-loader` 来实现 react 的热更新：\n* 安装最新版的 react-hot-loader；\n```\ncnpm install @hot-loader/react-dom --save-dev\n```\n* 将入口文件换成 main.js\n```\n//webpack.common.js\n...\nentry: {\n  app: './src/main.js'\n}\n...\n```\n* 修改 root component （src/components/Layout/Layout.js），在 react react-dom 之前引入 `react-hot-loader/root`，然后将组件用 `hot` 包起来；\n```\n+ import { hot } from 'react-hot-loader/root'\nimport React from 'react'\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd'\nimport Header from '../Header/Header'\nimport Footer from '../Footer/Footer'\nimport './layout.less'\n\nconst { Content, Sider } = Layout\nconst { SubMenu } = Menu\n\nclass LayoutContainer extends React.Component {\n    state = {\n        collapsed: false,\n    }\n\n    onCollapse = collapsed => {\n        console.log(collapsed);\n        this.setState({ collapsed });\n    };\n\n    render() {\n        return (\n        <Layout style={{ minHeight: '100vh' }}>\n            <Header />           \n            <Layout>\n                <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\n                    <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                        <Menu.Item key=\"1\">\n                        <Icon type=\"pie-chart\" />\n                        <span>Option 1</span>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                        <Icon type=\"desktop\" />\n                        <span>Option 2</span>\n                        </Menu.Item>\n                        <SubMenu\n                        key=\"sub1\"\n                        title={\n                            <span>\n                            <Icon type=\"user\" />\n                            <span>User</span>\n                            </span>\n                        }\n                        >\n                        <Menu.Item key=\"3\">Tom</Menu.Item>\n                        <Menu.Item key=\"4\">Bill</Menu.Item>\n                        <Menu.Item key=\"5\">Alex</Menu.Item>\n                        </SubMenu>\n                        <SubMenu\n                        key=\"sub2\"\n                        title={\n                            <span>\n                            <Icon type=\"team\" />\n                            <span>Team</span>\n                            </span>\n                        }\n                        >\n                        <Menu.Item key=\"6\">Team 1</Menu.Item>\n                        <Menu.Item key=\"8\">Team 2</Menu.Item>\n                        </SubMenu>\n                        <Menu.Item key=\"9\">\n                        <Icon type=\"file\" />\n                        <span>File</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n                <Content style={{ margin: '0 16px' }}>\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>User</Breadcrumb.Item>\n                        <Breadcrumb.Item>Bill</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>Bill is a cat.</div>\n                    <Footer />\n                </Content>\n            </Layout>\n        </Layout>\n        );\n    }\n}\n\n+ export default hot(LayoutContainer)\n```\n* 继续运行项目，如图，已经可以实时更新了，并将修改的文件路径也给打印出来了；\n![](https://upload-images.jianshu.io/upload_images/5541401-a50f47d451f0c069.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n可以看到控制台出现了警告，说是 `react-dom pacth` 没有检测到，可能会影响我们使用 `react 16.6` 以上版本的特性，比如 `hook`，查看 `react-hot-loader` 配置，安装 `@hot-loader/react-dom` 这个插件，将其指到 react-dom 即可；在 webpack.common.js 中作如下配置：\n```\n//webpack.common.js\n...\nresolve: {\n        extensions: ['.js', '.css', '.less'],\n        alias: {\n            'react-dom': '@hot-loader/react-dom'\n        }\n    },\n...\n```\n最后运行项目，这个警告就没有了；\n![](https://upload-images.jianshu.io/upload_images/5541401-32c6b9118806b502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后我们来验证一下用 `hook` 特性来写 `Header.js`，看一下 `hot` 是不是起作用；修改 `Header.js` 为一个函数组件，然后使用 hook，来使用 react class 的 state 特性；\n```\n//src/components/Header/Header.js\nimport React, { useState } from 'react'\nimport { Layout, Button } from 'antd'\nconst { Header } = Layout\n\nimport './header.less'\n\nexport default () => {\n    const [ username, setUsername ] = useState('john');\n    return (\n        <Header className=\"app-header\">\n            <span>我的名字叫 {username}</span>\n            <Button type=\"primary\" onClick={() => setUsername('lyli')}>修改名字</Button>\n        </Header>\n    )\n}\n```\n我们在 Header.js 中引入 `useState` hook，新建一个变量和设置变量的函数，初始值是 `john`，点击按钮修改为 `lyli`，可以看到页面直接更新了，并没有重新刷新；\n![](https://upload-images.jianshu.io/upload_images/5541401-8f2e28a34109899b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最终我们实现了 react 项目的热更新，项目地址在这里，大家可以下载尝试一下：https://github.com/mxcz213/webpack4-demo\n\n参考：\nhttps://webpack.js.org/guides/hot-module-replacement/\nhttps://www.npmjs.com/package/react-hot-loader\n","slug":"webpack-4-搭建-React-架构：实现热更新（二）","published":1,"date":"2019-09-13T02:18:13.148Z","updated":"2019-09-13T09:08:37.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73p000kwsl6s950qa81","content":"<p>上一篇文章 <a href=\"https://www.jianshu.com/p/846001b37a83\" target=\"_blank\" rel=\"noopener\">webpack 4 搭建React antd 中后台项目架构</a> 实现了基本的架构工作，让项目可以跑起来，虽说依照 webpack 中文官网，在 webpack.dev.js 中配置了 hot，只有修改样式的时候才能热更新，可以像在浏览器中修改样式一样的快速，修改 js 文件依然没有效果，主要是原因是 style-loader 实现了HMR接口，而 react 的 js 文件并没有实现这个功能：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.dev.js</span><br><span class=\"line\">...</span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">        contentBase: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class=\"line\">+        hot: true,</span><br><span class=\"line\">        hotOnly: true,</span><br><span class=\"line\">        open: false,  //自动打开浏览器</span><br><span class=\"line\">        port: 9000,</span><br><span class=\"line\">        overlay: &#123;</span><br><span class=\"line\">            warnings: false,</span><br><span class=\"line\">            errors: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">+        new webpack.NamedModulesPlugin(),</span><br><span class=\"line\">+        new webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import App from &apos;./app&apos;</span><br><span class=\"line\">import Layout from &apos;./components/Layout/Layout&apos;</span><br><span class=\"line\">import &apos;./css/main&apos;</span><br><span class=\"line\">import &apos;./css/base&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    //&lt;App /&gt;,</span><br><span class=\"line\">    &lt;Layout /&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">+ if(module.hot)&#123;</span><br><span class=\"line\">+     module.hot.accept();</span><br><span class=\"line\">+ &#125;</span><br></pre></td></tr></table></figure>\n\n<p>猜想可能是引入 react 的缘故，于是重新加一个入口文件 <code>index.js</code> 来使验证一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  app: &apos;./src/index.js&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//入口文件 index.js</span><br><span class=\"line\">import &#123; square &#125; from &apos;./math.js&apos;</span><br><span class=\"line\">console.log(&apos;打印2的平方&apos;,square(2))</span><br><span class=\"line\"></span><br><span class=\"line\">let arr = [1,2,3];</span><br><span class=\"line\">let arr2 = arr.map(item =&gt; item + 2)</span><br><span class=\"line\">arr.includes(8)</span><br><span class=\"line\">console.log(&apos;new Set(arr2):&apos;, new Set(arr2))</span><br><span class=\"line\"></span><br><span class=\"line\">async function l() &#123;</span><br><span class=\"line\">    return await 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">l().then((value) =&gt; &#123;</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">    console.log(111111)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const app = document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">app.innerHTML = &apos;hello world&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+ if(module.hot)&#123;</span><br><span class=\"line\">+     module.hot.accept();</span><br><span class=\"line\">+ &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样在启动项目，刷新页面，可以看到直接修改 <code>index.js</code> 中的 html 内容，页面实时更新了。由此可见 react 框架并没有做热更新，以前用 vue-cli 创建项目的时候，是可以进行热更新的，原因是 vue-loader 实现了这个功能，而 react 没有做到这样，所有我们需要借助插件来实现，插件就是 <code>react-hot-loader</code>。</p>\n<p>现在通过 <code>react-hot-loader</code> 来实现 react 的热更新：</p>\n<ul>\n<li><p>安装最新版的 react-hot-loader；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @hot-loader/react-dom --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将入口文件换成 main.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  app: &apos;./src/main.js&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 root component （src/components/Layout/Layout.js），在 react react-dom 之前引入 <code>react-hot-loader/root</code>，然后将组件用 <code>hot</code> 包起来；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ import &#123; hot &#125; from &apos;react-hot-loader/root&apos;</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; Layout, Menu, Breadcrumb, Icon &#125; from &apos;antd&apos;</span><br><span class=\"line\">import Header from &apos;../Header/Header&apos;</span><br><span class=\"line\">import Footer from &apos;../Footer/Footer&apos;</span><br><span class=\"line\">import &apos;./layout.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; Content, Sider &#125; = Layout</span><br><span class=\"line\">const &#123; SubMenu &#125; = Menu</span><br><span class=\"line\"></span><br><span class=\"line\">class LayoutContainer extends React.Component &#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">        collapsed: false,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onCollapse = collapsed =&gt; &#123;</span><br><span class=\"line\">        console.log(collapsed);</span><br><span class=\"line\">        this.setState(&#123; collapsed &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">        &lt;Layout style=&#123;&#123; minHeight: &apos;100vh&apos; &#125;&#125;&gt;</span><br><span class=\"line\">            &lt;Header /&gt;           </span><br><span class=\"line\">            &lt;Layout&gt;</span><br><span class=\"line\">                &lt;Sider collapsible collapsed=&#123;this.state.collapsed&#125; onCollapse=&#123;this.onCollapse&#125;&gt;</span><br><span class=\"line\">                    &lt;Menu theme=&quot;dark&quot; defaultSelectedKeys=&#123;[&apos;1&apos;]&#125; mode=&quot;inline&quot;&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;1&quot;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&quot;pie-chart&quot; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;Option 1&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;2&quot;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&quot;desktop&quot; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;Option 2&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;SubMenu</span><br><span class=\"line\">                        key=&quot;sub1&quot;</span><br><span class=\"line\">                        title=&#123;</span><br><span class=\"line\">                            &lt;span&gt;</span><br><span class=\"line\">                            &lt;Icon type=&quot;user&quot; /&gt;</span><br><span class=\"line\">                            &lt;span&gt;User&lt;/span&gt;</span><br><span class=\"line\">                            &lt;/span&gt;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        &gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;3&quot;&gt;Tom&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;4&quot;&gt;Bill&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;5&quot;&gt;Alex&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;/SubMenu&gt;</span><br><span class=\"line\">                        &lt;SubMenu</span><br><span class=\"line\">                        key=&quot;sub2&quot;</span><br><span class=\"line\">                        title=&#123;</span><br><span class=\"line\">                            &lt;span&gt;</span><br><span class=\"line\">                            &lt;Icon type=&quot;team&quot; /&gt;</span><br><span class=\"line\">                            &lt;span&gt;Team&lt;/span&gt;</span><br><span class=\"line\">                            &lt;/span&gt;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        &gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;6&quot;&gt;Team 1&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;8&quot;&gt;Team 2&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;/SubMenu&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;9&quot;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&quot;file&quot; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;File&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/Menu.Item&gt;</span><br><span class=\"line\">                    &lt;/Menu&gt;</span><br><span class=\"line\">                &lt;/Sider&gt;</span><br><span class=\"line\">                &lt;Content style=&#123;&#123; margin: &apos;0 16px&apos; &#125;&#125;&gt;</span><br><span class=\"line\">                    &lt;Breadcrumb style=&#123;&#123; margin: &apos;16px 0&apos; &#125;&#125;&gt;</span><br><span class=\"line\">                        &lt;Breadcrumb.Item&gt;User&lt;/Breadcrumb.Item&gt;</span><br><span class=\"line\">                        &lt;Breadcrumb.Item&gt;Bill&lt;/Breadcrumb.Item&gt;</span><br><span class=\"line\">                    &lt;/Breadcrumb&gt;</span><br><span class=\"line\">                    &lt;div style=&#123;&#123; padding: 24, background: &apos;#fff&apos;, minHeight: 360 &#125;&#125;&gt;Bill is a cat.&lt;/div&gt;</span><br><span class=\"line\">                    &lt;Footer /&gt;</span><br><span class=\"line\">                &lt;/Content&gt;</span><br><span class=\"line\">            &lt;/Layout&gt;</span><br><span class=\"line\">        &lt;/Layout&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ export default hot(LayoutContainer)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继续运行项目，如图，已经可以实时更新了，并将修改的文件路径也给打印出来了；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a50f47d451f0c069.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n</ul>\n<p>可以看到控制台出现了警告，说是 <code>react-dom pacth</code> 没有检测到，可能会影响我们使用 <code>react 16.6</code> 以上版本的特性，比如 <code>hook</code>，查看 <code>react-hot-loader</code> 配置，安装 <code>@hot-loader/react-dom</code> 这个插件，将其指到 react-dom 即可；在 webpack.common.js 中作如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">...</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">        extensions: [&apos;.js&apos;, &apos;.css&apos;, &apos;.less&apos;],</span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            &apos;react-dom&apos;: &apos;@hot-loader/react-dom&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>最后运行项目，这个警告就没有了；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-32c6b9118806b502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>最后我们来验证一下用 <code>hook</code> 特性来写 <code>Header.js</code>，看一下 <code>hot</code> 是不是起作用；修改 <code>Header.js</code> 为一个函数组件，然后使用 hook，来使用 react class 的 state 特性；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/components/Header/Header.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; Layout, Button &#125; from &apos;antd&apos;</span><br><span class=\"line\">const &#123; Header &#125; = Layout</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./header.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">    const [ username, setUsername ] = useState(&apos;john&apos;);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Header className=&quot;app-header&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;我的名字叫 &#123;username&#125;&lt;/span&gt;</span><br><span class=\"line\">            &lt;Button type=&quot;primary&quot; onClick=&#123;() =&gt; setUsername(&apos;lyli&apos;)&#125;&gt;修改名字&lt;/Button&gt;</span><br><span class=\"line\">        &lt;/Header&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在 Header.js 中引入 <code>useState</code> hook，新建一个变量和设置变量的函数，初始值是 <code>john</code>，点击按钮修改为 <code>lyli</code>，可以看到页面直接更新了，并没有重新刷新；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8f2e28a34109899b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>最终我们实现了 react 项目的热更新，项目地址在这里，大家可以下载尝试一下：<a href=\"https://github.com/mxcz213/webpack4-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/mxcz213/webpack4-demo</a></p>\n<p>参考：<br><a href=\"https://webpack.js.org/guides/hot-module-replacement/\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/guides/hot-module-replacement/</a><br><a href=\"https://www.npmjs.com/package/react-hot-loader\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/react-hot-loader</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇文章 <a href=\"https://www.jianshu.com/p/846001b37a83\" target=\"_blank\" rel=\"noopener\">webpack 4 搭建React antd 中后台项目架构</a> 实现了基本的架构工作，让项目可以跑起来，虽说依照 webpack 中文官网，在 webpack.dev.js 中配置了 hot，只有修改样式的时候才能热更新，可以像在浏览器中修改样式一样的快速，修改 js 文件依然没有效果，主要是原因是 style-loader 实现了HMR接口，而 react 的 js 文件并没有实现这个功能：  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.dev.js</span><br><span class=\"line\">...</span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">        contentBase: path.resolve(__dirname, &apos;dist&apos;),</span><br><span class=\"line\">+        hot: true,</span><br><span class=\"line\">        hotOnly: true,</span><br><span class=\"line\">        open: false,  //自动打开浏览器</span><br><span class=\"line\">        port: 9000,</span><br><span class=\"line\">        overlay: &#123;</span><br><span class=\"line\">            warnings: false,</span><br><span class=\"line\">            errors: true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">+        new webpack.NamedModulesPlugin(),</span><br><span class=\"line\">+        new webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">    ],</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//main.js</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import App from &apos;./app&apos;</span><br><span class=\"line\">import Layout from &apos;./components/Layout/Layout&apos;</span><br><span class=\"line\">import &apos;./css/main&apos;</span><br><span class=\"line\">import &apos;./css/base&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    //&lt;App /&gt;,</span><br><span class=\"line\">    &lt;Layout /&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">+ if(module.hot)&#123;</span><br><span class=\"line\">+     module.hot.accept();</span><br><span class=\"line\">+ &#125;</span><br></pre></td></tr></table></figure>\n\n<p>猜想可能是引入 react 的缘故，于是重新加一个入口文件 <code>index.js</code> 来使验证一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  app: &apos;./src/index.js&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//入口文件 index.js</span><br><span class=\"line\">import &#123; square &#125; from &apos;./math.js&apos;</span><br><span class=\"line\">console.log(&apos;打印2的平方&apos;,square(2))</span><br><span class=\"line\"></span><br><span class=\"line\">let arr = [1,2,3];</span><br><span class=\"line\">let arr2 = arr.map(item =&gt; item + 2)</span><br><span class=\"line\">arr.includes(8)</span><br><span class=\"line\">console.log(&apos;new Set(arr2):&apos;, new Set(arr2))</span><br><span class=\"line\"></span><br><span class=\"line\">async function l() &#123;</span><br><span class=\"line\">    return await 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">l().then((value) =&gt; &#123;</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">    console.log(111111)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">const app = document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">app.innerHTML = &apos;hello world&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">+ if(module.hot)&#123;</span><br><span class=\"line\">+     module.hot.accept();</span><br><span class=\"line\">+ &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样在启动项目，刷新页面，可以看到直接修改 <code>index.js</code> 中的 html 内容，页面实时更新了。由此可见 react 框架并没有做热更新，以前用 vue-cli 创建项目的时候，是可以进行热更新的，原因是 vue-loader 实现了这个功能，而 react 没有做到这样，所有我们需要借助插件来实现，插件就是 <code>react-hot-loader</code>。</p>\n<p>现在通过 <code>react-hot-loader</code> 来实现 react 的热更新：</p>\n<ul>\n<li><p>安装最新版的 react-hot-loader；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install @hot-loader/react-dom --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将入口文件换成 main.js</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">...</span><br><span class=\"line\">entry: &#123;</span><br><span class=\"line\">  app: &apos;./src/main.js&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 root component （src/components/Layout/Layout.js），在 react react-dom 之前引入 <code>react-hot-loader/root</code>，然后将组件用 <code>hot</code> 包起来；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ import &#123; hot &#125; from &apos;react-hot-loader/root&apos;</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &#123; Layout, Menu, Breadcrumb, Icon &#125; from &apos;antd&apos;</span><br><span class=\"line\">import Header from &apos;../Header/Header&apos;</span><br><span class=\"line\">import Footer from &apos;../Footer/Footer&apos;</span><br><span class=\"line\">import &apos;./layout.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; Content, Sider &#125; = Layout</span><br><span class=\"line\">const &#123; SubMenu &#125; = Menu</span><br><span class=\"line\"></span><br><span class=\"line\">class LayoutContainer extends React.Component &#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">        collapsed: false,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onCollapse = collapsed =&gt; &#123;</span><br><span class=\"line\">        console.log(collapsed);</span><br><span class=\"line\">        this.setState(&#123; collapsed &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">        &lt;Layout style=&#123;&#123; minHeight: &apos;100vh&apos; &#125;&#125;&gt;</span><br><span class=\"line\">            &lt;Header /&gt;           </span><br><span class=\"line\">            &lt;Layout&gt;</span><br><span class=\"line\">                &lt;Sider collapsible collapsed=&#123;this.state.collapsed&#125; onCollapse=&#123;this.onCollapse&#125;&gt;</span><br><span class=\"line\">                    &lt;Menu theme=&quot;dark&quot; defaultSelectedKeys=&#123;[&apos;1&apos;]&#125; mode=&quot;inline&quot;&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;1&quot;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&quot;pie-chart&quot; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;Option 1&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;2&quot;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&quot;desktop&quot; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;Option 2&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;SubMenu</span><br><span class=\"line\">                        key=&quot;sub1&quot;</span><br><span class=\"line\">                        title=&#123;</span><br><span class=\"line\">                            &lt;span&gt;</span><br><span class=\"line\">                            &lt;Icon type=&quot;user&quot; /&gt;</span><br><span class=\"line\">                            &lt;span&gt;User&lt;/span&gt;</span><br><span class=\"line\">                            &lt;/span&gt;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        &gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;3&quot;&gt;Tom&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;4&quot;&gt;Bill&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;5&quot;&gt;Alex&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;/SubMenu&gt;</span><br><span class=\"line\">                        &lt;SubMenu</span><br><span class=\"line\">                        key=&quot;sub2&quot;</span><br><span class=\"line\">                        title=&#123;</span><br><span class=\"line\">                            &lt;span&gt;</span><br><span class=\"line\">                            &lt;Icon type=&quot;team&quot; /&gt;</span><br><span class=\"line\">                            &lt;span&gt;Team&lt;/span&gt;</span><br><span class=\"line\">                            &lt;/span&gt;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        &gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;6&quot;&gt;Team 1&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;8&quot;&gt;Team 2&lt;/Menu.Item&gt;</span><br><span class=\"line\">                        &lt;/SubMenu&gt;</span><br><span class=\"line\">                        &lt;Menu.Item key=&quot;9&quot;&gt;</span><br><span class=\"line\">                        &lt;Icon type=&quot;file&quot; /&gt;</span><br><span class=\"line\">                        &lt;span&gt;File&lt;/span&gt;</span><br><span class=\"line\">                        &lt;/Menu.Item&gt;</span><br><span class=\"line\">                    &lt;/Menu&gt;</span><br><span class=\"line\">                &lt;/Sider&gt;</span><br><span class=\"line\">                &lt;Content style=&#123;&#123; margin: &apos;0 16px&apos; &#125;&#125;&gt;</span><br><span class=\"line\">                    &lt;Breadcrumb style=&#123;&#123; margin: &apos;16px 0&apos; &#125;&#125;&gt;</span><br><span class=\"line\">                        &lt;Breadcrumb.Item&gt;User&lt;/Breadcrumb.Item&gt;</span><br><span class=\"line\">                        &lt;Breadcrumb.Item&gt;Bill&lt;/Breadcrumb.Item&gt;</span><br><span class=\"line\">                    &lt;/Breadcrumb&gt;</span><br><span class=\"line\">                    &lt;div style=&#123;&#123; padding: 24, background: &apos;#fff&apos;, minHeight: 360 &#125;&#125;&gt;Bill is a cat.&lt;/div&gt;</span><br><span class=\"line\">                    &lt;Footer /&gt;</span><br><span class=\"line\">                &lt;/Content&gt;</span><br><span class=\"line\">            &lt;/Layout&gt;</span><br><span class=\"line\">        &lt;/Layout&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">+ export default hot(LayoutContainer)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>继续运行项目，如图，已经可以实时更新了，并将修改的文件路径也给打印出来了；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a50f47d451f0c069.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n</ul>\n<p>可以看到控制台出现了警告，说是 <code>react-dom pacth</code> 没有检测到，可能会影响我们使用 <code>react 16.6</code> 以上版本的特性，比如 <code>hook</code>，查看 <code>react-hot-loader</code> 配置，安装 <code>@hot-loader/react-dom</code> 这个插件，将其指到 react-dom 即可；在 webpack.common.js 中作如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack.common.js</span><br><span class=\"line\">...</span><br><span class=\"line\">resolve: &#123;</span><br><span class=\"line\">        extensions: [&apos;.js&apos;, &apos;.css&apos;, &apos;.less&apos;],</span><br><span class=\"line\">        alias: &#123;</span><br><span class=\"line\">            &apos;react-dom&apos;: &apos;@hot-loader/react-dom&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>最后运行项目，这个警告就没有了；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-32c6b9118806b502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>最后我们来验证一下用 <code>hook</code> 特性来写 <code>Header.js</code>，看一下 <code>hot</code> 是不是起作用；修改 <code>Header.js</code> 为一个函数组件，然后使用 hook，来使用 react class 的 state 特性；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/components/Header/Header.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; Layout, Button &#125; from &apos;antd&apos;</span><br><span class=\"line\">const &#123; Header &#125; = Layout</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./header.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default () =&gt; &#123;</span><br><span class=\"line\">    const [ username, setUsername ] = useState(&apos;john&apos;);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Header className=&quot;app-header&quot;&gt;</span><br><span class=\"line\">            &lt;span&gt;我的名字叫 &#123;username&#125;&lt;/span&gt;</span><br><span class=\"line\">            &lt;Button type=&quot;primary&quot; onClick=&#123;() =&gt; setUsername(&apos;lyli&apos;)&#125;&gt;修改名字&lt;/Button&gt;</span><br><span class=\"line\">        &lt;/Header&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们在 Header.js 中引入 <code>useState</code> hook，新建一个变量和设置变量的函数，初始值是 <code>john</code>，点击按钮修改为 <code>lyli</code>，可以看到页面直接更新了，并没有重新刷新；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8f2e28a34109899b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>最终我们实现了 react 项目的热更新，项目地址在这里，大家可以下载尝试一下：<a href=\"https://github.com/mxcz213/webpack4-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/mxcz213/webpack4-demo</a></p>\n<p>参考：<br><a href=\"https://webpack.js.org/guides/hot-module-replacement/\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/guides/hot-module-replacement/</a><br><a href=\"https://www.npmjs.com/package/react-hot-loader\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/react-hot-loader</a></p>\n"},{"title":"webpack-4-搭建-React-架构：引入Redux（三）","_content":"####动机\n随着 JavaScript 单页应用开发越来越复杂，Javascript 需要管理很多 state（状态）。这些状态可能包括服务器响应、缓存数据、本地生产尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等。\n\n管理不断变化的 state 很困难。如果一个 model 的变化的会引起另一个 model 的变化，那么当 view 变化时，就可能引起对应 model 以及其他 model 的变化，依次地，可能引起另一个 view 的变化。这时候的 state 就变得不受控制，不可预测，就会出现很多 bug，调试起来就很找到问题所在。\n\n所以 Redux 就是用来解决复杂 state 多变，不可预测等问题。\n\n####什么是 Redux\n\nRedux 是 JavaScript 应用程序的可预测的状态容器。它将所有的状态集中到一起管理。页面不直接修改state，而是发一个 action 给到 reducer 来操作 state，并将新的 state 通知给 store，store 来进行页面的状态更新。\n\n#####Redux的三个基本原则：\n\n* 单一数据源（整个应用的 state 被存储在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中）\n* State 是只读的（唯一改变 state 的方法就是触发 action，action 就是一个普通的 JavaScript 对象）\n* 使用纯函数来执行（通过编写 reducer，来描述 action 如何改变 state tree，reducer 就是一个纯函数，接收 state 和 action 两个参数，最后返回新的 state）\n\n####创建一个 store\n* 首先安装 redux，redux 是独立于 UI 框架的工具，不依赖任何前端框架\n```\nnpm install redux --save-dev\n```\n* 在 components 目录下创建一个 TodoList 目录，在此目录下创建一个 store.js，写入如下代码\n```\n//components/TodoList/store.js\nimport { createStore } from 'redux'\nconst initialState = {\n    count: 0\n}\nconst ADD = 'ADD'\nfunction reducer(state = initialState, action){\n    console.log(state, action)\n    switch(action.type){\n        case ADD:\n            return { count: state.count + 1 }\n        default:\n            return state\n    }\n}\nconst store = createStore(reducer, initialState)\nconsole.log(store)\nexport default store\n```\n* 将 store.js 引入 Layout.js，来看一下 store 是什么样子的\n```\n//components/Layout/Layout.js\n···\n+ import store from '../../components/TodoList/store.js'\n···\n```\n* 运行代码，打开控制台可以看到打印出来的 store\n![](https://upload-images.jianshu.io/upload_images/5541401-230a3a67a3eee35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到 store 对象，里面有 dispatch，getState，subscribe 等方法，上面的 state 是初始化 store 的时候默认会执行一遍 reducer 方法，传入 state，action 是传入的 redux INIT 事件，getState 方法获取最新的完整的 state 对象。\n* 接下来更新 store 里面的数据，通过 store.dispatch 方法\n```\n//components/TodoList/store.js\n···\n+ store.dispatch({ type: ADD })\n+ console.log('dispatch 之后改变的state', store.getState())\nexport default store\n```\n可以看到 state 改变了，reducer 里面 return 的一定要是一个新的对象，对比前后不同的 state 来做数据更新\n![](https://upload-images.jianshu.io/upload_images/5541401-7e72b9433fdb3ecc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nstore 还有个方法 subscribe，这个接受一个回调函数，在 state 变化的时候执行，\n```\n//components/TodoList/store.js\n···\nconst store = createStore(reducer, initialState)\n\n//console.log(store)\n//console.log(store.getState())\nstore.dispatch({ type: ADD })\n//console.log('dispatch 之后改变的state', store.getState())\nstore.subscribe(() => {\n    console.log('执行subscribe回调', store.getState())\n})\nstore.dispatch({ type: ADD })\n\nexport default store\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-119c0110f85bc4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到在第二次 dispatch 的时候，subscribe 执行了。\n\n####Redux 中的 reducer\nreducer 是一个纯粹的 JavaScript 方法，接收 state 和 action 作为参数，根据 action 对象里的 type 属性来操作 state，返回一个新的 state 对象（return { ...state, count: action.count + 1 }）。reducer 应该是一个纯粹的方法，不应该有副作用，不应该依赖 reducer 函数外部的变量来更新 state，而是应该将变量放到 state 对象中。\n根据不同的模块，可以写多个 reducer，然后通过 combineReducers 进行合并。\n\n现在再写一个 user 的 reducer，然后与 counter 的 reducer 合并，代码如下\n```\n//components/TodoList/store.js\nimport { createStore, combineReducers } from 'redux'\n\nconst initialState = {\n    count: 0\n}\n\n//user模块\nconst userInitialState = {\n    username: 'john',\n    age: 28,\n    address: 'shanghai'\n}\n\nconst ADD = 'ADD'\nfunction counterReducer(state = initialState, action){\n    switch(action.type){\n        case ADD:\n            return { count: state.count + 1 }\n        default:\n            return state\n    }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\nfunction userReducer(state = userInitialState, action){\n    switch(action.type){\n        case UPDATE_USERNAME:\n            return {\n                ...state,\n                username: action.newName\n            }\n        default:\n            return state\n    }\n}\n//combineReducers来合并counter 和 user\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    user: userReducer\n})\n//将合并的reducer传给store，传入的初始状态也要合并\nconst store = createStore(allReducers, {\n    counter: initialState,\n    user: userInitialState\n})\n\nstore.dispatch({ type: ADD })\nstore.dispatch({ type: UPDATE_USERNAME, newName: 'lilei' })\nconsole.log('合并的state', store.getState())\n\nexport default store\n```\n运行代码，可以看到，state 被合并在一起了\n![](https://upload-images.jianshu.io/upload_images/5541401-5018e7c683816a6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####Redux 中的 action\naction 就是一个普通对象，对象有个 type 属性，来表明这一次的操作是什么，还有其他的普通属性。可以使用方法来创建一个 action，返回一个对象。\n```\nimport { createStore, combineReducers } from 'redux'\n\nconst initialState = {\n    count: 0\n}\n\n//user模块\nconst userInitialState = {\n    username: 'john',\n    age: 28,\n    address: 'shanghai'\n}\n\nconst ADD = 'ADD'\nfunction counterReducer(state = initialState, action){\n    // console.log(state, action)\n    switch(action.type){\n        case ADD:\n            return { count: action.num + 1 }  //用传进来的action.num来设置count\n        default:\n            return state\n    }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\nfunction userReducer(state = userInitialState, action){\n    switch(action.type){\n        case UPDATE_USERNAME:\n            return {\n                ...state,\n                username: action.newName\n            }\n        default:\n            return state\n    }\n}\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    user: userReducer\n})\nconst store = createStore(allReducers, {\n    counter: initialState,\n    user: userInitialState\n})\n\n//创建一个add函数，返回action\nfunction add(num){\n    return {\n        type: ADD,\n        num\n    }\n}\n\n//store.dispatch({ type: ADD })\nstore.dispatch(add(3))\nstore.dispatch({ type: UPDATE_USERNAME, newName: 'lilei' })\n\nconsole.log('合并的state', store.getState())\nexport default store\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-573416b9297583ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到打印的数据 count 是4 了；\n#####异步的action\n使用 redux-thunk 插件来实现，通过 redux 的 applyMiddleWare 来使用中间件，将applyMiddleWare(ReduxThunk) 作为 store 第三个参数传入，就可以使用异步的 action 了；\n安装 redux-thunk，它返回一个执行异步调度的函数，用于延迟动作的发送，内部函数接收 store 的 dispatch \n和 getState 作为参数\n```\nnpm install redux-thunk --save-dev\n```\n实现一个异步的 action，asyncAdd 方法\n```\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nconst initialState = {\n    count: 0\n}\n\n//user模块\nconst userInitialState = {\n    username: 'john',\n    age: 28,\n    address: 'shanghai'\n}\n\nconst ADD = 'ADD'\nfunction counterReducer(state = initialState, action){\n    // console.log(state, action)\n    switch(action.type){\n        case ADD:\n            return { count: action.num + 1 }\n        default:\n            return state\n    }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\nfunction userReducer(state = userInitialState, action){\n    switch(action.type){\n        case UPDATE_USERNAME:\n            return {\n                ...state,\n                username: action.newName\n            }\n        default:\n            return state\n    }\n}\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    user: userReducer\n})\nconst store = createStore(allReducers, {\n    counter: initialState,\n    user: userInitialState\n}, applyMiddleware(ReduxThunk))\n\nfunction add(num){\n    return {\n        type: ADD,\n        num\n    }\n}\n\n//实现一个异步的 action creators\nfunction asyncAdd(){\n    return (dispatch, getState) => {\n        new Promise((resolve, reject) => {\n            resolve(5)\n        })\n        .then((res) => {\n            dispatch(add(res))\n        })\n        .then(() => {\n            console.log('state changed:', getState())\n        })\n    }\n}\n\n//store.dispatch({ type: ADD })\nstore.dispatch(add(3))\nstore.dispatch(asyncAdd())\nstore.dispatch({ type: UPDATE_USERNAME, newName: 'lilei' })\n\nexport default store\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-46213915c185376b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nthunk 做的就是将 dispatch, getState 传入，在 dispatch 之后，异步返回之后拿到最新的 state\n\n####react-redux 连接 React 和 Redux\nreact-redux 是 React 官方指定的 Redux 插件，它允许 React 组件可以从 Redux 的 store 中读取数据，并且可以分发 action 到 store 去更新数据。\n安装 react-redux\n```\nnpm install react-redux --save-dev\n```\nreact-redux 提供了 Provider 来使 redux 的 store 可以用到应用程序中，还提供了 connect 方法连接组件和 store\n实例代码如下，将 Layout 组件用 Provider 包起来，传入 store\n```\n//components/Layout/Layout.js\nimport { hot } from 'react-hot-loader/root'\nimport React from 'react'\n\nimport { Provider } from 'react-redux'\nimport store from '../../components/Todolist/store.js'\n\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd'\nimport Header from '../Header/Header'\nimport Footer from '../Footer/Footer'\nimport './layout.less'\n\nconst { Content, Sider } = Layout\nconst { SubMenu } = Menu\n\nclass LayoutContainer extends React.Component {\n    state = {\n        collapsed: false,\n    }\n\n    onCollapse = collapsed => {\n        console.log(collapsed);\n        this.setState({ collapsed });\n    };\n\n    render() {\n        return (\n            <Provider store={store}>\n                <Layout style={{ minHeight: '100vh' }}>\n                    <Header />           \n                    <Layout>\n                        ···\n                    </Layout>\n                </Layout>\n            </Provider>\n            \n        );\n    }\n}\n\nexport default hot(LayoutContainer)\n```\n然后 connect Header 组件，connect 接收两个参数 `mapStateToProps`，`mapDispatchToProps`；\n* `mapStateToProps`：每次 store 中的 state 改变时都会被调用，接收参数为整个的 state, 返回 React 组件所需的数据对象；\n* `mapDispatchToProps`：此参数可以是函数，也可以是对象。如果参数是函数，参数为 dispatch，返回一个对象，对象里面的属性的类型是函数，此函数通过 dispatch 方法来 dispatch actions，它在组件创建的时候调用一次。\n如果参数是对象，这个对象是一个 action creators，每一个 action creator 都会进入 props 函数，在调用的时候自动 dispatch action\n```\n//components/Header/Header.js\nimport React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Layout, Button } from 'antd'\nconst { Header } = Layout\n\nimport './header.less'\n\n/*export default () => {\n    //const [ username, setUsername ] = useState('john');\n    return (\n        <Header className=\"app-header\">\n            压制系统\n        </Header>\n    )\n}*/\n\nconst HeaderBar = ({ counter, username }) => {\n    return <Header>counter： {counter}，username：{username}</Header>\n}\n//mapStateToProps函数返回一个对象,将这个对象作为props传给Header组件\nconst mapStateToProps = (state) => {\n    return {\n        counter: state.counter.count,\n        username: state.user.username\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        \n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(HeaderBar)\n```\n然后看到页面正确获取了 state;\n![](https://upload-images.jianshu.io/upload_images/5541401-5f043705f714e4a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n现在给 Header 组件添加一个按钮用来改变 state，然后更新 state 到视图\n```\n//components/Header/Header.js\nimport React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Layout, Button } from 'antd'\nconst { Header } = Layout\n\nimport './header.less'\n\n/*export default () => {\n    //const [ username, setUsername ] = useState('john');\n    return (\n        <Header className=\"app-header\">\n            压制系统\n        </Header>\n    )\n}*/\n\nconst HeaderBar = ({ counter, username, rename, add }) => {\n    return <Header>\n        counter： {counter}，username：{username}\n        <button onClick={() => add(counter + counter)}>add</button>\n        <input value={username} onChange={(e) => rename(e.target.value)}/>\n    </Header>\n}\n\n//mapStateToProps, 在每次store中的state改变时都会被调用，接收参数为整个的state, 返回Header组件所需的数据对象，这个对象会作为props传给Header组件\nconst mapStateToProps = (state) => {\n    return {\n        counter: state.counter.count,\n        username: state.user.username\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        add: (num) => dispatch({ type: 'ADD', num}),\n        rename: (newName) => dispatch({type: 'UPDATE_USERNAME', newName})\n    }\n}\n\n//Connecting the Components\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(HeaderBar)\n```\n可以看到 input 中输入内容，username 改变了，点击 add 按钮，counter 也改变了。\n\n参考：\nhttps://redux.js.org/introduction/getting-started\nhttps://www.redux.org.cn/docs/introduction/Ecosystem.html\nhttps://react-redux.js.org/introduction/basic-tutorial\nhttps://www.npmjs.com/package/redux-thunk\nhttps://react-redux.js.org/\n","source":"_posts/webpack-4-搭建-React-架构：引入Redux（三）.md","raw":"---\ntitle: webpack-4-搭建-React-架构：引入Redux（三）\n---\n####动机\n随着 JavaScript 单页应用开发越来越复杂，Javascript 需要管理很多 state（状态）。这些状态可能包括服务器响应、缓存数据、本地生产尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等。\n\n管理不断变化的 state 很困难。如果一个 model 的变化的会引起另一个 model 的变化，那么当 view 变化时，就可能引起对应 model 以及其他 model 的变化，依次地，可能引起另一个 view 的变化。这时候的 state 就变得不受控制，不可预测，就会出现很多 bug，调试起来就很找到问题所在。\n\n所以 Redux 就是用来解决复杂 state 多变，不可预测等问题。\n\n####什么是 Redux\n\nRedux 是 JavaScript 应用程序的可预测的状态容器。它将所有的状态集中到一起管理。页面不直接修改state，而是发一个 action 给到 reducer 来操作 state，并将新的 state 通知给 store，store 来进行页面的状态更新。\n\n#####Redux的三个基本原则：\n\n* 单一数据源（整个应用的 state 被存储在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中）\n* State 是只读的（唯一改变 state 的方法就是触发 action，action 就是一个普通的 JavaScript 对象）\n* 使用纯函数来执行（通过编写 reducer，来描述 action 如何改变 state tree，reducer 就是一个纯函数，接收 state 和 action 两个参数，最后返回新的 state）\n\n####创建一个 store\n* 首先安装 redux，redux 是独立于 UI 框架的工具，不依赖任何前端框架\n```\nnpm install redux --save-dev\n```\n* 在 components 目录下创建一个 TodoList 目录，在此目录下创建一个 store.js，写入如下代码\n```\n//components/TodoList/store.js\nimport { createStore } from 'redux'\nconst initialState = {\n    count: 0\n}\nconst ADD = 'ADD'\nfunction reducer(state = initialState, action){\n    console.log(state, action)\n    switch(action.type){\n        case ADD:\n            return { count: state.count + 1 }\n        default:\n            return state\n    }\n}\nconst store = createStore(reducer, initialState)\nconsole.log(store)\nexport default store\n```\n* 将 store.js 引入 Layout.js，来看一下 store 是什么样子的\n```\n//components/Layout/Layout.js\n···\n+ import store from '../../components/TodoList/store.js'\n···\n```\n* 运行代码，打开控制台可以看到打印出来的 store\n![](https://upload-images.jianshu.io/upload_images/5541401-230a3a67a3eee35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到 store 对象，里面有 dispatch，getState，subscribe 等方法，上面的 state 是初始化 store 的时候默认会执行一遍 reducer 方法，传入 state，action 是传入的 redux INIT 事件，getState 方法获取最新的完整的 state 对象。\n* 接下来更新 store 里面的数据，通过 store.dispatch 方法\n```\n//components/TodoList/store.js\n···\n+ store.dispatch({ type: ADD })\n+ console.log('dispatch 之后改变的state', store.getState())\nexport default store\n```\n可以看到 state 改变了，reducer 里面 return 的一定要是一个新的对象，对比前后不同的 state 来做数据更新\n![](https://upload-images.jianshu.io/upload_images/5541401-7e72b9433fdb3ecc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nstore 还有个方法 subscribe，这个接受一个回调函数，在 state 变化的时候执行，\n```\n//components/TodoList/store.js\n···\nconst store = createStore(reducer, initialState)\n\n//console.log(store)\n//console.log(store.getState())\nstore.dispatch({ type: ADD })\n//console.log('dispatch 之后改变的state', store.getState())\nstore.subscribe(() => {\n    console.log('执行subscribe回调', store.getState())\n})\nstore.dispatch({ type: ADD })\n\nexport default store\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-119c0110f85bc4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到在第二次 dispatch 的时候，subscribe 执行了。\n\n####Redux 中的 reducer\nreducer 是一个纯粹的 JavaScript 方法，接收 state 和 action 作为参数，根据 action 对象里的 type 属性来操作 state，返回一个新的 state 对象（return { ...state, count: action.count + 1 }）。reducer 应该是一个纯粹的方法，不应该有副作用，不应该依赖 reducer 函数外部的变量来更新 state，而是应该将变量放到 state 对象中。\n根据不同的模块，可以写多个 reducer，然后通过 combineReducers 进行合并。\n\n现在再写一个 user 的 reducer，然后与 counter 的 reducer 合并，代码如下\n```\n//components/TodoList/store.js\nimport { createStore, combineReducers } from 'redux'\n\nconst initialState = {\n    count: 0\n}\n\n//user模块\nconst userInitialState = {\n    username: 'john',\n    age: 28,\n    address: 'shanghai'\n}\n\nconst ADD = 'ADD'\nfunction counterReducer(state = initialState, action){\n    switch(action.type){\n        case ADD:\n            return { count: state.count + 1 }\n        default:\n            return state\n    }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\nfunction userReducer(state = userInitialState, action){\n    switch(action.type){\n        case UPDATE_USERNAME:\n            return {\n                ...state,\n                username: action.newName\n            }\n        default:\n            return state\n    }\n}\n//combineReducers来合并counter 和 user\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    user: userReducer\n})\n//将合并的reducer传给store，传入的初始状态也要合并\nconst store = createStore(allReducers, {\n    counter: initialState,\n    user: userInitialState\n})\n\nstore.dispatch({ type: ADD })\nstore.dispatch({ type: UPDATE_USERNAME, newName: 'lilei' })\nconsole.log('合并的state', store.getState())\n\nexport default store\n```\n运行代码，可以看到，state 被合并在一起了\n![](https://upload-images.jianshu.io/upload_images/5541401-5018e7c683816a6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n####Redux 中的 action\naction 就是一个普通对象，对象有个 type 属性，来表明这一次的操作是什么，还有其他的普通属性。可以使用方法来创建一个 action，返回一个对象。\n```\nimport { createStore, combineReducers } from 'redux'\n\nconst initialState = {\n    count: 0\n}\n\n//user模块\nconst userInitialState = {\n    username: 'john',\n    age: 28,\n    address: 'shanghai'\n}\n\nconst ADD = 'ADD'\nfunction counterReducer(state = initialState, action){\n    // console.log(state, action)\n    switch(action.type){\n        case ADD:\n            return { count: action.num + 1 }  //用传进来的action.num来设置count\n        default:\n            return state\n    }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\nfunction userReducer(state = userInitialState, action){\n    switch(action.type){\n        case UPDATE_USERNAME:\n            return {\n                ...state,\n                username: action.newName\n            }\n        default:\n            return state\n    }\n}\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    user: userReducer\n})\nconst store = createStore(allReducers, {\n    counter: initialState,\n    user: userInitialState\n})\n\n//创建一个add函数，返回action\nfunction add(num){\n    return {\n        type: ADD,\n        num\n    }\n}\n\n//store.dispatch({ type: ADD })\nstore.dispatch(add(3))\nstore.dispatch({ type: UPDATE_USERNAME, newName: 'lilei' })\n\nconsole.log('合并的state', store.getState())\nexport default store\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-573416b9297583ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n可以看到打印的数据 count 是4 了；\n#####异步的action\n使用 redux-thunk 插件来实现，通过 redux 的 applyMiddleWare 来使用中间件，将applyMiddleWare(ReduxThunk) 作为 store 第三个参数传入，就可以使用异步的 action 了；\n安装 redux-thunk，它返回一个执行异步调度的函数，用于延迟动作的发送，内部函数接收 store 的 dispatch \n和 getState 作为参数\n```\nnpm install redux-thunk --save-dev\n```\n实现一个异步的 action，asyncAdd 方法\n```\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport ReduxThunk from 'redux-thunk'\n\nconst initialState = {\n    count: 0\n}\n\n//user模块\nconst userInitialState = {\n    username: 'john',\n    age: 28,\n    address: 'shanghai'\n}\n\nconst ADD = 'ADD'\nfunction counterReducer(state = initialState, action){\n    // console.log(state, action)\n    switch(action.type){\n        case ADD:\n            return { count: action.num + 1 }\n        default:\n            return state\n    }\n}\n\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\nfunction userReducer(state = userInitialState, action){\n    switch(action.type){\n        case UPDATE_USERNAME:\n            return {\n                ...state,\n                username: action.newName\n            }\n        default:\n            return state\n    }\n}\n\nconst allReducers = combineReducers({\n    counter: counterReducer,\n    user: userReducer\n})\nconst store = createStore(allReducers, {\n    counter: initialState,\n    user: userInitialState\n}, applyMiddleware(ReduxThunk))\n\nfunction add(num){\n    return {\n        type: ADD,\n        num\n    }\n}\n\n//实现一个异步的 action creators\nfunction asyncAdd(){\n    return (dispatch, getState) => {\n        new Promise((resolve, reject) => {\n            resolve(5)\n        })\n        .then((res) => {\n            dispatch(add(res))\n        })\n        .then(() => {\n            console.log('state changed:', getState())\n        })\n    }\n}\n\n//store.dispatch({ type: ADD })\nstore.dispatch(add(3))\nstore.dispatch(asyncAdd())\nstore.dispatch({ type: UPDATE_USERNAME, newName: 'lilei' })\n\nexport default store\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-46213915c185376b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\nthunk 做的就是将 dispatch, getState 传入，在 dispatch 之后，异步返回之后拿到最新的 state\n\n####react-redux 连接 React 和 Redux\nreact-redux 是 React 官方指定的 Redux 插件，它允许 React 组件可以从 Redux 的 store 中读取数据，并且可以分发 action 到 store 去更新数据。\n安装 react-redux\n```\nnpm install react-redux --save-dev\n```\nreact-redux 提供了 Provider 来使 redux 的 store 可以用到应用程序中，还提供了 connect 方法连接组件和 store\n实例代码如下，将 Layout 组件用 Provider 包起来，传入 store\n```\n//components/Layout/Layout.js\nimport { hot } from 'react-hot-loader/root'\nimport React from 'react'\n\nimport { Provider } from 'react-redux'\nimport store from '../../components/Todolist/store.js'\n\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd'\nimport Header from '../Header/Header'\nimport Footer from '../Footer/Footer'\nimport './layout.less'\n\nconst { Content, Sider } = Layout\nconst { SubMenu } = Menu\n\nclass LayoutContainer extends React.Component {\n    state = {\n        collapsed: false,\n    }\n\n    onCollapse = collapsed => {\n        console.log(collapsed);\n        this.setState({ collapsed });\n    };\n\n    render() {\n        return (\n            <Provider store={store}>\n                <Layout style={{ minHeight: '100vh' }}>\n                    <Header />           \n                    <Layout>\n                        ···\n                    </Layout>\n                </Layout>\n            </Provider>\n            \n        );\n    }\n}\n\nexport default hot(LayoutContainer)\n```\n然后 connect Header 组件，connect 接收两个参数 `mapStateToProps`，`mapDispatchToProps`；\n* `mapStateToProps`：每次 store 中的 state 改变时都会被调用，接收参数为整个的 state, 返回 React 组件所需的数据对象；\n* `mapDispatchToProps`：此参数可以是函数，也可以是对象。如果参数是函数，参数为 dispatch，返回一个对象，对象里面的属性的类型是函数，此函数通过 dispatch 方法来 dispatch actions，它在组件创建的时候调用一次。\n如果参数是对象，这个对象是一个 action creators，每一个 action creator 都会进入 props 函数，在调用的时候自动 dispatch action\n```\n//components/Header/Header.js\nimport React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Layout, Button } from 'antd'\nconst { Header } = Layout\n\nimport './header.less'\n\n/*export default () => {\n    //const [ username, setUsername ] = useState('john');\n    return (\n        <Header className=\"app-header\">\n            压制系统\n        </Header>\n    )\n}*/\n\nconst HeaderBar = ({ counter, username }) => {\n    return <Header>counter： {counter}，username：{username}</Header>\n}\n//mapStateToProps函数返回一个对象,将这个对象作为props传给Header组件\nconst mapStateToProps = (state) => {\n    return {\n        counter: state.counter.count,\n        username: state.user.username\n    }\n}\n\nconst mapDispatchToProps = () => {\n    return {\n        \n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(HeaderBar)\n```\n然后看到页面正确获取了 state;\n![](https://upload-images.jianshu.io/upload_images/5541401-5f043705f714e4a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n现在给 Header 组件添加一个按钮用来改变 state，然后更新 state 到视图\n```\n//components/Header/Header.js\nimport React, { useState } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Layout, Button } from 'antd'\nconst { Header } = Layout\n\nimport './header.less'\n\n/*export default () => {\n    //const [ username, setUsername ] = useState('john');\n    return (\n        <Header className=\"app-header\">\n            压制系统\n        </Header>\n    )\n}*/\n\nconst HeaderBar = ({ counter, username, rename, add }) => {\n    return <Header>\n        counter： {counter}，username：{username}\n        <button onClick={() => add(counter + counter)}>add</button>\n        <input value={username} onChange={(e) => rename(e.target.value)}/>\n    </Header>\n}\n\n//mapStateToProps, 在每次store中的state改变时都会被调用，接收参数为整个的state, 返回Header组件所需的数据对象，这个对象会作为props传给Header组件\nconst mapStateToProps = (state) => {\n    return {\n        counter: state.counter.count,\n        username: state.user.username\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        add: (num) => dispatch({ type: 'ADD', num}),\n        rename: (newName) => dispatch({type: 'UPDATE_USERNAME', newName})\n    }\n}\n\n//Connecting the Components\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(HeaderBar)\n```\n可以看到 input 中输入内容，username 改变了，点击 add 按钮，counter 也改变了。\n\n参考：\nhttps://redux.js.org/introduction/getting-started\nhttps://www.redux.org.cn/docs/introduction/Ecosystem.html\nhttps://react-redux.js.org/introduction/basic-tutorial\nhttps://www.npmjs.com/package/redux-thunk\nhttps://react-redux.js.org/\n","slug":"webpack-4-搭建-React-架构：引入Redux（三）","published":1,"date":"2019-09-13T02:18:12.616Z","updated":"2019-09-13T09:08:38.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73q000lwsl6ilmtqoix","content":"<p>####动机<br>随着 JavaScript 单页应用开发越来越复杂，Javascript 需要管理很多 state（状态）。这些状态可能包括服务器响应、缓存数据、本地生产尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等。</p>\n<p>管理不断变化的 state 很困难。如果一个 model 的变化的会引起另一个 model 的变化，那么当 view 变化时，就可能引起对应 model 以及其他 model 的变化，依次地，可能引起另一个 view 的变化。这时候的 state 就变得不受控制，不可预测，就会出现很多 bug，调试起来就很找到问题所在。</p>\n<p>所以 Redux 就是用来解决复杂 state 多变，不可预测等问题。</p>\n<p>####什么是 Redux</p>\n<p>Redux 是 JavaScript 应用程序的可预测的状态容器。它将所有的状态集中到一起管理。页面不直接修改state，而是发一个 action 给到 reducer 来操作 state，并将新的 state 通知给 store，store 来进行页面的状态更新。</p>\n<p>#####Redux的三个基本原则：</p>\n<ul>\n<li>单一数据源（整个应用的 state 被存储在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中）</li>\n<li>State 是只读的（唯一改变 state 的方法就是触发 action，action 就是一个普通的 JavaScript 对象）</li>\n<li>使用纯函数来执行（通过编写 reducer，来描述 action 如何改变 state tree，reducer 就是一个纯函数，接收 state 和 action 两个参数，最后返回新的 state）</li>\n</ul>\n<p>####创建一个 store</p>\n<ul>\n<li><p>首先安装 redux，redux 是独立于 UI 框架的工具，不依赖任何前端框架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 components 目录下创建一个 TodoList 目录，在此目录下创建一个 store.js，写入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function reducer(state = initialState, action)&#123;</span><br><span class=\"line\">    console.log(state, action)</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: state.count + 1 &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const store = createStore(reducer, initialState)</span><br><span class=\"line\">console.log(store)</span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将 store.js 引入 Layout.js，来看一下 store 是什么样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Layout/Layout.js</span><br><span class=\"line\">···</span><br><span class=\"line\">+ import store from &apos;../../components/TodoList/store.js&apos;</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行代码，打开控制台可以看到打印出来的 store<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-230a3a67a3eee35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>可以看到 store 对象，里面有 dispatch，getState，subscribe 等方法，上面的 state 是初始化 store 的时候默认会执行一遍 reducer 方法，传入 state，action 是传入的 redux INIT 事件，getState 方法获取最新的完整的 state 对象。</p>\n</li>\n<li><p>接下来更新 store 里面的数据，通过 store.dispatch 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">···</span><br><span class=\"line\">+ store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">+ console.log(&apos;dispatch 之后改变的state&apos;, store.getState())</span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>可以看到 state 改变了，reducer 里面 return 的一定要是一个新的对象，对比前后不同的 state 来做数据更新<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7e72b9433fdb3ecc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>store 还有个方法 subscribe，这个接受一个回调函数，在 state 变化的时候执行，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">···</span><br><span class=\"line\">const store = createStore(reducer, initialState)</span><br><span class=\"line\"></span><br><span class=\"line\">//console.log(store)</span><br><span class=\"line\">//console.log(store.getState())</span><br><span class=\"line\">store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">//console.log(&apos;dispatch 之后改变的state&apos;, store.getState())</span><br><span class=\"line\">store.subscribe(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;执行subscribe回调&apos;, store.getState())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-119c0110f85bc4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>可以看到在第二次 dispatch 的时候，subscribe 执行了。</p>\n<p>####Redux 中的 reducer<br>reducer 是一个纯粹的 JavaScript 方法，接收 state 和 action 作为参数，根据 action 对象里的 type 属性来操作 state，返回一个新的 state 对象（return { …state, count: action.count + 1 }）。reducer 应该是一个纯粹的方法，不应该有副作用，不应该依赖 reducer 函数外部的变量来更新 state，而是应该将变量放到 state 对象中。<br>根据不同的模块，可以写多个 reducer，然后通过 combineReducers 进行合并。</p>\n<p>现在再写一个 user 的 reducer，然后与 counter 的 reducer 合并，代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">import &#123; createStore, combineReducers &#125; from &apos;redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//user模块</span><br><span class=\"line\">const userInitialState = &#123;</span><br><span class=\"line\">    username: &apos;john&apos;,</span><br><span class=\"line\">    age: 28,</span><br><span class=\"line\">    address: &apos;shanghai&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function counterReducer(state = initialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: state.count + 1 &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const UPDATE_USERNAME = &apos;UPDATE_USERNAME&apos;</span><br><span class=\"line\">function userReducer(state = userInitialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case UPDATE_USERNAME:</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                username: action.newName</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//combineReducers来合并counter 和 user</span><br><span class=\"line\">const allReducers = combineReducers(&#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">    user: userReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//将合并的reducer传给store，传入的初始状态也要合并</span><br><span class=\"line\">const store = createStore(allReducers, &#123;</span><br><span class=\"line\">    counter: initialState,</span><br><span class=\"line\">    user: userInitialState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">store.dispatch(&#123; type: UPDATE_USERNAME, newName: &apos;lilei&apos; &#125;)</span><br><span class=\"line\">console.log(&apos;合并的state&apos;, store.getState())</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p>运行代码，可以看到，state 被合并在一起了<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-5018e7c683816a6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####Redux 中的 action<br>action 就是一个普通对象，对象有个 type 属性，来表明这一次的操作是什么，还有其他的普通属性。可以使用方法来创建一个 action，返回一个对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore, combineReducers &#125; from &apos;redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//user模块</span><br><span class=\"line\">const userInitialState = &#123;</span><br><span class=\"line\">    username: &apos;john&apos;,</span><br><span class=\"line\">    age: 28,</span><br><span class=\"line\">    address: &apos;shanghai&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function counterReducer(state = initialState, action)&#123;</span><br><span class=\"line\">    // console.log(state, action)</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: action.num + 1 &#125;  //用传进来的action.num来设置count</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const UPDATE_USERNAME = &apos;UPDATE_USERNAME&apos;</span><br><span class=\"line\">function userReducer(state = userInitialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case UPDATE_USERNAME:</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                username: action.newName</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const allReducers = combineReducers(&#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">    user: userReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const store = createStore(allReducers, &#123;</span><br><span class=\"line\">    counter: initialState,</span><br><span class=\"line\">    user: userInitialState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//创建一个add函数，返回action</span><br><span class=\"line\">function add(num)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: ADD,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">store.dispatch(add(3))</span><br><span class=\"line\">store.dispatch(&#123; type: UPDATE_USERNAME, newName: &apos;lilei&apos; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;合并的state&apos;, store.getState())</span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-573416b9297583ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>可以看到打印的数据 count 是4 了；</p>\n<p>#####异步的action<br>使用 redux-thunk 插件来实现，通过 redux 的 applyMiddleWare 来使用中间件，将applyMiddleWare(ReduxThunk) 作为 store 第三个参数传入，就可以使用异步的 action 了；<br>安装 redux-thunk，它返回一个执行异步调度的函数，用于延迟动作的发送，内部函数接收 store 的 dispatch<br>和 getState 作为参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux-thunk --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>实现一个异步的 action，asyncAdd 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore, combineReducers, applyMiddleware &#125; from &apos;redux&apos;</span><br><span class=\"line\">import ReduxThunk from &apos;redux-thunk&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//user模块</span><br><span class=\"line\">const userInitialState = &#123;</span><br><span class=\"line\">    username: &apos;john&apos;,</span><br><span class=\"line\">    age: 28,</span><br><span class=\"line\">    address: &apos;shanghai&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function counterReducer(state = initialState, action)&#123;</span><br><span class=\"line\">    // console.log(state, action)</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: action.num + 1 &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const UPDATE_USERNAME = &apos;UPDATE_USERNAME&apos;</span><br><span class=\"line\">function userReducer(state = userInitialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case UPDATE_USERNAME:</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                username: action.newName</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const allReducers = combineReducers(&#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">    user: userReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const store = createStore(allReducers, &#123;</span><br><span class=\"line\">    counter: initialState,</span><br><span class=\"line\">    user: userInitialState</span><br><span class=\"line\">&#125;, applyMiddleware(ReduxThunk))</span><br><span class=\"line\"></span><br><span class=\"line\">function add(num)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: ADD,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现一个异步的 action creators</span><br><span class=\"line\">function asyncAdd()&#123;</span><br><span class=\"line\">    return (dispatch, getState) =&gt; &#123;</span><br><span class=\"line\">        new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">            resolve(5)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then((res) =&gt; &#123;</span><br><span class=\"line\">            dispatch(add(res))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(() =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;state changed:&apos;, getState())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">store.dispatch(add(3))</span><br><span class=\"line\">store.dispatch(asyncAdd())</span><br><span class=\"line\">store.dispatch(&#123; type: UPDATE_USERNAME, newName: &apos;lilei&apos; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-46213915c185376b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>thunk 做的就是将 dispatch, getState 传入，在 dispatch 之后，异步返回之后拿到最新的 state</p>\n<p>####react-redux 连接 React 和 Redux<br>react-redux 是 React 官方指定的 Redux 插件，它允许 React 组件可以从 Redux 的 store 中读取数据，并且可以分发 action 到 store 去更新数据。<br>安装 react-redux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-redux --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>react-redux 提供了 Provider 来使 redux 的 store 可以用到应用程序中，还提供了 connect 方法连接组件和 store<br>实例代码如下，将 Layout 组件用 Provider 包起来，传入 store</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Layout/Layout.js</span><br><span class=\"line\">import &#123; hot &#125; from &apos;react-hot-loader/root&apos;</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import store from &apos;../../components/Todolist/store.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Layout, Menu, Breadcrumb, Icon &#125; from &apos;antd&apos;</span><br><span class=\"line\">import Header from &apos;../Header/Header&apos;</span><br><span class=\"line\">import Footer from &apos;../Footer/Footer&apos;</span><br><span class=\"line\">import &apos;./layout.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; Content, Sider &#125; = Layout</span><br><span class=\"line\">const &#123; SubMenu &#125; = Menu</span><br><span class=\"line\"></span><br><span class=\"line\">class LayoutContainer extends React.Component &#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">        collapsed: false,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onCollapse = collapsed =&gt; &#123;</span><br><span class=\"line\">        console.log(collapsed);</span><br><span class=\"line\">        this.setState(&#123; collapsed &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">                &lt;Layout style=&#123;&#123; minHeight: &apos;100vh&apos; &#125;&#125;&gt;</span><br><span class=\"line\">                    &lt;Header /&gt;           </span><br><span class=\"line\">                    &lt;Layout&gt;</span><br><span class=\"line\">                        ···</span><br><span class=\"line\">                    &lt;/Layout&gt;</span><br><span class=\"line\">                &lt;/Layout&gt;</span><br><span class=\"line\">            &lt;/Provider&gt;</span><br><span class=\"line\">            </span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default hot(LayoutContainer)</span><br></pre></td></tr></table></figure>\n\n<p>然后 connect Header 组件，connect 接收两个参数 <code>mapStateToProps</code>，<code>mapDispatchToProps</code>；</p>\n<ul>\n<li><code>mapStateToProps</code>：每次 store 中的 state 改变时都会被调用，接收参数为整个的 state, 返回 React 组件所需的数据对象；</li>\n<li><code>mapDispatchToProps</code>：此参数可以是函数，也可以是对象。如果参数是函数，参数为 dispatch，返回一个对象，对象里面的属性的类型是函数，此函数通过 dispatch 方法来 dispatch actions，它在组件创建的时候调用一次。<br>如果参数是对象，这个对象是一个 action creators，每一个 action creator 都会进入 props 函数，在调用的时候自动 dispatch action<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Header/Header.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Layout, Button &#125; from &apos;antd&apos;</span><br><span class=\"line\">const &#123; Header &#125; = Layout</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./header.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">/*export default () =&gt; &#123;</span><br><span class=\"line\">    //const [ username, setUsername ] = useState(&apos;john&apos;);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Header className=&quot;app-header&quot;&gt;</span><br><span class=\"line\">            压制系统</span><br><span class=\"line\">        &lt;/Header&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">const HeaderBar = (&#123; counter, username &#125;) =&gt; &#123;</span><br><span class=\"line\">    return &lt;Header&gt;counter： &#123;counter&#125;，username：&#123;username&#125;&lt;/Header&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//mapStateToProps函数返回一个对象,将这个对象作为props传给Header组件</span><br><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        counter: state.counter.count,</span><br><span class=\"line\">        username: state.user.username</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = () =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(</span><br><span class=\"line\">    mapStateToProps,</span><br><span class=\"line\">    mapDispatchToProps</span><br><span class=\"line\">)(HeaderBar)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>然后看到页面正确获取了 state;<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-5f043705f714e4a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>现在给 Header 组件添加一个按钮用来改变 state，然后更新 state 到视图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Header/Header.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Layout, Button &#125; from &apos;antd&apos;</span><br><span class=\"line\">const &#123; Header &#125; = Layout</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./header.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">/*export default () =&gt; &#123;</span><br><span class=\"line\">    //const [ username, setUsername ] = useState(&apos;john&apos;);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Header className=&quot;app-header&quot;&gt;</span><br><span class=\"line\">            压制系统</span><br><span class=\"line\">        &lt;/Header&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">const HeaderBar = (&#123; counter, username, rename, add &#125;) =&gt; &#123;</span><br><span class=\"line\">    return &lt;Header&gt;</span><br><span class=\"line\">        counter： &#123;counter&#125;，username：&#123;username&#125;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; add(counter + counter)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">        &lt;input value=&#123;username&#125; onChange=&#123;(e) =&gt; rename(e.target.value)&#125;/&gt;</span><br><span class=\"line\">    &lt;/Header&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//mapStateToProps, 在每次store中的state改变时都会被调用，接收参数为整个的state, 返回Header组件所需的数据对象，这个对象会作为props传给Header组件</span><br><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        counter: state.counter.count,</span><br><span class=\"line\">        username: state.user.username</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = (dispatch) =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        add: (num) =&gt; dispatch(&#123; type: &apos;ADD&apos;, num&#125;),</span><br><span class=\"line\">        rename: (newName) =&gt; dispatch(&#123;type: &apos;UPDATE_USERNAME&apos;, newName&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Connecting the Components</span><br><span class=\"line\">export default connect(</span><br><span class=\"line\">    mapStateToProps,</span><br><span class=\"line\">    mapDispatchToProps</span><br><span class=\"line\">)(HeaderBar)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 input 中输入内容，username 改变了，点击 add 按钮，counter 也改变了。</p>\n<p>参考：<br><a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">https://redux.js.org/introduction/getting-started</a><br><a href=\"https://www.redux.org.cn/docs/introduction/Ecosystem.html\" target=\"_blank\" rel=\"noopener\">https://www.redux.org.cn/docs/introduction/Ecosystem.html</a><br><a href=\"https://react-redux.js.org/introduction/basic-tutorial\" target=\"_blank\" rel=\"noopener\">https://react-redux.js.org/introduction/basic-tutorial</a><br><a href=\"https://www.npmjs.com/package/redux-thunk\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/redux-thunk</a><br><a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"noopener\">https://react-redux.js.org/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####动机<br>随着 JavaScript 单页应用开发越来越复杂，Javascript 需要管理很多 state（状态）。这些状态可能包括服务器响应、缓存数据、本地生产尚未持久化到服务器的数据，也包括 UI 状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等。</p>\n<p>管理不断变化的 state 很困难。如果一个 model 的变化的会引起另一个 model 的变化，那么当 view 变化时，就可能引起对应 model 以及其他 model 的变化，依次地，可能引起另一个 view 的变化。这时候的 state 就变得不受控制，不可预测，就会出现很多 bug，调试起来就很找到问题所在。</p>\n<p>所以 Redux 就是用来解决复杂 state 多变，不可预测等问题。</p>\n<p>####什么是 Redux</p>\n<p>Redux 是 JavaScript 应用程序的可预测的状态容器。它将所有的状态集中到一起管理。页面不直接修改state，而是发一个 action 给到 reducer 来操作 state，并将新的 state 通知给 store，store 来进行页面的状态更新。</p>\n<p>#####Redux的三个基本原则：</p>\n<ul>\n<li>单一数据源（整个应用的 state 被存储在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中）</li>\n<li>State 是只读的（唯一改变 state 的方法就是触发 action，action 就是一个普通的 JavaScript 对象）</li>\n<li>使用纯函数来执行（通过编写 reducer，来描述 action 如何改变 state tree，reducer 就是一个纯函数，接收 state 和 action 两个参数，最后返回新的 state）</li>\n</ul>\n<p>####创建一个 store</p>\n<ul>\n<li><p>首先安装 redux，redux 是独立于 UI 框架的工具，不依赖任何前端框架</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux --save-dev</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 components 目录下创建一个 TodoList 目录，在此目录下创建一个 store.js，写入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function reducer(state = initialState, action)&#123;</span><br><span class=\"line\">    console.log(state, action)</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: state.count + 1 &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const store = createStore(reducer, initialState)</span><br><span class=\"line\">console.log(store)</span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将 store.js 引入 Layout.js，来看一下 store 是什么样子的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Layout/Layout.js</span><br><span class=\"line\">···</span><br><span class=\"line\">+ import store from &apos;../../components/TodoList/store.js&apos;</span><br><span class=\"line\">···</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行代码，打开控制台可以看到打印出来的 store<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-230a3a67a3eee35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>可以看到 store 对象，里面有 dispatch，getState，subscribe 等方法，上面的 state 是初始化 store 的时候默认会执行一遍 reducer 方法，传入 state，action 是传入的 redux INIT 事件，getState 方法获取最新的完整的 state 对象。</p>\n</li>\n<li><p>接下来更新 store 里面的数据，通过 store.dispatch 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">···</span><br><span class=\"line\">+ store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">+ console.log(&apos;dispatch 之后改变的state&apos;, store.getState())</span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>可以看到 state 改变了，reducer 里面 return 的一定要是一个新的对象，对比前后不同的 state 来做数据更新<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7e72b9433fdb3ecc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>store 还有个方法 subscribe，这个接受一个回调函数，在 state 变化的时候执行，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">···</span><br><span class=\"line\">const store = createStore(reducer, initialState)</span><br><span class=\"line\"></span><br><span class=\"line\">//console.log(store)</span><br><span class=\"line\">//console.log(store.getState())</span><br><span class=\"line\">store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">//console.log(&apos;dispatch 之后改变的state&apos;, store.getState())</span><br><span class=\"line\">store.subscribe(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;执行subscribe回调&apos;, store.getState())</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-119c0110f85bc4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>可以看到在第二次 dispatch 的时候，subscribe 执行了。</p>\n<p>####Redux 中的 reducer<br>reducer 是一个纯粹的 JavaScript 方法，接收 state 和 action 作为参数，根据 action 对象里的 type 属性来操作 state，返回一个新的 state 对象（return { …state, count: action.count + 1 }）。reducer 应该是一个纯粹的方法，不应该有副作用，不应该依赖 reducer 函数外部的变量来更新 state，而是应该将变量放到 state 对象中。<br>根据不同的模块，可以写多个 reducer，然后通过 combineReducers 进行合并。</p>\n<p>现在再写一个 user 的 reducer，然后与 counter 的 reducer 合并，代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/TodoList/store.js</span><br><span class=\"line\">import &#123; createStore, combineReducers &#125; from &apos;redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//user模块</span><br><span class=\"line\">const userInitialState = &#123;</span><br><span class=\"line\">    username: &apos;john&apos;,</span><br><span class=\"line\">    age: 28,</span><br><span class=\"line\">    address: &apos;shanghai&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function counterReducer(state = initialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: state.count + 1 &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const UPDATE_USERNAME = &apos;UPDATE_USERNAME&apos;</span><br><span class=\"line\">function userReducer(state = userInitialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case UPDATE_USERNAME:</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                username: action.newName</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//combineReducers来合并counter 和 user</span><br><span class=\"line\">const allReducers = combineReducers(&#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">    user: userReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//将合并的reducer传给store，传入的初始状态也要合并</span><br><span class=\"line\">const store = createStore(allReducers, &#123;</span><br><span class=\"line\">    counter: initialState,</span><br><span class=\"line\">    user: userInitialState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">store.dispatch(&#123; type: UPDATE_USERNAME, newName: &apos;lilei&apos; &#125;)</span><br><span class=\"line\">console.log(&apos;合并的state&apos;, store.getState())</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p>运行代码，可以看到，state 被合并在一起了<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-5018e7c683816a6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####Redux 中的 action<br>action 就是一个普通对象，对象有个 type 属性，来表明这一次的操作是什么，还有其他的普通属性。可以使用方法来创建一个 action，返回一个对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore, combineReducers &#125; from &apos;redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//user模块</span><br><span class=\"line\">const userInitialState = &#123;</span><br><span class=\"line\">    username: &apos;john&apos;,</span><br><span class=\"line\">    age: 28,</span><br><span class=\"line\">    address: &apos;shanghai&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function counterReducer(state = initialState, action)&#123;</span><br><span class=\"line\">    // console.log(state, action)</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: action.num + 1 &#125;  //用传进来的action.num来设置count</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const UPDATE_USERNAME = &apos;UPDATE_USERNAME&apos;</span><br><span class=\"line\">function userReducer(state = userInitialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case UPDATE_USERNAME:</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                username: action.newName</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const allReducers = combineReducers(&#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">    user: userReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const store = createStore(allReducers, &#123;</span><br><span class=\"line\">    counter: initialState,</span><br><span class=\"line\">    user: userInitialState</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//创建一个add函数，返回action</span><br><span class=\"line\">function add(num)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: ADD,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">store.dispatch(add(3))</span><br><span class=\"line\">store.dispatch(&#123; type: UPDATE_USERNAME, newName: &apos;lilei&apos; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(&apos;合并的state&apos;, store.getState())</span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-573416b9297583ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>可以看到打印的数据 count 是4 了；</p>\n<p>#####异步的action<br>使用 redux-thunk 插件来实现，通过 redux 的 applyMiddleWare 来使用中间件，将applyMiddleWare(ReduxThunk) 作为 store 第三个参数传入，就可以使用异步的 action 了；<br>安装 redux-thunk，它返回一个执行异步调度的函数，用于延迟动作的发送，内部函数接收 store 的 dispatch<br>和 getState 作为参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install redux-thunk --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>实现一个异步的 action，asyncAdd 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; createStore, combineReducers, applyMiddleware &#125; from &apos;redux&apos;</span><br><span class=\"line\">import ReduxThunk from &apos;redux-thunk&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const initialState = &#123;</span><br><span class=\"line\">    count: 0</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//user模块</span><br><span class=\"line\">const userInitialState = &#123;</span><br><span class=\"line\">    username: &apos;john&apos;,</span><br><span class=\"line\">    age: 28,</span><br><span class=\"line\">    address: &apos;shanghai&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const ADD = &apos;ADD&apos;</span><br><span class=\"line\">function counterReducer(state = initialState, action)&#123;</span><br><span class=\"line\">    // console.log(state, action)</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case ADD:</span><br><span class=\"line\">            return &#123; count: action.num + 1 &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const UPDATE_USERNAME = &apos;UPDATE_USERNAME&apos;</span><br><span class=\"line\">function userReducer(state = userInitialState, action)&#123;</span><br><span class=\"line\">    switch(action.type)&#123;</span><br><span class=\"line\">        case UPDATE_USERNAME:</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                ...state,</span><br><span class=\"line\">                username: action.newName</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const allReducers = combineReducers(&#123;</span><br><span class=\"line\">    counter: counterReducer,</span><br><span class=\"line\">    user: userReducer</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const store = createStore(allReducers, &#123;</span><br><span class=\"line\">    counter: initialState,</span><br><span class=\"line\">    user: userInitialState</span><br><span class=\"line\">&#125;, applyMiddleware(ReduxThunk))</span><br><span class=\"line\"></span><br><span class=\"line\">function add(num)&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: ADD,</span><br><span class=\"line\">        num</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//实现一个异步的 action creators</span><br><span class=\"line\">function asyncAdd()&#123;</span><br><span class=\"line\">    return (dispatch, getState) =&gt; &#123;</span><br><span class=\"line\">        new Promise((resolve, reject) =&gt; &#123;</span><br><span class=\"line\">            resolve(5)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then((res) =&gt; &#123;</span><br><span class=\"line\">            dispatch(add(res))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(() =&gt; &#123;</span><br><span class=\"line\">            console.log(&apos;state changed:&apos;, getState())</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//store.dispatch(&#123; type: ADD &#125;)</span><br><span class=\"line\">store.dispatch(add(3))</span><br><span class=\"line\">store.dispatch(asyncAdd())</span><br><span class=\"line\">store.dispatch(&#123; type: UPDATE_USERNAME, newName: &apos;lilei&apos; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-46213915c185376b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>thunk 做的就是将 dispatch, getState 传入，在 dispatch 之后，异步返回之后拿到最新的 state</p>\n<p>####react-redux 连接 React 和 Redux<br>react-redux 是 React 官方指定的 Redux 插件，它允许 React 组件可以从 Redux 的 store 中读取数据，并且可以分发 action 到 store 去更新数据。<br>安装 react-redux</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-redux --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>react-redux 提供了 Provider 来使 redux 的 store 可以用到应用程序中，还提供了 connect 方法连接组件和 store<br>实例代码如下，将 Layout 组件用 Provider 包起来，传入 store</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Layout/Layout.js</span><br><span class=\"line\">import &#123; hot &#125; from &apos;react-hot-loader/root&apos;</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;</span><br><span class=\"line\">import store from &apos;../../components/Todolist/store.js&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Layout, Menu, Breadcrumb, Icon &#125; from &apos;antd&apos;</span><br><span class=\"line\">import Header from &apos;../Header/Header&apos;</span><br><span class=\"line\">import Footer from &apos;../Footer/Footer&apos;</span><br><span class=\"line\">import &apos;./layout.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">const &#123; Content, Sider &#125; = Layout</span><br><span class=\"line\">const &#123; SubMenu &#125; = Menu</span><br><span class=\"line\"></span><br><span class=\"line\">class LayoutContainer extends React.Component &#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">        collapsed: false,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onCollapse = collapsed =&gt; &#123;</span><br><span class=\"line\">        console.log(collapsed);</span><br><span class=\"line\">        this.setState(&#123; collapsed &#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">                &lt;Layout style=&#123;&#123; minHeight: &apos;100vh&apos; &#125;&#125;&gt;</span><br><span class=\"line\">                    &lt;Header /&gt;           </span><br><span class=\"line\">                    &lt;Layout&gt;</span><br><span class=\"line\">                        ···</span><br><span class=\"line\">                    &lt;/Layout&gt;</span><br><span class=\"line\">                &lt;/Layout&gt;</span><br><span class=\"line\">            &lt;/Provider&gt;</span><br><span class=\"line\">            </span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default hot(LayoutContainer)</span><br></pre></td></tr></table></figure>\n\n<p>然后 connect Header 组件，connect 接收两个参数 <code>mapStateToProps</code>，<code>mapDispatchToProps</code>；</p>\n<ul>\n<li><code>mapStateToProps</code>：每次 store 中的 state 改变时都会被调用，接收参数为整个的 state, 返回 React 组件所需的数据对象；</li>\n<li><code>mapDispatchToProps</code>：此参数可以是函数，也可以是对象。如果参数是函数，参数为 dispatch，返回一个对象，对象里面的属性的类型是函数，此函数通过 dispatch 方法来 dispatch actions，它在组件创建的时候调用一次。<br>如果参数是对象，这个对象是一个 action creators，每一个 action creator 都会进入 props 函数，在调用的时候自动 dispatch action<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Header/Header.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Layout, Button &#125; from &apos;antd&apos;</span><br><span class=\"line\">const &#123; Header &#125; = Layout</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./header.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">/*export default () =&gt; &#123;</span><br><span class=\"line\">    //const [ username, setUsername ] = useState(&apos;john&apos;);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Header className=&quot;app-header&quot;&gt;</span><br><span class=\"line\">            压制系统</span><br><span class=\"line\">        &lt;/Header&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">const HeaderBar = (&#123; counter, username &#125;) =&gt; &#123;</span><br><span class=\"line\">    return &lt;Header&gt;counter： &#123;counter&#125;，username：&#123;username&#125;&lt;/Header&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//mapStateToProps函数返回一个对象,将这个对象作为props传给Header组件</span><br><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        counter: state.counter.count,</span><br><span class=\"line\">        username: state.user.username</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = () =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default connect(</span><br><span class=\"line\">    mapStateToProps,</span><br><span class=\"line\">    mapDispatchToProps</span><br><span class=\"line\">)(HeaderBar)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>然后看到页面正确获取了 state;<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-5f043705f714e4a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>现在给 Header 组件添加一个按钮用来改变 state，然后更新 state 到视图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/Header/Header.js</span><br><span class=\"line\">import React, &#123; useState &#125; from &apos;react&apos;</span><br><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; Layout, Button &#125; from &apos;antd&apos;</span><br><span class=\"line\">const &#123; Header &#125; = Layout</span><br><span class=\"line\"></span><br><span class=\"line\">import &apos;./header.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">/*export default () =&gt; &#123;</span><br><span class=\"line\">    //const [ username, setUsername ] = useState(&apos;john&apos;);</span><br><span class=\"line\">    return (</span><br><span class=\"line\">        &lt;Header className=&quot;app-header&quot;&gt;</span><br><span class=\"line\">            压制系统</span><br><span class=\"line\">        &lt;/Header&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\"></span><br><span class=\"line\">const HeaderBar = (&#123; counter, username, rename, add &#125;) =&gt; &#123;</span><br><span class=\"line\">    return &lt;Header&gt;</span><br><span class=\"line\">        counter： &#123;counter&#125;，username：&#123;username&#125;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; add(counter + counter)&#125;&gt;add&lt;/button&gt;</span><br><span class=\"line\">        &lt;input value=&#123;username&#125; onChange=&#123;(e) =&gt; rename(e.target.value)&#125;/&gt;</span><br><span class=\"line\">    &lt;/Header&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//mapStateToProps, 在每次store中的state改变时都会被调用，接收参数为整个的state, 返回Header组件所需的数据对象，这个对象会作为props传给Header组件</span><br><span class=\"line\">const mapStateToProps = (state) =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        counter: state.counter.count,</span><br><span class=\"line\">        username: state.user.username</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mapDispatchToProps = (dispatch) =&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        add: (num) =&gt; dispatch(&#123; type: &apos;ADD&apos;, num&#125;),</span><br><span class=\"line\">        rename: (newName) =&gt; dispatch(&#123;type: &apos;UPDATE_USERNAME&apos;, newName&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Connecting the Components</span><br><span class=\"line\">export default connect(</span><br><span class=\"line\">    mapStateToProps,</span><br><span class=\"line\">    mapDispatchToProps</span><br><span class=\"line\">)(HeaderBar)</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 input 中输入内容，username 改变了，点击 add 按钮，counter 也改变了。</p>\n<p>参考：<br><a href=\"https://redux.js.org/introduction/getting-started\" target=\"_blank\" rel=\"noopener\">https://redux.js.org/introduction/getting-started</a><br><a href=\"https://www.redux.org.cn/docs/introduction/Ecosystem.html\" target=\"_blank\" rel=\"noopener\">https://www.redux.org.cn/docs/introduction/Ecosystem.html</a><br><a href=\"https://react-redux.js.org/introduction/basic-tutorial\" target=\"_blank\" rel=\"noopener\">https://react-redux.js.org/introduction/basic-tutorial</a><br><a href=\"https://www.npmjs.com/package/redux-thunk\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/redux-thunk</a><br><a href=\"https://react-redux.js.org/\" target=\"_blank\" rel=\"noopener\">https://react-redux.js.org/</a></p>\n"},{"title":"webpack-React中配置-TypeScript","_content":"undefined","source":"_posts/webpack-React中配置-TypeScript.md","raw":"---\ntitle: webpack-React中配置-TypeScript\n---\nundefined","slug":"webpack-React中配置-TypeScript","published":1,"date":"2019-09-13T02:18:13.165Z","updated":"2019-09-13T09:08:38.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73r000mwsl68avwpss9","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"数据存储：cookie、sessionStorage、localStorage、IndexedDB","_content":"undefined","source":"_posts/数据存储：cookie、sessionStorage、localStorage、IndexedDB.md","raw":"---\ntitle: 数据存储：cookie、sessionStorage、localStorage、IndexedDB\n---\nundefined","slug":"数据存储：cookie、sessionStorage、localStorage、IndexedDB","published":1,"date":"2019-09-13T02:18:11.727Z","updated":"2019-09-13T09:08:37.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73t000nwsl63u7he00e","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"正则表达式","_content":"undefined","source":"_posts/正则表达式.md","raw":"---\ntitle: 正则表达式\n---\nundefined","slug":"正则表达式","published":1,"date":"2019-09-13T02:18:13.132Z","updated":"2019-09-13T09:08:33.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73u000owsl604fatsp6","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"ES6-promise版的Jsonp封装","_content":"undefined","source":"_posts/ES6-promise版的Jsonp封装.md","raw":"---\ntitle: ES6-promise版的Jsonp封装\n---\nundefined","slug":"ES6-promise版的Jsonp封装","published":1,"date":"2019-09-13T02:18:11.734Z","updated":"2019-09-13T09:08:38.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73v000pwsl6bjqletdi","content":"<p>undefined</p>\n","site":{"data":{}},"excerpt":"","more":"<p>undefined</p>\n"},{"title":"（Node-mongo系列）Node-js操作mongoDB数据库（二）","_content":"####简介\n>MongoDB is a document database designed for ease of development and scaling。\n\n`mongoDB`是一个文档数据库，旨在简化开发和扩展.\n\n>A record in MongoDB is a document, which is a data structure composed of field and value pairs. MongoDB documents are similar to JSON objects. The values of fields may include other documents, arrays, and arrays of documents.\n\n类似其他关系型数据库，在`mongoDB`中一个记录叫做`document`，是由名称和值对组成的数据结构。类似`json`对象。\n####类比mysql关系数据库\n类比如下图所示，document 类似 一行record，connection类似一张表table；\n![](https://upload-images.jianshu.io/upload_images/5541401-207823dd8b0e1b15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####简单shell操作\n管理员身份打开`cmd`，运行`mongo`，前提是将`bin`目录写入到环境变量中。\n安装参考：https://www.jianshu.com/p/59079c9832e9\n1.显示所有数据库和正在使用的默认数据库`test`\n```\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n> db\ntest\n>\n```\n2.`use`切换数据库，没有的话新建一个数据库，新建一个`collection`,相当于关系数据库中的表，插入一条数据`db.myCollection.insertOne()`,插入多条数据`db.myCollection.insert({x:2},{x:3})`\n```\n> use myNewDatabase\nswitched to db myNewDatabase\n> db.myCollection.insertOne({x: 1})\n{\n        \"acknowledged\" : true,\n        \"insertedId\" : ObjectId(\"5cbd255be647b2c115594ba6\")\n}\n> db.myCollection.insert({x:2},{x:3})\nWriteResult({\n        \"nInserted\" : 0,\n        \"writeError\" : {\n                \"code\" : 13297,\n                \"errmsg\" : \"db already exists with different case already have:\n[myNewDataBase] trying to create [myNewDatabase]\"\n        }\n})\n```\n\n3.删除数据库`db.dropDatabase()`\n```\n> db.dropDatabase()\n{ \"dropped\" : \"myNewDatabase\", \"ok\" : 1 }\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n```\n\n####nodejs中操作mongodb\n前提是数据库服务已经启动，管理员身份打开 `cmd`\n```\nnet start mongodb  //启动服务\nnet stop mongodb  //停止服务\n```\n* ######Init初始化文件目录 \n新建一个文件夹例如`node-mongodb`，使用`npm init`初始化`package.json`，`npm install mongodb -S`\n`mongoDB`的版本是`3.2`版本，以下用`3.2`版本的写法\n新建一个`index.js`文件\n```\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n//connection url\nconst url = 'mongodb://127.0.0.1:27017';\n\n//database name\nconst dbname = 'myNewDataBase';\n\n//create new mongodbClient\nconst client = new MongoClient(url,{ useNewUrlParser: true });\n\nclient.connect((err) => {\n    assert.equal(null,err);\n    console.log('Connected successfully to server');\n    client.close();\n})\n```\n`node index.js`，数据库链接成功\n![](https://upload-images.jianshu.io/upload_images/5541401-0916651d61c55783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* #####操作数据库（insert，find，update，delete，indexes（索引））\n```\n//index.js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n//connection url\nconst url = 'mongodb://127.0.0.1:27017';\n\n//database name\nconst dbname = 'myNewDataBase';\n\n//create new mongodbClient\nconst client = new MongoClient(url,{ useNewUrlParser: true });\n\nclient.connect((err) => {\n    assert.equal(null,err);\n    console.log('Connected successfully to server');\n    //3.0版本新写法\n    const db = client.db(dbname);\n    insertDocuments(db,() => {\n        // find\n        // findDocuments(db,() => {\n        //     client.close();\n        // })\n        //update\n        // updateDocument(db,() => {\n        //     //remove\n        //     removeDocument(db,() => {\n        //         client.close();\n        //     });\n        // });\n        indexCollection(db,() => {\n            client.close();\n        })\n    })\n})\n\n//insert\nconst insertDocuments = (db,callback) => {\n    //get the document collection(相当于拿到一个表，没有的话创建一个表)\n    const collection = db.collection('myCollection');\n    collection.insertOne(\n        {a: 4}\n    ,(err,result) => {\n        assert.equal(err, null);\n        console.log(\"Inserted 3 documents into the collection\");\n        callback(result);\n    })\n}\n\n//find\nconst findDocuments = (db,callback) => {\n    const collection = db.collection('myCollection');\n    collection.find({}).toArray((err,docs) => {\n        console.log('Found the following records')\n        console.log(docs);\n        callback(docs);\n    });\n}\n\n//update\nconst updateDocument = (db,callback) => {\n    //get the document collection\n    const collection = db.collection('myCollection');\n    //update\n    collection.updateOne({a: 2},{ $set: { b: 1} },(err,result) => {\n        assert.equal(err, null);\n        console.log(\"Updated the document with the field a equal to 2\");\n        callback(result);\n    })\n}\n\n//remove\nconst removeDocument = (db,callback) => {\n    const collection = db.collection('myCollection');\n    collection.deleteOne({ a: 3},(err,result) => {\n        assert.equal(err, null);\n        console.log(\"Removed the document with the field a equal to 3\");\n        callback(result);\n    })\n}\n\n//Index a Collection\nconst indexCollection = (db,callback) => {\n    db.collection('myCollection').createIndex(\n        { \"a\": 1 },\n          null,\n          function(err, results) {\n            console.log(results);\n            callback();\n        }\n    );\n}\n```\n运行`node index.js`，显示如下结果\n```\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\nFound the following records\n[ { _id: 5cbd6ee9ef77ab2d6c4a89dd, a: 4 },\n  { _id: 5cbd747a716b2b08e463ccee, a: 4 } ]\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\nUpdated the document with the field a equal to 2\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\nUpdated the document with the field a equal to 2\nRemoved the document with the field a equal to 3\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\na_\n```\n参考：\nhttps://docs.mongodb.com/manual/mongo/#start-the-mongo-shell-and-connect-to-mongodb\nhttp://www.mongoing.com/archives/3818\nhttp://mongodb.github.io/node-mongodb-native/3.2/quick-start/quick-start/\n","source":"_posts/（Node-mongo系列）Node-js操作mongoDB数据库（二）.md","raw":"---\ntitle: （Node-mongo系列）Node-js操作mongoDB数据库（二）\n---\n####简介\n>MongoDB is a document database designed for ease of development and scaling。\n\n`mongoDB`是一个文档数据库，旨在简化开发和扩展.\n\n>A record in MongoDB is a document, which is a data structure composed of field and value pairs. MongoDB documents are similar to JSON objects. The values of fields may include other documents, arrays, and arrays of documents.\n\n类似其他关系型数据库，在`mongoDB`中一个记录叫做`document`，是由名称和值对组成的数据结构。类似`json`对象。\n####类比mysql关系数据库\n类比如下图所示，document 类似 一行record，connection类似一张表table；\n![](https://upload-images.jianshu.io/upload_images/5541401-207823dd8b0e1b15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n####简单shell操作\n管理员身份打开`cmd`，运行`mongo`，前提是将`bin`目录写入到环境变量中。\n安装参考：https://www.jianshu.com/p/59079c9832e9\n1.显示所有数据库和正在使用的默认数据库`test`\n```\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n> db\ntest\n>\n```\n2.`use`切换数据库，没有的话新建一个数据库，新建一个`collection`,相当于关系数据库中的表，插入一条数据`db.myCollection.insertOne()`,插入多条数据`db.myCollection.insert({x:2},{x:3})`\n```\n> use myNewDatabase\nswitched to db myNewDatabase\n> db.myCollection.insertOne({x: 1})\n{\n        \"acknowledged\" : true,\n        \"insertedId\" : ObjectId(\"5cbd255be647b2c115594ba6\")\n}\n> db.myCollection.insert({x:2},{x:3})\nWriteResult({\n        \"nInserted\" : 0,\n        \"writeError\" : {\n                \"code\" : 13297,\n                \"errmsg\" : \"db already exists with different case already have:\n[myNewDataBase] trying to create [myNewDatabase]\"\n        }\n})\n```\n\n3.删除数据库`db.dropDatabase()`\n```\n> db.dropDatabase()\n{ \"dropped\" : \"myNewDatabase\", \"ok\" : 1 }\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n```\n\n####nodejs中操作mongodb\n前提是数据库服务已经启动，管理员身份打开 `cmd`\n```\nnet start mongodb  //启动服务\nnet stop mongodb  //停止服务\n```\n* ######Init初始化文件目录 \n新建一个文件夹例如`node-mongodb`，使用`npm init`初始化`package.json`，`npm install mongodb -S`\n`mongoDB`的版本是`3.2`版本，以下用`3.2`版本的写法\n新建一个`index.js`文件\n```\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n//connection url\nconst url = 'mongodb://127.0.0.1:27017';\n\n//database name\nconst dbname = 'myNewDataBase';\n\n//create new mongodbClient\nconst client = new MongoClient(url,{ useNewUrlParser: true });\n\nclient.connect((err) => {\n    assert.equal(null,err);\n    console.log('Connected successfully to server');\n    client.close();\n})\n```\n`node index.js`，数据库链接成功\n![](https://upload-images.jianshu.io/upload_images/5541401-0916651d61c55783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n* #####操作数据库（insert，find，update，delete，indexes（索引））\n```\n//index.js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n//connection url\nconst url = 'mongodb://127.0.0.1:27017';\n\n//database name\nconst dbname = 'myNewDataBase';\n\n//create new mongodbClient\nconst client = new MongoClient(url,{ useNewUrlParser: true });\n\nclient.connect((err) => {\n    assert.equal(null,err);\n    console.log('Connected successfully to server');\n    //3.0版本新写法\n    const db = client.db(dbname);\n    insertDocuments(db,() => {\n        // find\n        // findDocuments(db,() => {\n        //     client.close();\n        // })\n        //update\n        // updateDocument(db,() => {\n        //     //remove\n        //     removeDocument(db,() => {\n        //         client.close();\n        //     });\n        // });\n        indexCollection(db,() => {\n            client.close();\n        })\n    })\n})\n\n//insert\nconst insertDocuments = (db,callback) => {\n    //get the document collection(相当于拿到一个表，没有的话创建一个表)\n    const collection = db.collection('myCollection');\n    collection.insertOne(\n        {a: 4}\n    ,(err,result) => {\n        assert.equal(err, null);\n        console.log(\"Inserted 3 documents into the collection\");\n        callback(result);\n    })\n}\n\n//find\nconst findDocuments = (db,callback) => {\n    const collection = db.collection('myCollection');\n    collection.find({}).toArray((err,docs) => {\n        console.log('Found the following records')\n        console.log(docs);\n        callback(docs);\n    });\n}\n\n//update\nconst updateDocument = (db,callback) => {\n    //get the document collection\n    const collection = db.collection('myCollection');\n    //update\n    collection.updateOne({a: 2},{ $set: { b: 1} },(err,result) => {\n        assert.equal(err, null);\n        console.log(\"Updated the document with the field a equal to 2\");\n        callback(result);\n    })\n}\n\n//remove\nconst removeDocument = (db,callback) => {\n    const collection = db.collection('myCollection');\n    collection.deleteOne({ a: 3},(err,result) => {\n        assert.equal(err, null);\n        console.log(\"Removed the document with the field a equal to 3\");\n        callback(result);\n    })\n}\n\n//Index a Collection\nconst indexCollection = (db,callback) => {\n    db.collection('myCollection').createIndex(\n        { \"a\": 1 },\n          null,\n          function(err, results) {\n            console.log(results);\n            callback();\n        }\n    );\n}\n```\n运行`node index.js`，显示如下结果\n```\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\nFound the following records\n[ { _id: 5cbd6ee9ef77ab2d6c4a89dd, a: 4 },\n  { _id: 5cbd747a716b2b08e463ccee, a: 4 } ]\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\nUpdated the document with the field a equal to 2\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\nUpdated the document with the field a equal to 2\nRemoved the document with the field a equal to 3\n\nE:\\workCode\\node-mongodb>node index.js\nConnected successfully to server\nInserted 3 documents into the collection\na_\n```\n参考：\nhttps://docs.mongodb.com/manual/mongo/#start-the-mongo-shell-and-connect-to-mongodb\nhttp://www.mongoing.com/archives/3818\nhttp://mongodb.github.io/node-mongodb-native/3.2/quick-start/quick-start/\n","slug":"（Node-mongo系列）Node-js操作mongoDB数据库（二）","published":1,"date":"2019-09-13T02:18:12.143Z","updated":"2019-09-13T09:08:33.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73x000qwsl6bq7axo5k","content":"<p>####简介</p>\n<blockquote>\n<p>MongoDB is a document database designed for ease of development and scaling。</p>\n</blockquote>\n<p><code>mongoDB</code>是一个文档数据库，旨在简化开发和扩展.</p>\n<blockquote>\n<p>A record in MongoDB is a document, which is a data structure composed of field and value pairs. MongoDB documents are similar to JSON objects. The values of fields may include other documents, arrays, and arrays of documents.</p>\n</blockquote>\n<p>类似其他关系型数据库，在<code>mongoDB</code>中一个记录叫做<code>document</code>，是由名称和值对组成的数据结构。类似<code>json</code>对象。</p>\n<p>####类比mysql关系数据库<br>类比如下图所示，document 类似 一行record，connection类似一张表table；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-207823dd8b0e1b15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####简单shell操作<br>管理员身份打开<code>cmd</code>，运行<code>mongo</code>，前提是将<code>bin</code>目录写入到环境变量中。<br>安装参考：<a href=\"https://www.jianshu.com/p/59079c9832e9\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/59079c9832e9</a><br>1.显示所有数据库和正在使用的默认数据库<code>test</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">test</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.<code>use</code>切换数据库，没有的话新建一个数据库，新建一个<code>collection</code>,相当于关系数据库中的表，插入一条数据<code>db.myCollection.insertOne()</code>,插入多条数据<code>db.myCollection.insert({x:2},{x:3})</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use myNewDatabase</span><br><span class=\"line\">switched to db myNewDatabase</span><br><span class=\"line\">&gt; db.myCollection.insertOne(&#123;x: 1&#125;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;acknowledged&quot; : true,</span><br><span class=\"line\">        &quot;insertedId&quot; : ObjectId(&quot;5cbd255be647b2c115594ba6&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.myCollection.insert(&#123;x:2&#125;,&#123;x:3&#125;)</span><br><span class=\"line\">WriteResult(&#123;</span><br><span class=\"line\">        &quot;nInserted&quot; : 0,</span><br><span class=\"line\">        &quot;writeError&quot; : &#123;</span><br><span class=\"line\">                &quot;code&quot; : 13297,</span><br><span class=\"line\">                &quot;errmsg&quot; : &quot;db already exists with different case already have:</span><br><span class=\"line\">[myNewDataBase] trying to create [myNewDatabase]&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>3.删除数据库<code>db.dropDatabase()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.dropDatabase()</span><br><span class=\"line\">&#123; &quot;dropped&quot; : &quot;myNewDatabase&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br></pre></td></tr></table></figure>\n\n<p>####nodejs中操作mongodb<br>前提是数据库服务已经启动，管理员身份打开 <code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mongodb  //启动服务</span><br><span class=\"line\">net stop mongodb  //停止服务</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>######Init初始化文件目录<br>新建一个文件夹例如<code>node-mongodb</code>，使用<code>npm init</code>初始化<code>package.json</code>，<code>npm install mongodb -S</code><br><code>mongoDB</code>的版本是<code>3.2</code>版本，以下用<code>3.2</code>版本的写法<br>新建一个<code>index.js</code>文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MongoClient = require(&apos;mongodb&apos;).MongoClient;</span><br><span class=\"line\">const assert = require(&apos;assert&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//connection url</span><br><span class=\"line\">const url = &apos;mongodb://127.0.0.1:27017&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//database name</span><br><span class=\"line\">const dbname = &apos;myNewDataBase&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//create new mongodbClient</span><br><span class=\"line\">const client = new MongoClient(url,&#123; useNewUrlParser: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.connect((err) =&gt; &#123;</span><br><span class=\"line\">    assert.equal(null,err);</span><br><span class=\"line\">    console.log(&apos;Connected successfully to server&apos;);</span><br><span class=\"line\">    client.close();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><code>node index.js</code>，数据库链接成功<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-0916651d61c55783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<ul>\n<li>#####操作数据库（insert，find，update，delete，indexes（索引））<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">const MongoClient = require(&apos;mongodb&apos;).MongoClient;</span><br><span class=\"line\">const assert = require(&apos;assert&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//connection url</span><br><span class=\"line\">const url = &apos;mongodb://127.0.0.1:27017&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//database name</span><br><span class=\"line\">const dbname = &apos;myNewDataBase&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//create new mongodbClient</span><br><span class=\"line\">const client = new MongoClient(url,&#123; useNewUrlParser: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.connect((err) =&gt; &#123;</span><br><span class=\"line\">    assert.equal(null,err);</span><br><span class=\"line\">    console.log(&apos;Connected successfully to server&apos;);</span><br><span class=\"line\">    //3.0版本新写法</span><br><span class=\"line\">    const db = client.db(dbname);</span><br><span class=\"line\">    insertDocuments(db,() =&gt; &#123;</span><br><span class=\"line\">        // find</span><br><span class=\"line\">        // findDocuments(db,() =&gt; &#123;</span><br><span class=\"line\">        //     client.close();</span><br><span class=\"line\">        // &#125;)</span><br><span class=\"line\">        //update</span><br><span class=\"line\">        // updateDocument(db,() =&gt; &#123;</span><br><span class=\"line\">        //     //remove</span><br><span class=\"line\">        //     removeDocument(db,() =&gt; &#123;</span><br><span class=\"line\">        //         client.close();</span><br><span class=\"line\">        //     &#125;);</span><br><span class=\"line\">        // &#125;);</span><br><span class=\"line\">        indexCollection(db,() =&gt; &#123;</span><br><span class=\"line\">            client.close();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//insert</span><br><span class=\"line\">const insertDocuments = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    //get the document collection(相当于拿到一个表，没有的话创建一个表)</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    collection.insertOne(</span><br><span class=\"line\">        &#123;a: 4&#125;</span><br><span class=\"line\">    ,(err,result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(err, null);</span><br><span class=\"line\">        console.log(&quot;Inserted 3 documents into the collection&quot;);</span><br><span class=\"line\">        callback(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//find</span><br><span class=\"line\">const findDocuments = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    collection.find(&#123;&#125;).toArray((err,docs) =&gt; &#123;</span><br><span class=\"line\">        console.log(&apos;Found the following records&apos;)</span><br><span class=\"line\">        console.log(docs);</span><br><span class=\"line\">        callback(docs);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//update</span><br><span class=\"line\">const updateDocument = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    //get the document collection</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    //update</span><br><span class=\"line\">    collection.updateOne(&#123;a: 2&#125;,&#123; $set: &#123; b: 1&#125; &#125;,(err,result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(err, null);</span><br><span class=\"line\">        console.log(&quot;Updated the document with the field a equal to 2&quot;);</span><br><span class=\"line\">        callback(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//remove</span><br><span class=\"line\">const removeDocument = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    collection.deleteOne(&#123; a: 3&#125;,(err,result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(err, null);</span><br><span class=\"line\">        console.log(&quot;Removed the document with the field a equal to 3&quot;);</span><br><span class=\"line\">        callback(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Index a Collection</span><br><span class=\"line\">const indexCollection = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    db.collection(&apos;myCollection&apos;).createIndex(</span><br><span class=\"line\">        &#123; &quot;a&quot;: 1 &#125;,</span><br><span class=\"line\">          null,</span><br><span class=\"line\">          function(err, results) &#123;</span><br><span class=\"line\">            console.log(results);</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>运行<code>node index.js</code>，显示如下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">Found the following records</span><br><span class=\"line\">[ &#123; _id: 5cbd6ee9ef77ab2d6c4a89dd, a: 4 &#125;,</span><br><span class=\"line\">  &#123; _id: 5cbd747a716b2b08e463ccee, a: 4 &#125; ]</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">Updated the document with the field a equal to 2</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">Updated the document with the field a equal to 2</span><br><span class=\"line\">Removed the document with the field a equal to 3</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">a_</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://docs.mongodb.com/manual/mongo/#start-the-mongo-shell-and-connect-to-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/mongo/#start-the-mongo-shell-and-connect-to-mongodb</a><br><a href=\"http://www.mongoing.com/archives/3818\" target=\"_blank\" rel=\"noopener\">http://www.mongoing.com/archives/3818</a><br><a href=\"http://mongodb.github.io/node-mongodb-native/3.2/quick-start/quick-start/\" target=\"_blank\" rel=\"noopener\">http://mongodb.github.io/node-mongodb-native/3.2/quick-start/quick-start/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>####简介</p>\n<blockquote>\n<p>MongoDB is a document database designed for ease of development and scaling。</p>\n</blockquote>\n<p><code>mongoDB</code>是一个文档数据库，旨在简化开发和扩展.</p>\n<blockquote>\n<p>A record in MongoDB is a document, which is a data structure composed of field and value pairs. MongoDB documents are similar to JSON objects. The values of fields may include other documents, arrays, and arrays of documents.</p>\n</blockquote>\n<p>类似其他关系型数据库，在<code>mongoDB</code>中一个记录叫做<code>document</code>，是由名称和值对组成的数据结构。类似<code>json</code>对象。</p>\n<p>####类比mysql关系数据库<br>类比如下图所示，document 类似 一行record，connection类似一张表table；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-207823dd8b0e1b15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>####简单shell操作<br>管理员身份打开<code>cmd</code>，运行<code>mongo</code>，前提是将<code>bin</code>目录写入到环境变量中。<br>安装参考：<a href=\"https://www.jianshu.com/p/59079c9832e9\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/59079c9832e9</a><br>1.显示所有数据库和正在使用的默认数据库<code>test</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br><span class=\"line\">&gt; db</span><br><span class=\"line\">test</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.<code>use</code>切换数据库，没有的话新建一个数据库，新建一个<code>collection</code>,相当于关系数据库中的表，插入一条数据<code>db.myCollection.insertOne()</code>,插入多条数据<code>db.myCollection.insert({x:2},{x:3})</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; use myNewDatabase</span><br><span class=\"line\">switched to db myNewDatabase</span><br><span class=\"line\">&gt; db.myCollection.insertOne(&#123;x: 1&#125;)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        &quot;acknowledged&quot; : true,</span><br><span class=\"line\">        &quot;insertedId&quot; : ObjectId(&quot;5cbd255be647b2c115594ba6&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&gt; db.myCollection.insert(&#123;x:2&#125;,&#123;x:3&#125;)</span><br><span class=\"line\">WriteResult(&#123;</span><br><span class=\"line\">        &quot;nInserted&quot; : 0,</span><br><span class=\"line\">        &quot;writeError&quot; : &#123;</span><br><span class=\"line\">                &quot;code&quot; : 13297,</span><br><span class=\"line\">                &quot;errmsg&quot; : &quot;db already exists with different case already have:</span><br><span class=\"line\">[myNewDataBase] trying to create [myNewDatabase]&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>3.删除数据库<code>db.dropDatabase()</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.dropDatabase()</span><br><span class=\"line\">&#123; &quot;dropped&quot; : &quot;myNewDatabase&quot;, &quot;ok&quot; : 1 &#125;</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br></pre></td></tr></table></figure>\n\n<p>####nodejs中操作mongodb<br>前提是数据库服务已经启动，管理员身份打开 <code>cmd</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start mongodb  //启动服务</span><br><span class=\"line\">net stop mongodb  //停止服务</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>######Init初始化文件目录<br>新建一个文件夹例如<code>node-mongodb</code>，使用<code>npm init</code>初始化<code>package.json</code>，<code>npm install mongodb -S</code><br><code>mongoDB</code>的版本是<code>3.2</code>版本，以下用<code>3.2</code>版本的写法<br>新建一个<code>index.js</code>文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MongoClient = require(&apos;mongodb&apos;).MongoClient;</span><br><span class=\"line\">const assert = require(&apos;assert&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//connection url</span><br><span class=\"line\">const url = &apos;mongodb://127.0.0.1:27017&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//database name</span><br><span class=\"line\">const dbname = &apos;myNewDataBase&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//create new mongodbClient</span><br><span class=\"line\">const client = new MongoClient(url,&#123; useNewUrlParser: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.connect((err) =&gt; &#123;</span><br><span class=\"line\">    assert.equal(null,err);</span><br><span class=\"line\">    console.log(&apos;Connected successfully to server&apos;);</span><br><span class=\"line\">    client.close();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><code>node index.js</code>，数据库链接成功<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-0916651d61c55783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<ul>\n<li>#####操作数据库（insert，find，update，delete，indexes（索引））<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">const MongoClient = require(&apos;mongodb&apos;).MongoClient;</span><br><span class=\"line\">const assert = require(&apos;assert&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">//connection url</span><br><span class=\"line\">const url = &apos;mongodb://127.0.0.1:27017&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//database name</span><br><span class=\"line\">const dbname = &apos;myNewDataBase&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">//create new mongodbClient</span><br><span class=\"line\">const client = new MongoClient(url,&#123; useNewUrlParser: true &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">client.connect((err) =&gt; &#123;</span><br><span class=\"line\">    assert.equal(null,err);</span><br><span class=\"line\">    console.log(&apos;Connected successfully to server&apos;);</span><br><span class=\"line\">    //3.0版本新写法</span><br><span class=\"line\">    const db = client.db(dbname);</span><br><span class=\"line\">    insertDocuments(db,() =&gt; &#123;</span><br><span class=\"line\">        // find</span><br><span class=\"line\">        // findDocuments(db,() =&gt; &#123;</span><br><span class=\"line\">        //     client.close();</span><br><span class=\"line\">        // &#125;)</span><br><span class=\"line\">        //update</span><br><span class=\"line\">        // updateDocument(db,() =&gt; &#123;</span><br><span class=\"line\">        //     //remove</span><br><span class=\"line\">        //     removeDocument(db,() =&gt; &#123;</span><br><span class=\"line\">        //         client.close();</span><br><span class=\"line\">        //     &#125;);</span><br><span class=\"line\">        // &#125;);</span><br><span class=\"line\">        indexCollection(db,() =&gt; &#123;</span><br><span class=\"line\">            client.close();</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//insert</span><br><span class=\"line\">const insertDocuments = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    //get the document collection(相当于拿到一个表，没有的话创建一个表)</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    collection.insertOne(</span><br><span class=\"line\">        &#123;a: 4&#125;</span><br><span class=\"line\">    ,(err,result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(err, null);</span><br><span class=\"line\">        console.log(&quot;Inserted 3 documents into the collection&quot;);</span><br><span class=\"line\">        callback(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//find</span><br><span class=\"line\">const findDocuments = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    collection.find(&#123;&#125;).toArray((err,docs) =&gt; &#123;</span><br><span class=\"line\">        console.log(&apos;Found the following records&apos;)</span><br><span class=\"line\">        console.log(docs);</span><br><span class=\"line\">        callback(docs);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//update</span><br><span class=\"line\">const updateDocument = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    //get the document collection</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    //update</span><br><span class=\"line\">    collection.updateOne(&#123;a: 2&#125;,&#123; $set: &#123; b: 1&#125; &#125;,(err,result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(err, null);</span><br><span class=\"line\">        console.log(&quot;Updated the document with the field a equal to 2&quot;);</span><br><span class=\"line\">        callback(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//remove</span><br><span class=\"line\">const removeDocument = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    const collection = db.collection(&apos;myCollection&apos;);</span><br><span class=\"line\">    collection.deleteOne(&#123; a: 3&#125;,(err,result) =&gt; &#123;</span><br><span class=\"line\">        assert.equal(err, null);</span><br><span class=\"line\">        console.log(&quot;Removed the document with the field a equal to 3&quot;);</span><br><span class=\"line\">        callback(result);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//Index a Collection</span><br><span class=\"line\">const indexCollection = (db,callback) =&gt; &#123;</span><br><span class=\"line\">    db.collection(&apos;myCollection&apos;).createIndex(</span><br><span class=\"line\">        &#123; &quot;a&quot;: 1 &#125;,</span><br><span class=\"line\">          null,</span><br><span class=\"line\">          function(err, results) &#123;</span><br><span class=\"line\">            console.log(results);</span><br><span class=\"line\">            callback();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>运行<code>node index.js</code>，显示如下结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">Found the following records</span><br><span class=\"line\">[ &#123; _id: 5cbd6ee9ef77ab2d6c4a89dd, a: 4 &#125;,</span><br><span class=\"line\">  &#123; _id: 5cbd747a716b2b08e463ccee, a: 4 &#125; ]</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">Updated the document with the field a equal to 2</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">Updated the document with the field a equal to 2</span><br><span class=\"line\">Removed the document with the field a equal to 3</span><br><span class=\"line\"></span><br><span class=\"line\">E:\\workCode\\node-mongodb&gt;node index.js</span><br><span class=\"line\">Connected successfully to server</span><br><span class=\"line\">Inserted 3 documents into the collection</span><br><span class=\"line\">a_</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://docs.mongodb.com/manual/mongo/#start-the-mongo-shell-and-connect-to-mongodb\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/mongo/#start-the-mongo-shell-and-connect-to-mongodb</a><br><a href=\"http://www.mongoing.com/archives/3818\" target=\"_blank\" rel=\"noopener\">http://www.mongoing.com/archives/3818</a><br><a href=\"http://mongodb.github.io/node-mongodb-native/3.2/quick-start/quick-start/\" target=\"_blank\" rel=\"noopener\">http://mongodb.github.io/node-mongodb-native/3.2/quick-start/quick-start/</a></p>\n"},{"title":"（Node-mongo系列）Puppeteer爬取网页数据并写入文件（三）","_content":"#####官方介绍\n在浏览器中手动执行的绝大多数操作都可以使用` Puppeteer `来完成！ 下面是一些示例：\n*   生成页面 PDF。\n*   抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。\n*   自动提交表单，进行 UI 测试，键盘输入等。\n*   创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。\n*   捕获网站的 [timeline trace](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference)，用来帮助分析性能问题。\n*   测试浏览器扩展。\n\n#####实践\n通过`Puppeteer`的`api`来实例化一个`browser`，然后新建一个`page`，打开一个`url`地址，渲染完成之后，模拟在`console`面板操作`dom`，来获取想要的数据。\n新建一个`index.js`文件，拿到数据之后讲数据写入文件`curse-list.json`文件中，代码如下：\n```\n//index.js\n//用puppeteer来模拟浏览器操作拿到前端免费课程的列表，第一页\nconst puppeteer = require('puppeteer');\nconst fs = require('fs');\nconst imoocUrl = 'https://www.imooc.com/course/list?c=fe';\n;(async () => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    console.log('start open url:',imoocUrl);\n    await page.goto(imoocUrl);\n    \n    //操作数据\n    console.log('operate dom by console');\n    const result = await page.evaluate(() => {\n        let $ = window.$;\n        let data = [];\n        let courseList = $('.moco-course-list').find('.course-card-container');\n        if(courseList.length > 1){\n            courseList.each((index,item) => {\n                let item_a = $(item).find('a');\n                let tags = [];\n                let labels = item_a.find('.course-label label');\n                if(labels.length > 0){\n                    labels.each((index,item) => {\n                        tags.push($(item).text());\n                    })\n                }\n                let content = item_a.find('.course-card-content');\n                let title = content.find('.course-card-name').text();\n                let card = content.find('.course-card-info span');\n                let level = $(card[0]).text();\n                let desc = content.find('.course-card-desc').text();\n                data.push({\n                    title,\n                    tags: tags.join(','),\n                    level,\n                    desc\n                });\n            })\n        }\n        return data;\n    });\n\n    await browser.close();\n    console.log('打印数据','\\n',result);\n\n    //将数据写入到文件中，通过fs模块\n    let apiData = {\n        data: result,\n        code: 0,\n        message: 'success'\n    }\n    fs.writeFile('course-list.json',JSON.stringify(apiData,null,'\\t'));\n})();\n```\n运行命令：\n`node index.js`\n然后打开json文件，数据已经被写入到文件中。\n![](https://upload-images.jianshu.io/upload_images/5541401-19b40e33ba687c03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####注意：fs.writeFile()写入的数据类型必须是这几种\n*   `data` [<string>](http://nodejs.cn/s/9Tw2bK) | [<Buffer>](http://nodejs.cn/s/6x1hD3) | [<TypedArray>](http://nodejs.cn/s/oh3CkV) | [<DataView>](http://nodejs.cn/s/yCdVkD)\n所以数据用`JSON.stringify`包一层，然后`\\t`格式化数据`JSON.stringify(apiData,null,'\\t')`。\n\n本来不加`\\t`直接写入的是没有格式化的数据，又看了`JSON.stringify`的参数`JSON.stringify(value[, replacer [, space]])`；\n`space`用于美化输出。\n\n#####结语\n最后一个数据的爬取就完成了，也可以封装成一个函数，通过传入一个`url`，一个`dom操作的回调函数`，来获取想要的各种各样的数据，写入到文件中，在需要用到数据的时候，通过读取文件来mock数据，这样前端就可以专注于前端了。\n\n\n参考：\nhttps://github.com/GoogleChrome/puppeteer\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n","source":"_posts/（Node-mongo系列）Puppeteer爬取网页数据并写入文件（三）.md","raw":"---\ntitle: （Node-mongo系列）Puppeteer爬取网页数据并写入文件（三）\n---\n#####官方介绍\n在浏览器中手动执行的绝大多数操作都可以使用` Puppeteer `来完成！ 下面是一些示例：\n*   生成页面 PDF。\n*   抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。\n*   自动提交表单，进行 UI 测试，键盘输入等。\n*   创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。\n*   捕获网站的 [timeline trace](https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference)，用来帮助分析性能问题。\n*   测试浏览器扩展。\n\n#####实践\n通过`Puppeteer`的`api`来实例化一个`browser`，然后新建一个`page`，打开一个`url`地址，渲染完成之后，模拟在`console`面板操作`dom`，来获取想要的数据。\n新建一个`index.js`文件，拿到数据之后讲数据写入文件`curse-list.json`文件中，代码如下：\n```\n//index.js\n//用puppeteer来模拟浏览器操作拿到前端免费课程的列表，第一页\nconst puppeteer = require('puppeteer');\nconst fs = require('fs');\nconst imoocUrl = 'https://www.imooc.com/course/list?c=fe';\n;(async () => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n    console.log('start open url:',imoocUrl);\n    await page.goto(imoocUrl);\n    \n    //操作数据\n    console.log('operate dom by console');\n    const result = await page.evaluate(() => {\n        let $ = window.$;\n        let data = [];\n        let courseList = $('.moco-course-list').find('.course-card-container');\n        if(courseList.length > 1){\n            courseList.each((index,item) => {\n                let item_a = $(item).find('a');\n                let tags = [];\n                let labels = item_a.find('.course-label label');\n                if(labels.length > 0){\n                    labels.each((index,item) => {\n                        tags.push($(item).text());\n                    })\n                }\n                let content = item_a.find('.course-card-content');\n                let title = content.find('.course-card-name').text();\n                let card = content.find('.course-card-info span');\n                let level = $(card[0]).text();\n                let desc = content.find('.course-card-desc').text();\n                data.push({\n                    title,\n                    tags: tags.join(','),\n                    level,\n                    desc\n                });\n            })\n        }\n        return data;\n    });\n\n    await browser.close();\n    console.log('打印数据','\\n',result);\n\n    //将数据写入到文件中，通过fs模块\n    let apiData = {\n        data: result,\n        code: 0,\n        message: 'success'\n    }\n    fs.writeFile('course-list.json',JSON.stringify(apiData,null,'\\t'));\n})();\n```\n运行命令：\n`node index.js`\n然后打开json文件，数据已经被写入到文件中。\n![](https://upload-images.jianshu.io/upload_images/5541401-19b40e33ba687c03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####注意：fs.writeFile()写入的数据类型必须是这几种\n*   `data` [<string>](http://nodejs.cn/s/9Tw2bK) | [<Buffer>](http://nodejs.cn/s/6x1hD3) | [<TypedArray>](http://nodejs.cn/s/oh3CkV) | [<DataView>](http://nodejs.cn/s/yCdVkD)\n所以数据用`JSON.stringify`包一层，然后`\\t`格式化数据`JSON.stringify(apiData,null,'\\t')`。\n\n本来不加`\\t`直接写入的是没有格式化的数据，又看了`JSON.stringify`的参数`JSON.stringify(value[, replacer [, space]])`；\n`space`用于美化输出。\n\n#####结语\n最后一个数据的爬取就完成了，也可以封装成一个函数，通过传入一个`url`，一个`dom操作的回调函数`，来获取想要的各种各样的数据，写入到文件中，在需要用到数据的时候，通过读取文件来mock数据，这样前端就可以专注于前端了。\n\n\n参考：\nhttps://github.com/GoogleChrome/puppeteer\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n","slug":"（Node-mongo系列）Puppeteer爬取网页数据并写入文件（三）","published":1,"date":"2019-09-13T02:18:12.187Z","updated":"2019-09-13T09:08:36.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73y000rwsl63fpi551c","content":"<p>#####官方介绍<br>在浏览器中手动执行的绝大多数操作都可以使用<code>Puppeteer</code>来完成！ 下面是一些示例：</p>\n<ul>\n<li>生成页面 PDF。</li>\n<li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li>\n<li>自动提交表单，进行 UI 测试，键盘输入等。</li>\n<li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li>\n<li>捕获网站的 <a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference\" target=\"_blank\" rel=\"noopener\">timeline trace</a>，用来帮助分析性能问题。</li>\n<li>测试浏览器扩展。</li>\n</ul>\n<p>#####实践<br>通过<code>Puppeteer</code>的<code>api</code>来实例化一个<code>browser</code>，然后新建一个<code>page</code>，打开一个<code>url</code>地址，渲染完成之后，模拟在<code>console</code>面板操作<code>dom</code>，来获取想要的数据。<br>新建一个<code>index.js</code>文件，拿到数据之后讲数据写入文件<code>curse-list.json</code>文件中，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">//用puppeteer来模拟浏览器操作拿到前端免费课程的列表，第一页</span><br><span class=\"line\">const puppeteer = require(&apos;puppeteer&apos;);</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">const imoocUrl = &apos;https://www.imooc.com/course/list?c=fe&apos;;</span><br><span class=\"line\">;(async () =&gt; &#123;</span><br><span class=\"line\">    const browser = await puppeteer.launch();</span><br><span class=\"line\">    const page = await browser.newPage();</span><br><span class=\"line\">    console.log(&apos;start open url:&apos;,imoocUrl);</span><br><span class=\"line\">    await page.goto(imoocUrl);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //操作数据</span><br><span class=\"line\">    console.log(&apos;operate dom by console&apos;);</span><br><span class=\"line\">    const result = await page.evaluate(() =&gt; &#123;</span><br><span class=\"line\">        let $ = window.$;</span><br><span class=\"line\">        let data = [];</span><br><span class=\"line\">        let courseList = $(&apos;.moco-course-list&apos;).find(&apos;.course-card-container&apos;);</span><br><span class=\"line\">        if(courseList.length &gt; 1)&#123;</span><br><span class=\"line\">            courseList.each((index,item) =&gt; &#123;</span><br><span class=\"line\">                let item_a = $(item).find(&apos;a&apos;);</span><br><span class=\"line\">                let tags = [];</span><br><span class=\"line\">                let labels = item_a.find(&apos;.course-label label&apos;);</span><br><span class=\"line\">                if(labels.length &gt; 0)&#123;</span><br><span class=\"line\">                    labels.each((index,item) =&gt; &#123;</span><br><span class=\"line\">                        tags.push($(item).text());</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                let content = item_a.find(&apos;.course-card-content&apos;);</span><br><span class=\"line\">                let title = content.find(&apos;.course-card-name&apos;).text();</span><br><span class=\"line\">                let card = content.find(&apos;.course-card-info span&apos;);</span><br><span class=\"line\">                let level = $(card[0]).text();</span><br><span class=\"line\">                let desc = content.find(&apos;.course-card-desc&apos;).text();</span><br><span class=\"line\">                data.push(&#123;</span><br><span class=\"line\">                    title,</span><br><span class=\"line\">                    tags: tags.join(&apos;,&apos;),</span><br><span class=\"line\">                    level,</span><br><span class=\"line\">                    desc</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    await browser.close();</span><br><span class=\"line\">    console.log(&apos;打印数据&apos;,&apos;\\n&apos;,result);</span><br><span class=\"line\"></span><br><span class=\"line\">    //将数据写入到文件中，通过fs模块</span><br><span class=\"line\">    let apiData = &#123;</span><br><span class=\"line\">        data: result,</span><br><span class=\"line\">        code: 0,</span><br><span class=\"line\">        message: &apos;success&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fs.writeFile(&apos;course-list.json&apos;,JSON.stringify(apiData,null,&apos;\\t&apos;));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>运行命令：<br><code>node index.js</code><br>然后打开json文件，数据已经被写入到文件中。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-19b40e33ba687c03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####注意：fs.writeFile()写入的数据类型必须是这几种</p>\n<ul>\n<li><code>data</code> <a href=\"http://nodejs.cn/s/9Tw2bK\" target=\"_blank\" rel=\"noopener\"><string></string></a> | <a href=\"http://nodejs.cn/s/6x1hD3\" target=\"_blank\" rel=\"noopener\"><buffer></buffer></a> | <a href=\"http://nodejs.cn/s/oh3CkV\" target=\"_blank\" rel=\"noopener\"><typedarray></typedarray></a> | <a href=\"http://nodejs.cn/s/yCdVkD\" target=\"_blank\" rel=\"noopener\"><dataview></dataview></a><br>所以数据用<code>JSON.stringify</code>包一层，然后<code>\\t</code>格式化数据<code>JSON.stringify(apiData,null,&#39;\\t&#39;)</code>。</li>\n</ul>\n<p>本来不加<code>\\t</code>直接写入的是没有格式化的数据，又看了<code>JSON.stringify</code>的参数<code>JSON.stringify(value[, replacer [, space]])</code>；<br><code>space</code>用于美化输出。</p>\n<p>#####结语<br>最后一个数据的爬取就完成了，也可以封装成一个函数，通过传入一个<code>url</code>，一个<code>dom操作的回调函数</code>，来获取想要的各种各样的数据，写入到文件中，在需要用到数据的时候，通过读取文件来mock数据，这样前端就可以专注于前端了。</p>\n<p>参考：<br><a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">https://github.com/GoogleChrome/puppeteer</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#####官方介绍<br>在浏览器中手动执行的绝大多数操作都可以使用<code>Puppeteer</code>来完成！ 下面是一些示例：</p>\n<ul>\n<li>生成页面 PDF。</li>\n<li>抓取 SPA（单页应用）并生成预渲染内容（即“SSR”（服务器端渲染））。</li>\n<li>自动提交表单，进行 UI 测试，键盘输入等。</li>\n<li>创建一个时时更新的自动化测试环境。 使用最新的 JavaScript 和浏览器功能直接在最新版本的Chrome中执行测试。</li>\n<li>捕获网站的 <a href=\"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/reference\" target=\"_blank\" rel=\"noopener\">timeline trace</a>，用来帮助分析性能问题。</li>\n<li>测试浏览器扩展。</li>\n</ul>\n<p>#####实践<br>通过<code>Puppeteer</code>的<code>api</code>来实例化一个<code>browser</code>，然后新建一个<code>page</code>，打开一个<code>url</code>地址，渲染完成之后，模拟在<code>console</code>面板操作<code>dom</code>，来获取想要的数据。<br>新建一个<code>index.js</code>文件，拿到数据之后讲数据写入文件<code>curse-list.json</code>文件中，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//index.js</span><br><span class=\"line\">//用puppeteer来模拟浏览器操作拿到前端免费课程的列表，第一页</span><br><span class=\"line\">const puppeteer = require(&apos;puppeteer&apos;);</span><br><span class=\"line\">const fs = require(&apos;fs&apos;);</span><br><span class=\"line\">const imoocUrl = &apos;https://www.imooc.com/course/list?c=fe&apos;;</span><br><span class=\"line\">;(async () =&gt; &#123;</span><br><span class=\"line\">    const browser = await puppeteer.launch();</span><br><span class=\"line\">    const page = await browser.newPage();</span><br><span class=\"line\">    console.log(&apos;start open url:&apos;,imoocUrl);</span><br><span class=\"line\">    await page.goto(imoocUrl);</span><br><span class=\"line\">    </span><br><span class=\"line\">    //操作数据</span><br><span class=\"line\">    console.log(&apos;operate dom by console&apos;);</span><br><span class=\"line\">    const result = await page.evaluate(() =&gt; &#123;</span><br><span class=\"line\">        let $ = window.$;</span><br><span class=\"line\">        let data = [];</span><br><span class=\"line\">        let courseList = $(&apos;.moco-course-list&apos;).find(&apos;.course-card-container&apos;);</span><br><span class=\"line\">        if(courseList.length &gt; 1)&#123;</span><br><span class=\"line\">            courseList.each((index,item) =&gt; &#123;</span><br><span class=\"line\">                let item_a = $(item).find(&apos;a&apos;);</span><br><span class=\"line\">                let tags = [];</span><br><span class=\"line\">                let labels = item_a.find(&apos;.course-label label&apos;);</span><br><span class=\"line\">                if(labels.length &gt; 0)&#123;</span><br><span class=\"line\">                    labels.each((index,item) =&gt; &#123;</span><br><span class=\"line\">                        tags.push($(item).text());</span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                let content = item_a.find(&apos;.course-card-content&apos;);</span><br><span class=\"line\">                let title = content.find(&apos;.course-card-name&apos;).text();</span><br><span class=\"line\">                let card = content.find(&apos;.course-card-info span&apos;);</span><br><span class=\"line\">                let level = $(card[0]).text();</span><br><span class=\"line\">                let desc = content.find(&apos;.course-card-desc&apos;).text();</span><br><span class=\"line\">                data.push(&#123;</span><br><span class=\"line\">                    title,</span><br><span class=\"line\">                    tags: tags.join(&apos;,&apos;),</span><br><span class=\"line\">                    level,</span><br><span class=\"line\">                    desc</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return data;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    await browser.close();</span><br><span class=\"line\">    console.log(&apos;打印数据&apos;,&apos;\\n&apos;,result);</span><br><span class=\"line\"></span><br><span class=\"line\">    //将数据写入到文件中，通过fs模块</span><br><span class=\"line\">    let apiData = &#123;</span><br><span class=\"line\">        data: result,</span><br><span class=\"line\">        code: 0,</span><br><span class=\"line\">        message: &apos;success&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fs.writeFile(&apos;course-list.json&apos;,JSON.stringify(apiData,null,&apos;\\t&apos;));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>运行命令：<br><code>node index.js</code><br>然后打开json文件，数据已经被写入到文件中。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-19b40e33ba687c03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####注意：fs.writeFile()写入的数据类型必须是这几种</p>\n<ul>\n<li><code>data</code> <a href=\"http://nodejs.cn/s/9Tw2bK\" target=\"_blank\" rel=\"noopener\"><string></string></a> | <a href=\"http://nodejs.cn/s/6x1hD3\" target=\"_blank\" rel=\"noopener\"><buffer></buffer></a> | <a href=\"http://nodejs.cn/s/oh3CkV\" target=\"_blank\" rel=\"noopener\"><typedarray></typedarray></a> | <a href=\"http://nodejs.cn/s/yCdVkD\" target=\"_blank\" rel=\"noopener\"><dataview></dataview></a><br>所以数据用<code>JSON.stringify</code>包一层，然后<code>\\t</code>格式化数据<code>JSON.stringify(apiData,null,&#39;\\t&#39;)</code>。</li>\n</ul>\n<p>本来不加<code>\\t</code>直接写入的是没有格式化的数据，又看了<code>JSON.stringify</code>的参数<code>JSON.stringify(value[, replacer [, space]])</code>；<br><code>space</code>用于美化输出。</p>\n<p>#####结语<br>最后一个数据的爬取就完成了，也可以封装成一个函数，通过传入一个<code>url</code>，一个<code>dom操作的回调函数</code>，来获取想要的各种各样的数据，写入到文件中，在需要用到数据的时候，通过读取文件来mock数据，这样前端就可以专注于前端了。</p>\n<p>参考：<br><a href=\"https://github.com/GoogleChrome/puppeteer\" target=\"_blank\" rel=\"noopener\">https://github.com/GoogleChrome/puppeteer</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></p>\n"},{"title":"线上分享webpack（每人一元）总结：资源加载","_content":"#####1.clone webpack代码到本地\n```\nconst path = require('path');\nmodule.exports = {\n    devtool: 'source-map',      //配置source map，查看源文件\n    entry: {                              //构建入口\n        index: path.resolve(__dirname, 'src/index.js'),\n    },\n    output: {                           //构建输出到dist目录\n        devtoolModuleFilenameTemplate: '[resource-path]',     //配置source map在浏览器中的展现方式\n        path: path.resolve(__dirname, 'dist/'),\n    },\n    module: {      //配置loader，解析相应的文件\n        rules: [\n            { test: /\\.js$/, use: { loader: 'babel-loader', query: { presets: ['@babel/preset-env'] } } },\n        ]\n    },\n};\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-a503b4db8abe3b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n生成的`source map`文件\n![](https://upload-images.jianshu.io/upload_images/5541401-1976ea2c3124540e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####2.启动调试项目\n```\nnpm install    \n```\n如果安装过程中出错，使用`管理员`身份再重新使用安装\n![image.png](https://upload-images.jianshu.io/upload_images/5541401-5d70f55a86c2f268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`package.json`里有用来调试的`script`，直接在`vscode`中按`F5`就可以启动调试了，\n`windows`用户会报错：\n![](https://upload-images.jianshu.io/upload_images/5541401-9dadd65f6822ee3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n，`windows`用户需要把这两条行改成\n```\n \"debug:build\": \"node --inspect-brk=5858 node_modules/webpack/bin/webpack.js\",\n \"debug:watch\": \"node --inspect-brk=5859 node_modules/webpack --watch\"\n```\n因为`webpack`是直接安装在`node_modules`下的。\n#####3.调试`webpack`资源加载流程\n修改之后再按`F5`启动调试，进入到`node_modules/webpack/bin/webpack.js`\n![](https://upload-images.jianshu.io/upload_images/5541401-048340c05a0d0d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这个文件的逻辑是判断一下`cli`是否安装了，然后去调`webpack.run`；\n然后在`150行`打上断点，按`F5`，这里去调`webpack-cli`去了，然后`webpack-cli`又调回到`webpack/lib`，\n![](https://upload-images.jianshu.io/upload_images/5541401-1e01bb1787538324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n后面我们不去看`weboack-cli`，直接在`webpack/lib/Compiler.js`的`199行`打个断点\n![](https://upload-images.jianshu.io/upload_images/5541401-0fa9af34d6fbe129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####总体来说`webpack build`做了这几件事：\n######1.载入资源，这个过程会调用各个`loader`，然后用`loader`去载入资源文件，涉及到的模块是`loader-runner`\n######2.代码压缩，这里只看`js`文件，涉及到的模块是`uglifyjs-webpack-plugin`\n######3.代码生成，就是在`Compiler.js`中，`emit`了一下，存到文件中\n\n接下来看下`compile`函数，跟一下资源加载过程，在`536行`打个断点\n![](https://upload-images.jianshu.io/upload_images/5541401-00dbef693fd5b1e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这里会调用`make这个hook`，`webpack`就是用`hook`这种东西实现了`插件化`，也就是`webpack`只负责调一下，至于哪个插件实现了`make这个hook`，`webpack`不管的，`单步调试`进去看一下\n![](https://upload-images.jianshu.io/upload_images/5541401-d7bc59f0a51045b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n跑到了`tapable`这个库中，这个`tapable`就是`webpack`实现`hook`的模块，`tapable`读起来比较费力，它是用生成代码的方式做的，这个应该是兼容性和功能性的考虑，因为`es6`的`proxy`能力有限，虽然能做一些拦截，但是做不到`hook`这么强大也不好搞。\n继续，按`单步跳过（F10）`到下一行，\n![](https://upload-images.jianshu.io/upload_images/5541401-87526c89c4571fc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后`单步调试（F11）`,就会跑到这里来，这个`VM1372`，就是`tapable`临时生成的代码，一般出现这种代码的时候，就意味着有人用了`new Function`这种东西，`动态生成函数`\n![](https://upload-images.jianshu.io/upload_images/5541401-1f28b5dc956a8d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n接下来`单步跳过`，`单步调试进入_fn0中`\n![](https://upload-images.jianshu.io/upload_images/5541401-40401014e511e1f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n进去就到了`webpack/lib/SingleEntryPlugin.js`中的`第43行`，`compiler.hooks.make.tapAsync`(这个`SingleEntryPlugin.js`实现了`make这个hook`，然后`Compiler.js中this.make.hooks`调用时，就调到了。\n![](https://upload-images.jianshu.io/upload_images/5541401-2d350417d3746875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n######总结：这里主要是从`Compiler.js的compile`函数，看`webpack`怎样从`this.hooks.make.callAsync`调到`SingleEntryPlugin.js`的`compiler.hooks.make.tapAsync`实现的。\n中间涉及到了`tapable`，他提供了一个功能，让`hook`可以在其他地方实现，`webpack`只需要调一下这个`hook`就行了。同样的`hook`，可以实现多次，`webpack`会放到一个队列中调用。`hook`还有很多种类，原理是一样的，只不过处理方式不同，比如异步的，同步的。\n\n继续下去，现在到这里了，这里直接调用了`compilation.addEntry`，这是`webpack`的另一个重要的文件，`Compilation.js`\n![](https://upload-images.jianshu.io/upload_images/5541401-bbad54913ffbdc11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n进入看看，在`1028行`打上断点，这里主要看这个文件，开始加载资源，\n![](https://upload-images.jianshu.io/upload_images/5541401-b209e1ceb05e08ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`this._addModuleChain`的逻辑是这样的，先加载入口文件，然后再递归加载它依赖的文件，依赖的依赖的文件，就是通过`require的import`的那些。\n![](https://upload-images.jianshu.io/upload_images/5541401-7224e346c663ec05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n进去看`_addModuleChain`，开始加载入口文件了，往下看，在`943和953行`打上断点\n![](https://upload-images.jianshu.io/upload_images/5541401-07fa417f15b2d147.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`module`出来了，包含了如下这些内容\n![](https://upload-images.jianshu.io/upload_images/5541401-997e5bd85828fd32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-04adfdbce9885f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`request`是`loader`，`resource`是`待加载的资源`，`webpack`造出`module`后再调用这个`module`的`build`方法来加载资源，十分的`OO`，不直接干，而是先搞一个`factory`，让`factory`造`module`，再让`module`自己`build`\n![](https://upload-images.jianshu.io/upload_images/5541401-40ab1ea0f4f32607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这里开始`build`\n![](https://upload-images.jianshu.io/upload_images/5541401-25416b5ac143d2e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-82f8a7f5759df618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-d99ffd1fd492c918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`this.buildModule` -> `module.build` -> `doBuild`\n最后到了`NormalModule.js`的`265行`调了`runLoaders`，从`loader-runner`里`require`进来的\n```\nconst { getContext, runLoaders } = require(\"loader-runner\");\n```\n进去看看\n![](https://upload-images.jianshu.io/upload_images/5541401-3f9170a3eb71bfd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`loader-runner`首先会载入那个`loader`，然后在用`loader`加载资源，例子中的是`babel-loader`，资源文件就是`src/index.js`，这个`LOADER_EXECUTION`就是用`loader`载入资源用的\n![](https://upload-images.jianshu.io/upload_images/5541401-cf9b10ffaad1d8e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`fn`是`loader,args`是源文件的内容，，然后`webpack`调用这个`loader`，`babel-loader`可以看做一个函数把`ES6`代码转译成`ES5`。\n以上就是解析入口文件，一图胜千言\n![](https://upload-images.jianshu.io/upload_images/5541401-f0e1e57a1dc56c18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###参考\nwebpack debug：https://github.com/thzt/debug-webpack\nwebpack群侠传系列：https://www.jianshu.com/p/de262ad255c3\n深入浅出webpack：https://wangchong.tech/webpack/\nwebpack4.0官方文档：https://webpack.js.org/concepts\n","source":"_posts/线上分享webpack（每人一元）总结：资源加载.md","raw":"---\ntitle: 线上分享webpack（每人一元）总结：资源加载\n---\n#####1.clone webpack代码到本地\n```\nconst path = require('path');\nmodule.exports = {\n    devtool: 'source-map',      //配置source map，查看源文件\n    entry: {                              //构建入口\n        index: path.resolve(__dirname, 'src/index.js'),\n    },\n    output: {                           //构建输出到dist目录\n        devtoolModuleFilenameTemplate: '[resource-path]',     //配置source map在浏览器中的展现方式\n        path: path.resolve(__dirname, 'dist/'),\n    },\n    module: {      //配置loader，解析相应的文件\n        rules: [\n            { test: /\\.js$/, use: { loader: 'babel-loader', query: { presets: ['@babel/preset-env'] } } },\n        ]\n    },\n};\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-a503b4db8abe3b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n生成的`source map`文件\n![](https://upload-images.jianshu.io/upload_images/5541401-1976ea2c3124540e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####2.启动调试项目\n```\nnpm install    \n```\n如果安装过程中出错，使用`管理员`身份再重新使用安装\n![image.png](https://upload-images.jianshu.io/upload_images/5541401-5d70f55a86c2f268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`package.json`里有用来调试的`script`，直接在`vscode`中按`F5`就可以启动调试了，\n`windows`用户会报错：\n![](https://upload-images.jianshu.io/upload_images/5541401-9dadd65f6822ee3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n，`windows`用户需要把这两条行改成\n```\n \"debug:build\": \"node --inspect-brk=5858 node_modules/webpack/bin/webpack.js\",\n \"debug:watch\": \"node --inspect-brk=5859 node_modules/webpack --watch\"\n```\n因为`webpack`是直接安装在`node_modules`下的。\n#####3.调试`webpack`资源加载流程\n修改之后再按`F5`启动调试，进入到`node_modules/webpack/bin/webpack.js`\n![](https://upload-images.jianshu.io/upload_images/5541401-048340c05a0d0d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这个文件的逻辑是判断一下`cli`是否安装了，然后去调`webpack.run`；\n然后在`150行`打上断点，按`F5`，这里去调`webpack-cli`去了，然后`webpack-cli`又调回到`webpack/lib`，\n![](https://upload-images.jianshu.io/upload_images/5541401-1e01bb1787538324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n后面我们不去看`weboack-cli`，直接在`webpack/lib/Compiler.js`的`199行`打个断点\n![](https://upload-images.jianshu.io/upload_images/5541401-0fa9af34d6fbe129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####总体来说`webpack build`做了这几件事：\n######1.载入资源，这个过程会调用各个`loader`，然后用`loader`去载入资源文件，涉及到的模块是`loader-runner`\n######2.代码压缩，这里只看`js`文件，涉及到的模块是`uglifyjs-webpack-plugin`\n######3.代码生成，就是在`Compiler.js`中，`emit`了一下，存到文件中\n\n接下来看下`compile`函数，跟一下资源加载过程，在`536行`打个断点\n![](https://upload-images.jianshu.io/upload_images/5541401-00dbef693fd5b1e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这里会调用`make这个hook`，`webpack`就是用`hook`这种东西实现了`插件化`，也就是`webpack`只负责调一下，至于哪个插件实现了`make这个hook`，`webpack`不管的，`单步调试`进去看一下\n![](https://upload-images.jianshu.io/upload_images/5541401-d7bc59f0a51045b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n跑到了`tapable`这个库中，这个`tapable`就是`webpack`实现`hook`的模块，`tapable`读起来比较费力，它是用生成代码的方式做的，这个应该是兼容性和功能性的考虑，因为`es6`的`proxy`能力有限，虽然能做一些拦截，但是做不到`hook`这么强大也不好搞。\n继续，按`单步跳过（F10）`到下一行，\n![](https://upload-images.jianshu.io/upload_images/5541401-87526c89c4571fc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n然后`单步调试（F11）`,就会跑到这里来，这个`VM1372`，就是`tapable`临时生成的代码，一般出现这种代码的时候，就意味着有人用了`new Function`这种东西，`动态生成函数`\n![](https://upload-images.jianshu.io/upload_images/5541401-1f28b5dc956a8d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n接下来`单步跳过`，`单步调试进入_fn0中`\n![](https://upload-images.jianshu.io/upload_images/5541401-40401014e511e1f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n进去就到了`webpack/lib/SingleEntryPlugin.js`中的`第43行`，`compiler.hooks.make.tapAsync`(这个`SingleEntryPlugin.js`实现了`make这个hook`，然后`Compiler.js中this.make.hooks`调用时，就调到了。\n![](https://upload-images.jianshu.io/upload_images/5541401-2d350417d3746875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n######总结：这里主要是从`Compiler.js的compile`函数，看`webpack`怎样从`this.hooks.make.callAsync`调到`SingleEntryPlugin.js`的`compiler.hooks.make.tapAsync`实现的。\n中间涉及到了`tapable`，他提供了一个功能，让`hook`可以在其他地方实现，`webpack`只需要调一下这个`hook`就行了。同样的`hook`，可以实现多次，`webpack`会放到一个队列中调用。`hook`还有很多种类，原理是一样的，只不过处理方式不同，比如异步的，同步的。\n\n继续下去，现在到这里了，这里直接调用了`compilation.addEntry`，这是`webpack`的另一个重要的文件，`Compilation.js`\n![](https://upload-images.jianshu.io/upload_images/5541401-bbad54913ffbdc11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n进入看看，在`1028行`打上断点，这里主要看这个文件，开始加载资源，\n![](https://upload-images.jianshu.io/upload_images/5541401-b209e1ceb05e08ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`this._addModuleChain`的逻辑是这样的，先加载入口文件，然后再递归加载它依赖的文件，依赖的依赖的文件，就是通过`require的import`的那些。\n![](https://upload-images.jianshu.io/upload_images/5541401-7224e346c663ec05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n进去看`_addModuleChain`，开始加载入口文件了，往下看，在`943和953行`打上断点\n![](https://upload-images.jianshu.io/upload_images/5541401-07fa417f15b2d147.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`module`出来了，包含了如下这些内容\n![](https://upload-images.jianshu.io/upload_images/5541401-997e5bd85828fd32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-04adfdbce9885f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`request`是`loader`，`resource`是`待加载的资源`，`webpack`造出`module`后再调用这个`module`的`build`方法来加载资源，十分的`OO`，不直接干，而是先搞一个`factory`，让`factory`造`module`，再让`module`自己`build`\n![](https://upload-images.jianshu.io/upload_images/5541401-40ab1ea0f4f32607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n这里开始`build`\n![](https://upload-images.jianshu.io/upload_images/5541401-25416b5ac143d2e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-82f8a7f5759df618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-d99ffd1fd492c918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`this.buildModule` -> `module.build` -> `doBuild`\n最后到了`NormalModule.js`的`265行`调了`runLoaders`，从`loader-runner`里`require`进来的\n```\nconst { getContext, runLoaders } = require(\"loader-runner\");\n```\n进去看看\n![](https://upload-images.jianshu.io/upload_images/5541401-3f9170a3eb71bfd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n`loader-runner`首先会载入那个`loader`，然后在用`loader`加载资源，例子中的是`babel-loader`，资源文件就是`src/index.js`，这个`LOADER_EXECUTION`就是用`loader`载入资源用的\n![](https://upload-images.jianshu.io/upload_images/5541401-cf9b10ffaad1d8e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`fn`是`loader,args`是源文件的内容，，然后`webpack`调用这个`loader`，`babel-loader`可以看做一个函数把`ES6`代码转译成`ES5`。\n以上就是解析入口文件，一图胜千言\n![](https://upload-images.jianshu.io/upload_images/5541401-f0e1e57a1dc56c18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n###参考\nwebpack debug：https://github.com/thzt/debug-webpack\nwebpack群侠传系列：https://www.jianshu.com/p/de262ad255c3\n深入浅出webpack：https://wangchong.tech/webpack/\nwebpack4.0官方文档：https://webpack.js.org/concepts\n","slug":"线上分享webpack（每人一元）总结：资源加载","published":1,"date":"2019-09-13T02:18:12.151Z","updated":"2019-09-13T09:08:36.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh73z000swsl62gkkqr1k","content":"<p>#####1.clone webpack代码到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    devtool: &apos;source-map&apos;,      //配置source map，查看源文件</span><br><span class=\"line\">    entry: &#123;                              //构建入口</span><br><span class=\"line\">        index: path.resolve(__dirname, &apos;src/index.js&apos;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;                           //构建输出到dist目录</span><br><span class=\"line\">        devtoolModuleFilenameTemplate: &apos;[resource-path]&apos;,     //配置source map在浏览器中的展现方式</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist/&apos;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;      //配置loader，解析相应的文件</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123; test: /\\.js$/, use: &#123; loader: &apos;babel-loader&apos;, query: &#123; presets: [&apos;@babel/preset-env&apos;] &#125; &#125; &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a503b4db8abe3b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>生成的<code>source map</code>文件<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1976ea2c3124540e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####2.启动调试项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>如果安装过程中出错，使用<code>管理员</code>身份再重新使用安装<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-5d70f55a86c2f268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><code>package.json</code>里有用来调试的<code>script</code>，直接在<code>vscode</code>中按<code>F5</code>就可以启动调试了，<br><code>windows</code>用户会报错：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-9dadd65f6822ee3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>，<code>windows</code>用户需要把这两条行改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;debug:build&quot;: &quot;node --inspect-brk=5858 node_modules/webpack/bin/webpack.js&quot;,</span><br><span class=\"line\">&quot;debug:watch&quot;: &quot;node --inspect-brk=5859 node_modules/webpack --watch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因为<code>webpack</code>是直接安装在<code>node_modules</code>下的。</p>\n<p>#####3.调试<code>webpack</code>资源加载流程<br>修改之后再按<code>F5</code>启动调试，进入到<code>node_modules/webpack/bin/webpack.js</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-048340c05a0d0d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>这个文件的逻辑是判断一下<code>cli</code>是否安装了，然后去调<code>webpack.run</code>；<br>然后在<code>150行</code>打上断点，按<code>F5</code>，这里去调<code>webpack-cli</code>去了，然后<code>webpack-cli</code>又调回到<code>webpack/lib</code>，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1e01bb1787538324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>后面我们不去看<code>weboack-cli</code>，直接在<code>webpack/lib/Compiler.js</code>的<code>199行</code>打个断点<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-0fa9af34d6fbe129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####总体来说<code>webpack build</code>做了这几件事：</p>\n<p>######1.载入资源，这个过程会调用各个<code>loader</code>，然后用<code>loader</code>去载入资源文件，涉及到的模块是<code>loader-runner</code></p>\n<p>######2.代码压缩，这里只看<code>js</code>文件，涉及到的模块是<code>uglifyjs-webpack-plugin</code></p>\n<p>######3.代码生成，就是在<code>Compiler.js</code>中，<code>emit</code>了一下，存到文件中</p>\n<p>接下来看下<code>compile</code>函数，跟一下资源加载过程，在<code>536行</code>打个断点<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-00dbef693fd5b1e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>这里会调用<code>make这个hook</code>，<code>webpack</code>就是用<code>hook</code>这种东西实现了<code>插件化</code>，也就是<code>webpack</code>只负责调一下，至于哪个插件实现了<code>make这个hook</code>，<code>webpack</code>不管的，<code>单步调试</code>进去看一下<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-d7bc59f0a51045b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>跑到了<code>tapable</code>这个库中，这个<code>tapable</code>就是<code>webpack</code>实现<code>hook</code>的模块，<code>tapable</code>读起来比较费力，它是用生成代码的方式做的，这个应该是兼容性和功能性的考虑，因为<code>es6</code>的<code>proxy</code>能力有限，虽然能做一些拦截，但是做不到<code>hook</code>这么强大也不好搞。<br>继续，按<code>单步跳过（F10）</code>到下一行，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-87526c89c4571fc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>然后<code>单步调试（F11）</code>,就会跑到这里来，这个<code>VM1372</code>，就是<code>tapable</code>临时生成的代码，一般出现这种代码的时候，就意味着有人用了<code>new Function</code>这种东西，<code>动态生成函数</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1f28b5dc956a8d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>接下来<code>单步跳过</code>，<code>单步调试进入_fn0中</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-40401014e511e1f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>进去就到了<code>webpack/lib/SingleEntryPlugin.js</code>中的<code>第43行</code>，<code>compiler.hooks.make.tapAsync</code>(这个<code>SingleEntryPlugin.js</code>实现了<code>make这个hook</code>，然后<code>Compiler.js中this.make.hooks</code>调用时，就调到了。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-2d350417d3746875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>######总结：这里主要是从<code>Compiler.js的compile</code>函数，看<code>webpack</code>怎样从<code>this.hooks.make.callAsync</code>调到<code>SingleEntryPlugin.js</code>的<code>compiler.hooks.make.tapAsync</code>实现的。<br>中间涉及到了<code>tapable</code>，他提供了一个功能，让<code>hook</code>可以在其他地方实现，<code>webpack</code>只需要调一下这个<code>hook</code>就行了。同样的<code>hook</code>，可以实现多次，<code>webpack</code>会放到一个队列中调用。<code>hook</code>还有很多种类，原理是一样的，只不过处理方式不同，比如异步的，同步的。</p>\n<p>继续下去，现在到这里了，这里直接调用了<code>compilation.addEntry</code>，这是<code>webpack</code>的另一个重要的文件，<code>Compilation.js</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-bbad54913ffbdc11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>进入看看，在<code>1028行</code>打上断点，这里主要看这个文件，开始加载资源，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-b209e1ceb05e08ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>this._addModuleChain</code>的逻辑是这样的，先加载入口文件，然后再递归加载它依赖的文件，依赖的依赖的文件，就是通过<code>require的import</code>的那些。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7224e346c663ec05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>进去看<code>_addModuleChain</code>，开始加载入口文件了，往下看，在<code>943和953行</code>打上断点<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-07fa417f15b2d147.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>module</code>出来了，包含了如下这些内容<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-997e5bd85828fd32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-04adfdbce9885f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>request</code>是<code>loader</code>，<code>resource</code>是<code>待加载的资源</code>，<code>webpack</code>造出<code>module</code>后再调用这个<code>module</code>的<code>build</code>方法来加载资源，十分的<code>OO</code>，不直接干，而是先搞一个<code>factory</code>，让<code>factory</code>造<code>module</code>，再让<code>module</code>自己<code>build</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-40ab1ea0f4f32607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>这里开始<code>build</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-25416b5ac143d2e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-82f8a7f5759df618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-d99ffd1fd492c918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>this.buildModule</code> -&gt; <code>module.build</code> -&gt; <code>doBuild</code><br>最后到了<code>NormalModule.js</code>的<code>265行</code>调了<code>runLoaders</code>，从<code>loader-runner</code>里<code>require</code>进来的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; getContext, runLoaders &#125; = require(&quot;loader-runner&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>进去看看<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-3f9170a3eb71bfd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><code>loader-runner</code>首先会载入那个<code>loader</code>，然后在用<code>loader</code>加载资源，例子中的是<code>babel-loader</code>，资源文件就是<code>src/index.js</code>，这个<code>LOADER_EXECUTION</code>就是用<code>loader</code>载入资源用的<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-cf9b10ffaad1d8e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>fn</code>是<code>loader,args</code>是源文件的内容，，然后<code>webpack</code>调用这个<code>loader</code>，<code>babel-loader</code>可以看做一个函数把<code>ES6</code>代码转译成<code>ES5</code>。<br>以上就是解析入口文件，一图胜千言<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f0e1e57a1dc56c18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>###参考<br>webpack debug：<a href=\"https://github.com/thzt/debug-webpack\" target=\"_blank\" rel=\"noopener\">https://github.com/thzt/debug-webpack</a><br>webpack群侠传系列：<a href=\"https://www.jianshu.com/p/de262ad255c3\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/de262ad255c3</a><br>深入浅出webpack：<a href=\"https://wangchong.tech/webpack/\" target=\"_blank\" rel=\"noopener\">https://wangchong.tech/webpack/</a><br>webpack4.0官方文档：<a href=\"https://webpack.js.org/concepts\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/concepts</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>#####1.clone webpack代码到本地</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    devtool: &apos;source-map&apos;,      //配置source map，查看源文件</span><br><span class=\"line\">    entry: &#123;                              //构建入口</span><br><span class=\"line\">        index: path.resolve(__dirname, &apos;src/index.js&apos;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;                           //构建输出到dist目录</span><br><span class=\"line\">        devtoolModuleFilenameTemplate: &apos;[resource-path]&apos;,     //配置source map在浏览器中的展现方式</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;dist/&apos;),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module: &#123;      //配置loader，解析相应的文件</span><br><span class=\"line\">        rules: [</span><br><span class=\"line\">            &#123; test: /\\.js$/, use: &#123; loader: &apos;babel-loader&apos;, query: &#123; presets: [&apos;@babel/preset-env&apos;] &#125; &#125; &#125;,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a503b4db8abe3b19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>生成的<code>source map</code>文件<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1976ea2c3124540e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####2.启动调试项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>如果安装过程中出错，使用<code>管理员</code>身份再重新使用安装<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-5d70f55a86c2f268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p><code>package.json</code>里有用来调试的<code>script</code>，直接在<code>vscode</code>中按<code>F5</code>就可以启动调试了，<br><code>windows</code>用户会报错：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-9dadd65f6822ee3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>，<code>windows</code>用户需要把这两条行改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;debug:build&quot;: &quot;node --inspect-brk=5858 node_modules/webpack/bin/webpack.js&quot;,</span><br><span class=\"line\">&quot;debug:watch&quot;: &quot;node --inspect-brk=5859 node_modules/webpack --watch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>因为<code>webpack</code>是直接安装在<code>node_modules</code>下的。</p>\n<p>#####3.调试<code>webpack</code>资源加载流程<br>修改之后再按<code>F5</code>启动调试，进入到<code>node_modules/webpack/bin/webpack.js</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-048340c05a0d0d0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>这个文件的逻辑是判断一下<code>cli</code>是否安装了，然后去调<code>webpack.run</code>；<br>然后在<code>150行</code>打上断点，按<code>F5</code>，这里去调<code>webpack-cli</code>去了，然后<code>webpack-cli</code>又调回到<code>webpack/lib</code>，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1e01bb1787538324.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>后面我们不去看<code>weboack-cli</code>，直接在<code>webpack/lib/Compiler.js</code>的<code>199行</code>打个断点<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-0fa9af34d6fbe129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####总体来说<code>webpack build</code>做了这几件事：</p>\n<p>######1.载入资源，这个过程会调用各个<code>loader</code>，然后用<code>loader</code>去载入资源文件，涉及到的模块是<code>loader-runner</code></p>\n<p>######2.代码压缩，这里只看<code>js</code>文件，涉及到的模块是<code>uglifyjs-webpack-plugin</code></p>\n<p>######3.代码生成，就是在<code>Compiler.js</code>中，<code>emit</code>了一下，存到文件中</p>\n<p>接下来看下<code>compile</code>函数，跟一下资源加载过程，在<code>536行</code>打个断点<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-00dbef693fd5b1e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>这里会调用<code>make这个hook</code>，<code>webpack</code>就是用<code>hook</code>这种东西实现了<code>插件化</code>，也就是<code>webpack</code>只负责调一下，至于哪个插件实现了<code>make这个hook</code>，<code>webpack</code>不管的，<code>单步调试</code>进去看一下<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-d7bc59f0a51045b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>跑到了<code>tapable</code>这个库中，这个<code>tapable</code>就是<code>webpack</code>实现<code>hook</code>的模块，<code>tapable</code>读起来比较费力，它是用生成代码的方式做的，这个应该是兼容性和功能性的考虑，因为<code>es6</code>的<code>proxy</code>能力有限，虽然能做一些拦截，但是做不到<code>hook</code>这么强大也不好搞。<br>继续，按<code>单步跳过（F10）</code>到下一行，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-87526c89c4571fc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>然后<code>单步调试（F11）</code>,就会跑到这里来，这个<code>VM1372</code>，就是<code>tapable</code>临时生成的代码，一般出现这种代码的时候，就意味着有人用了<code>new Function</code>这种东西，<code>动态生成函数</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1f28b5dc956a8d13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>接下来<code>单步跳过</code>，<code>单步调试进入_fn0中</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-40401014e511e1f6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>进去就到了<code>webpack/lib/SingleEntryPlugin.js</code>中的<code>第43行</code>，<code>compiler.hooks.make.tapAsync</code>(这个<code>SingleEntryPlugin.js</code>实现了<code>make这个hook</code>，然后<code>Compiler.js中this.make.hooks</code>调用时，就调到了。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-2d350417d3746875.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>######总结：这里主要是从<code>Compiler.js的compile</code>函数，看<code>webpack</code>怎样从<code>this.hooks.make.callAsync</code>调到<code>SingleEntryPlugin.js</code>的<code>compiler.hooks.make.tapAsync</code>实现的。<br>中间涉及到了<code>tapable</code>，他提供了一个功能，让<code>hook</code>可以在其他地方实现，<code>webpack</code>只需要调一下这个<code>hook</code>就行了。同样的<code>hook</code>，可以实现多次，<code>webpack</code>会放到一个队列中调用。<code>hook</code>还有很多种类，原理是一样的，只不过处理方式不同，比如异步的，同步的。</p>\n<p>继续下去，现在到这里了，这里直接调用了<code>compilation.addEntry</code>，这是<code>webpack</code>的另一个重要的文件，<code>Compilation.js</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-bbad54913ffbdc11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>进入看看，在<code>1028行</code>打上断点，这里主要看这个文件，开始加载资源，<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-b209e1ceb05e08ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>this._addModuleChain</code>的逻辑是这样的，先加载入口文件，然后再递归加载它依赖的文件，依赖的依赖的文件，就是通过<code>require的import</code>的那些。<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-7224e346c663ec05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>进去看<code>_addModuleChain</code>，开始加载入口文件了，往下看，在<code>943和953行</code>打上断点<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-07fa417f15b2d147.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>module</code>出来了，包含了如下这些内容<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-997e5bd85828fd32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-04adfdbce9885f8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>request</code>是<code>loader</code>，<code>resource</code>是<code>待加载的资源</code>，<code>webpack</code>造出<code>module</code>后再调用这个<code>module</code>的<code>build</code>方法来加载资源，十分的<code>OO</code>，不直接干，而是先搞一个<code>factory</code>，让<code>factory</code>造<code>module</code>，再让<code>module</code>自己<code>build</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-40ab1ea0f4f32607.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>这里开始<code>build</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-25416b5ac143d2e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-82f8a7f5759df618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-d99ffd1fd492c918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>this.buildModule</code> -&gt; <code>module.build</code> -&gt; <code>doBuild</code><br>最后到了<code>NormalModule.js</code>的<code>265行</code>调了<code>runLoaders</code>，从<code>loader-runner</code>里<code>require</code>进来的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const &#123; getContext, runLoaders &#125; = require(&quot;loader-runner&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>进去看看<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-3f9170a3eb71bfd6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><code>loader-runner</code>首先会载入那个<code>loader</code>，然后在用<code>loader</code>加载资源，例子中的是<code>babel-loader</code>，资源文件就是<code>src/index.js</code>，这个<code>LOADER_EXECUTION</code>就是用<code>loader</code>载入资源用的<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-cf9b10ffaad1d8e2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>fn</code>是<code>loader,args</code>是源文件的内容，，然后<code>webpack</code>调用这个<code>loader</code>，<code>babel-loader</code>可以看做一个函数把<code>ES6</code>代码转译成<code>ES5</code>。<br>以上就是解析入口文件，一图胜千言<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f0e1e57a1dc56c18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>###参考<br>webpack debug：<a href=\"https://github.com/thzt/debug-webpack\" target=\"_blank\" rel=\"noopener\">https://github.com/thzt/debug-webpack</a><br>webpack群侠传系列：<a href=\"https://www.jianshu.com/p/de262ad255c3\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/de262ad255c3</a><br>深入浅出webpack：<a href=\"https://wangchong.tech/webpack/\" target=\"_blank\" rel=\"noopener\">https://wangchong.tech/webpack/</a><br>webpack4.0官方文档：<a href=\"https://webpack.js.org/concepts\" target=\"_blank\" rel=\"noopener\">https://webpack.js.org/concepts</a></p>\n"},{"title":"（一）egg-js快速人门跑出hello-world","_content":"一：什么是egg.js?\n\negg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。\n\n二：脚手架快速生成项目\n\n1.系统和环境：windows + node 8以上\n\n2.脚手架命令，快速初始化生成项目\n\n```\n\nnpm i egg-init -g\negg-init egg-myProject --type=simple\ncd egg-myProject\nnpm i\n\n```\n\n3.启动项目\n\n```\n\nnpm run dev\n\n```\n\n4.浏览器中打开http://127.0.0.1:7001：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三：不用脚手架，逐步搭建，熟悉项目目录结构\n\n1.初始化目录结构\n\n```\n\nmkdir egg-my-example\ncd egg-my-example\nnpm init\n\n```\n\nnpm init之后一路回车即可，然后安装egg  egg-bin:\n\n```\n\nnpm i egg --save\nnpm i egg-bin --save-dev\n\n```\n\n2.找到package.json文件添加\n\n```\n\n\"scripts\": {\n\n    \"dev\": \"egg-bin dev\"\n\n  },\n\n```\n\n3.编写controller文件，router路由，添加配置文件config\n\n在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js\n\n在项目 egg-my-example 目录下app文件夹新建router.js文件\n\n在项目 egg-my-example 目录下新建与app同级的config文件夹，（**注意：config文件夹跟app同级目录**），新建config.default.js文件\n\n```\n\n//app/controllter/home.js\n\nconst Controller = require('egg').Controller;\n\nclass HomeController extends Controller{\n\n    async index(){\n\n        this.ctx.body = \"hello world\";\n\n    }\n\n}\n\nmodule.exports = HomeController;\n\n```\n\n```\n\n//app/router.js\n\nmodule.exports = app => {\n\n  const { router, controller } = app;\n\n  router.get('/',controller.home.index);\n\n  router.get('/list',controller.news.list);\n\n}\n\n```\n\n```\n\n//config/congif.default.js\n\nexports.keys = '123456790';  //key是自己的cookie信息\n\n```\n\n整体项目目路结构如下：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.运行项目\n\n```\n\nnpm run dev\n\n```\n\n5.浏览器打开   http://127.0.0.1:7001\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。\n\n6.接下来可以继续编写view模板文件\n使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks\n```\nnpm i egg-view-nunjucks --save\n```\n开启插件：（config目录下新建plugin.js文件）\n```\n//config/plugin.js\nexports.nunjucks = {\n    enable:true,\n    package:'egg-view-nunjucks'\n}\n```\n添加view模板配置\n```\n//config/config.default.js\nexports.view = {\n    defaultViewEngine:'nunjucks',\n    mapping:{\n        '.tpl':'nunjucks'\n    }\n}\n```\n7.为一个列表页编写模板文件\n在app目录下新建一个view文件夹，将所有模板文件放到view下\n```\n//app/view/news/list.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n        <li class=\"item\">\n          <a href=\"{{ item.url }}\">{{ item.title }}</a>\n        </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n添加controller,router\n```\n//app/controller/news.js\nconst Controller = require('egg').Controller;\nclass NewsController extends Controller {\n   async list() {\n    const dataList = {\n      list: [\n        { id: 1, title: 'this is news 1', url: '/news/1' },\n        { id: 2, title: 'this is news 2', url: '/news/2' }\n      ]\n    };\n    await this.ctx.render('news/list.tpl', dataList);\n}\nmodule.exports = NewsController;\n```\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n}\n```\n8.浏览器中打开http://127.0.0.1:7001/list\n![image.png](https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：[https://eggjs.org/zh-cn/intro/quickstart.html](https://eggjs.org/zh-cn/intro/quickstart.html)\n","source":"_posts/（一）egg-js快速人门跑出hello-world.md","raw":"---\ntitle: （一）egg-js快速人门跑出hello-world\n---\n一：什么是egg.js?\n\negg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。\n\n二：脚手架快速生成项目\n\n1.系统和环境：windows + node 8以上\n\n2.脚手架命令，快速初始化生成项目\n\n```\n\nnpm i egg-init -g\negg-init egg-myProject --type=simple\ncd egg-myProject\nnpm i\n\n```\n\n3.启动项目\n\n```\n\nnpm run dev\n\n```\n\n4.浏览器中打开http://127.0.0.1:7001：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三：不用脚手架，逐步搭建，熟悉项目目录结构\n\n1.初始化目录结构\n\n```\n\nmkdir egg-my-example\ncd egg-my-example\nnpm init\n\n```\n\nnpm init之后一路回车即可，然后安装egg  egg-bin:\n\n```\n\nnpm i egg --save\nnpm i egg-bin --save-dev\n\n```\n\n2.找到package.json文件添加\n\n```\n\n\"scripts\": {\n\n    \"dev\": \"egg-bin dev\"\n\n  },\n\n```\n\n3.编写controller文件，router路由，添加配置文件config\n\n在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js\n\n在项目 egg-my-example 目录下app文件夹新建router.js文件\n\n在项目 egg-my-example 目录下新建与app同级的config文件夹，（**注意：config文件夹跟app同级目录**），新建config.default.js文件\n\n```\n\n//app/controllter/home.js\n\nconst Controller = require('egg').Controller;\n\nclass HomeController extends Controller{\n\n    async index(){\n\n        this.ctx.body = \"hello world\";\n\n    }\n\n}\n\nmodule.exports = HomeController;\n\n```\n\n```\n\n//app/router.js\n\nmodule.exports = app => {\n\n  const { router, controller } = app;\n\n  router.get('/',controller.home.index);\n\n  router.get('/list',controller.news.list);\n\n}\n\n```\n\n```\n\n//config/congif.default.js\n\nexports.keys = '123456790';  //key是自己的cookie信息\n\n```\n\n整体项目目路结构如下：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.运行项目\n\n```\n\nnpm run dev\n\n```\n\n5.浏览器打开   http://127.0.0.1:7001\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。\n\n6.接下来可以继续编写view模板文件\n使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks\n```\nnpm i egg-view-nunjucks --save\n```\n开启插件：（config目录下新建plugin.js文件）\n```\n//config/plugin.js\nexports.nunjucks = {\n    enable:true,\n    package:'egg-view-nunjucks'\n}\n```\n添加view模板配置\n```\n//config/config.default.js\nexports.view = {\n    defaultViewEngine:'nunjucks',\n    mapping:{\n        '.tpl':'nunjucks'\n    }\n}\n```\n7.为一个列表页编写模板文件\n在app目录下新建一个view文件夹，将所有模板文件放到view下\n```\n//app/view/news/list.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n        <li class=\"item\">\n          <a href=\"{{ item.url }}\">{{ item.title }}</a>\n        </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n添加controller,router\n```\n//app/controller/news.js\nconst Controller = require('egg').Controller;\nclass NewsController extends Controller {\n   async list() {\n    const dataList = {\n      list: [\n        { id: 1, title: 'this is news 1', url: '/news/1' },\n        { id: 2, title: 'this is news 2', url: '/news/2' }\n      ]\n    };\n    await this.ctx.render('news/list.tpl', dataList);\n}\nmodule.exports = NewsController;\n```\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n}\n```\n8.浏览器中打开http://127.0.0.1:7001/list\n![image.png](https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：[https://eggjs.org/zh-cn/intro/quickstart.html](https://eggjs.org/zh-cn/intro/quickstart.html)\n","slug":"（一）egg-js快速人门跑出hello-world","published":1,"date":"2019-09-13T09:08:38.659Z","updated":"2019-09-13T09:08:38.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh740000twsl6kv4fnpsq","content":"<p>一：什么是egg.js?</p>\n<p>egg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。</p>\n<p>二：脚手架快速生成项目</p>\n<p>1.系统和环境：windows + node 8以上</p>\n<p>2.脚手架命令，快速初始化生成项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg-init -g</span><br><span class=\"line\">egg-init egg-myProject --type=simple</span><br><span class=\"line\">cd egg-myProject</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>3.启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>4.浏览器中打开<a href=\"http://127.0.0.1:7001：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001：</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>三：不用脚手架，逐步搭建，熟悉项目目录结构</p>\n<p>1.初始化目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir egg-my-example</span><br><span class=\"line\">cd egg-my-example</span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>npm init之后一路回车即可，然后安装egg  egg-bin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg --save</span><br><span class=\"line\">npm i egg-bin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>2.找到package.json文件添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;dev&quot;: &quot;egg-bin dev&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>3.编写controller文件，router路由，添加配置文件config</p>\n<p>在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js</p>\n<p>在项目 egg-my-example 目录下app文件夹新建router.js文件</p>\n<p>在项目 egg-my-example 目录下新建与app同级的config文件夹，（<strong>注意：config文件夹跟app同级目录</strong>），新建config.default.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/controllter/home.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.ctx.body = &quot;hello world&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/router.js</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; router, controller &#125; = app;</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//config/congif.default.js</span><br><span class=\"line\"></span><br><span class=\"line\">exports.keys = &apos;123456790&apos;;  //key是自己的cookie信息</span><br></pre></td></tr></table></figure>\n\n<p>整体项目目路结构如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>4.运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>5.浏览器打开   <a href=\"http://127.0.0.1:7001\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。</p>\n<p>6.接下来可以继续编写view模板文件<br>使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i egg-view-nunjucks --save</span><br></pre></td></tr></table></figure>\n\n<p>开启插件：（config目录下新建plugin.js文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/plugin.js</span><br><span class=\"line\">exports.nunjucks = &#123;</span><br><span class=\"line\">    enable:true,</span><br><span class=\"line\">    package:&apos;egg-view-nunjucks&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加view模板配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/config.default.js</span><br><span class=\"line\">exports.view = &#123;</span><br><span class=\"line\">    defaultViewEngine:&apos;nunjucks&apos;,</span><br><span class=\"line\">    mapping:&#123;</span><br><span class=\"line\">        &apos;.tpl&apos;:&apos;nunjucks&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.为一个列表页编写模板文件<br>在app目录下新建一个view文件夹，将所有模板文件放到view下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/news/list.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/public/css/news.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;ul class=&quot;news-view view&quot;&gt;</span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">        &lt;li class=&quot;item&quot;&gt;</span><br><span class=\"line\">          &lt;a href=&quot;&#123;&#123; item.url &#125;&#125;&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加controller,router</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/news.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class NewsController extends Controller &#123;</span><br><span class=\"line\">   async list() &#123;</span><br><span class=\"line\">    const dataList = &#123;</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123; id: 1, title: &apos;this is news 1&apos;, url: &apos;/news/1&apos; &#125;,</span><br><span class=\"line\">        &#123; id: 2, title: &apos;this is news 2&apos;, url: &apos;/news/2&apos; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    await this.ctx.render(&apos;news/list.tpl&apos;, dataList);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = NewsController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>8.浏览器中打开<a href=\"http://127.0.0.1:7001/list\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001/list</a><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>参考：<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\" target=\"_blank\" rel=\"noopener\">https://eggjs.org/zh-cn/intro/quickstart.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：什么是egg.js?</p>\n<p>egg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。</p>\n<p>二：脚手架快速生成项目</p>\n<p>1.系统和环境：windows + node 8以上</p>\n<p>2.脚手架命令，快速初始化生成项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg-init -g</span><br><span class=\"line\">egg-init egg-myProject --type=simple</span><br><span class=\"line\">cd egg-myProject</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>3.启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>4.浏览器中打开<a href=\"http://127.0.0.1:7001：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001：</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>三：不用脚手架，逐步搭建，熟悉项目目录结构</p>\n<p>1.初始化目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir egg-my-example</span><br><span class=\"line\">cd egg-my-example</span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>npm init之后一路回车即可，然后安装egg  egg-bin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg --save</span><br><span class=\"line\">npm i egg-bin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>2.找到package.json文件添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;dev&quot;: &quot;egg-bin dev&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>3.编写controller文件，router路由，添加配置文件config</p>\n<p>在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js</p>\n<p>在项目 egg-my-example 目录下app文件夹新建router.js文件</p>\n<p>在项目 egg-my-example 目录下新建与app同级的config文件夹，（<strong>注意：config文件夹跟app同级目录</strong>），新建config.default.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/controllter/home.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.ctx.body = &quot;hello world&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/router.js</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; router, controller &#125; = app;</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//config/congif.default.js</span><br><span class=\"line\"></span><br><span class=\"line\">exports.keys = &apos;123456790&apos;;  //key是自己的cookie信息</span><br></pre></td></tr></table></figure>\n\n<p>整体项目目路结构如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>4.运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>5.浏览器打开   <a href=\"http://127.0.0.1:7001\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。</p>\n<p>6.接下来可以继续编写view模板文件<br>使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i egg-view-nunjucks --save</span><br></pre></td></tr></table></figure>\n\n<p>开启插件：（config目录下新建plugin.js文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/plugin.js</span><br><span class=\"line\">exports.nunjucks = &#123;</span><br><span class=\"line\">    enable:true,</span><br><span class=\"line\">    package:&apos;egg-view-nunjucks&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加view模板配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/config.default.js</span><br><span class=\"line\">exports.view = &#123;</span><br><span class=\"line\">    defaultViewEngine:&apos;nunjucks&apos;,</span><br><span class=\"line\">    mapping:&#123;</span><br><span class=\"line\">        &apos;.tpl&apos;:&apos;nunjucks&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.为一个列表页编写模板文件<br>在app目录下新建一个view文件夹，将所有模板文件放到view下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/news/list.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/public/css/news.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;ul class=&quot;news-view view&quot;&gt;</span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">        &lt;li class=&quot;item&quot;&gt;</span><br><span class=\"line\">          &lt;a href=&quot;&#123;&#123; item.url &#125;&#125;&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加controller,router</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/news.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class NewsController extends Controller &#123;</span><br><span class=\"line\">   async list() &#123;</span><br><span class=\"line\">    const dataList = &#123;</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123; id: 1, title: &apos;this is news 1&apos;, url: &apos;/news/1&apos; &#125;,</span><br><span class=\"line\">        &#123; id: 2, title: &apos;this is news 2&apos;, url: &apos;/news/2&apos; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    await this.ctx.render(&apos;news/list.tpl&apos;, dataList);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = NewsController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>8.浏览器中打开<a href=\"http://127.0.0.1:7001/list\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001/list</a><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>参考：<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\" target=\"_blank\" rel=\"noopener\">https://eggjs.org/zh-cn/intro/quickstart.html</a></p>\n"},{"title":"（Node-mongo系列）mongoDB-windows安装教程（一）","_content":"官方下载安装包\nhttps://www.mongodb.com/download-center/community\n直接下载msi文件\n安装步骤如下：\n#####1.install mongoDB\n直接双击下载好的`msi`文件，根据提示一步步安装，我是直接安装默认存放位置`C:\\Program Files\\MongoDB\\`；\n![](https://upload-images.jianshu.io/upload_images/5541401-aecdb0bbf7150e53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####2.Create database directory\n安装完成之后需要新建一个文件夹用来`存放数据`，因为数据量比较大，安装在`D盘下的data文件夹`里面，在这里建一个`db文件夹`，一个`log的日志文件夹`；\n![](https://upload-images.jianshu.io/upload_images/5541401-8fa4183c3accfaac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####3.Start your MongoDB database\n以管理员身份运行`cmd`，从官网拷贝命令修改数据的位置`d盘`，以及`版本`是`4.0`，运行命令，\n```\n\"C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongod.exe\" --dbpath=\"d:\\data\\db\"\n```\n出现以下日志说明安装成功了，端口是`27017`\n```\n2019-04-18T11:28:24.645+0800 I NETWORK  [initandlisten] waiting for connections\non port 27017\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-bbf70a22f41364b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####4. Connect to MongoDB\n运行命令，可以看到`mongodb`已经启动了\n```\n\"C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe\"\n```\n```\nC:\\windows\\system32>\"C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe\"\nMongoDB shell version v4.0.9\nconnecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb\nImplicit session: session { \"id\" : UUID(\"28fbc481-853c-485f-9c4b-388377327f5f\")\n}\nMongoDB server version: 4.0.9\nWelcome to the MongoDB shell.\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-e14c36bd5e813ed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####5.查看数据库\n`MongoDB Shell`是`MongoDB`自带的交互式`Javascript shell`,用来对`MongoDB`进行操作和管理的交互式环境。\n直接输入`show dbs`；\n```\n---\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n>\n```\n#####6.启动、停止mongo服务（都是管理员身份打开cmd）\n```\nnet start MongoDB  //启动\nnet stop MongoDB  //停止\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-994407d021ad1843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n卸载MongoDB，通过`sc.exe delete MongoDB`，然后到应用程序里面卸载即可。\n\n最后可以将mongoDB的bin目录写环境变量中，可以全局启动`mongoDB`的` shell`。\n```\nC:\\Program Files\\MongoDB\\Server\\4.0\\bin\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-9a7788b9970d1cbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 管理员身份打开`cmd`，输入`mongo`，即可打开`mongo shell`\n![](https://upload-images.jianshu.io/upload_images/5541401-4d7807089fea4e83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`mongoDB`数据库连接成功，默认是`27017`端口\n```\nconnecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb\n```\n\n参考：\nhttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows-unattended/#start-your-mongodb-database\n\n\n\n\n\n\n\n\n\n","source":"_posts/（Node-mongo系列）mongoDB-windows安装教程（一）.md","raw":"---\ntitle: （Node-mongo系列）mongoDB-windows安装教程（一）\n---\n官方下载安装包\nhttps://www.mongodb.com/download-center/community\n直接下载msi文件\n安装步骤如下：\n#####1.install mongoDB\n直接双击下载好的`msi`文件，根据提示一步步安装，我是直接安装默认存放位置`C:\\Program Files\\MongoDB\\`；\n![](https://upload-images.jianshu.io/upload_images/5541401-aecdb0bbf7150e53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####2.Create database directory\n安装完成之后需要新建一个文件夹用来`存放数据`，因为数据量比较大，安装在`D盘下的data文件夹`里面，在这里建一个`db文件夹`，一个`log的日志文件夹`；\n![](https://upload-images.jianshu.io/upload_images/5541401-8fa4183c3accfaac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####3.Start your MongoDB database\n以管理员身份运行`cmd`，从官网拷贝命令修改数据的位置`d盘`，以及`版本`是`4.0`，运行命令，\n```\n\"C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongod.exe\" --dbpath=\"d:\\data\\db\"\n```\n出现以下日志说明安装成功了，端口是`27017`\n```\n2019-04-18T11:28:24.645+0800 I NETWORK  [initandlisten] waiting for connections\non port 27017\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-bbf70a22f41364b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#####4. Connect to MongoDB\n运行命令，可以看到`mongodb`已经启动了\n```\n\"C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe\"\n```\n```\nC:\\windows\\system32>\"C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe\"\nMongoDB shell version v4.0.9\nconnecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb\nImplicit session: session { \"id\" : UUID(\"28fbc481-853c-485f-9c4b-388377327f5f\")\n}\nMongoDB server version: 4.0.9\nWelcome to the MongoDB shell.\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-e14c36bd5e813ed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#####5.查看数据库\n`MongoDB Shell`是`MongoDB`自带的交互式`Javascript shell`,用来对`MongoDB`进行操作和管理的交互式环境。\n直接输入`show dbs`；\n```\n---\n> show dbs\nadmin   0.000GB\nconfig  0.000GB\nlocal   0.000GB\n>\n```\n#####6.启动、停止mongo服务（都是管理员身份打开cmd）\n```\nnet start MongoDB  //启动\nnet stop MongoDB  //停止\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-994407d021ad1843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n卸载MongoDB，通过`sc.exe delete MongoDB`，然后到应用程序里面卸载即可。\n\n最后可以将mongoDB的bin目录写环境变量中，可以全局启动`mongoDB`的` shell`。\n```\nC:\\Program Files\\MongoDB\\Server\\4.0\\bin\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-9a7788b9970d1cbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n 管理员身份打开`cmd`，输入`mongo`，即可打开`mongo shell`\n![](https://upload-images.jianshu.io/upload_images/5541401-4d7807089fea4e83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n`mongoDB`数据库连接成功，默认是`27017`端口\n```\nconnecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb\n```\n\n参考：\nhttps://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows-unattended/#start-your-mongodb-database\n\n\n\n\n\n\n\n\n\n","slug":"（Node-mongo系列）mongoDB-windows安装教程（一）","published":1,"date":"2019-09-13T02:18:12.171Z","updated":"2019-09-13T09:08:36.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh741000uwsl65o0hzs9m","content":"<p>官方下载安装包<br><a href=\"https://www.mongodb.com/download-center/community\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center/community</a><br>直接下载msi文件<br>安装步骤如下：</p>\n<p>#####1.install mongoDB<br>直接双击下载好的<code>msi</code>文件，根据提示一步步安装，我是直接安装默认存放位置<code>C:\\Program Files\\MongoDB\\</code>；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-aecdb0bbf7150e53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####2.Create database directory<br>安装完成之后需要新建一个文件夹用来<code>存放数据</code>，因为数据量比较大，安装在<code>D盘下的data文件夹</code>里面，在这里建一个<code>db文件夹</code>，一个<code>log的日志文件夹</code>；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8fa4183c3accfaac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####3.Start your MongoDB database<br>以管理员身份运行<code>cmd</code>，从官网拷贝命令修改数据的位置<code>d盘</code>，以及<code>版本</code>是<code>4.0</code>，运行命令，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongod.exe&quot; --dbpath=&quot;d:\\data\\db&quot;</span><br></pre></td></tr></table></figure>\n\n<p>出现以下日志说明安装成功了，端口是<code>27017</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-04-18T11:28:24.645+0800 I NETWORK  [initandlisten] waiting for connections</span><br><span class=\"line\">on port 27017</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-bbf70a22f41364b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####4. Connect to MongoDB<br>运行命令，可以看到<code>mongodb</code>已经启动了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\windows\\system32&gt;&quot;C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe&quot;</span><br><span class=\"line\">MongoDB shell version v4.0.9</span><br><span class=\"line\">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;28fbc481-853c-485f-9c4b-388377327f5f&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MongoDB server version: 4.0.9</span><br><span class=\"line\">Welcome to the MongoDB shell.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-e14c36bd5e813ed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####5.查看数据库<br><code>MongoDB Shell</code>是<code>MongoDB</code>自带的交互式<code>Javascript shell</code>,用来对<code>MongoDB</code>进行操作和管理的交互式环境。<br>直接输入<code>show dbs</code>；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n<p>#####6.启动、停止mongo服务（都是管理员身份打开cmd）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB  //启动</span><br><span class=\"line\">net stop MongoDB  //停止</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-994407d021ad1843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>卸载MongoDB，通过<code>sc.exe delete MongoDB</code>，然后到应用程序里面卸载即可。</p>\n<p>最后可以将mongoDB的bin目录写环境变量中，可以全局启动<code>mongoDB</code>的<code>shell</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\MongoDB\\Server\\4.0\\bin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-9a7788b9970d1cbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br> 管理员身份打开<code>cmd</code>，输入<code>mongo</code>，即可打开<code>mongo shell</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-4d7807089fea4e83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>mongoDB</code>数据库连接成功，默认是<code>27017</code>端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows-unattended/#start-your-mongodb-database\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows-unattended/#start-your-mongodb-database</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>官方下载安装包<br><a href=\"https://www.mongodb.com/download-center/community\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center/community</a><br>直接下载msi文件<br>安装步骤如下：</p>\n<p>#####1.install mongoDB<br>直接双击下载好的<code>msi</code>文件，根据提示一步步安装，我是直接安装默认存放位置<code>C:\\Program Files\\MongoDB\\</code>；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-aecdb0bbf7150e53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####2.Create database directory<br>安装完成之后需要新建一个文件夹用来<code>存放数据</code>，因为数据量比较大，安装在<code>D盘下的data文件夹</code>里面，在这里建一个<code>db文件夹</code>，一个<code>log的日志文件夹</code>；<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8fa4183c3accfaac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####3.Start your MongoDB database<br>以管理员身份运行<code>cmd</code>，从官网拷贝命令修改数据的位置<code>d盘</code>，以及<code>版本</code>是<code>4.0</code>，运行命令，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongod.exe&quot; --dbpath=&quot;d:\\data\\db&quot;</span><br></pre></td></tr></table></figure>\n\n<p>出现以下日志说明安装成功了，端口是<code>27017</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-04-18T11:28:24.645+0800 I NETWORK  [initandlisten] waiting for connections</span><br><span class=\"line\">on port 27017</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-bbf70a22f41364b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####4. Connect to MongoDB<br>运行命令，可以看到<code>mongodb</code>已经启动了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\windows\\system32&gt;&quot;C:\\Program Files\\MongoDB\\Server\\4.0\\bin\\mongo.exe&quot;</span><br><span class=\"line\">MongoDB shell version v4.0.9</span><br><span class=\"line\">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;28fbc481-853c-485f-9c4b-388377327f5f&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MongoDB server version: 4.0.9</span><br><span class=\"line\">Welcome to the MongoDB shell.</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-e14c36bd5e813ed2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>#####5.查看数据库<br><code>MongoDB Shell</code>是<code>MongoDB</code>自带的交互式<code>Javascript shell</code>,用来对<code>MongoDB</code>进行操作和管理的交互式环境。<br>直接输入<code>show dbs</code>；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">&gt; show dbs</span><br><span class=\"line\">admin   0.000GB</span><br><span class=\"line\">config  0.000GB</span><br><span class=\"line\">local   0.000GB</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n\n<p>#####6.启动、停止mongo服务（都是管理员身份打开cmd）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net start MongoDB  //启动</span><br><span class=\"line\">net stop MongoDB  //停止</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-994407d021ad1843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>卸载MongoDB，通过<code>sc.exe delete MongoDB</code>，然后到应用程序里面卸载即可。</p>\n<p>最后可以将mongoDB的bin目录写环境变量中，可以全局启动<code>mongoDB</code>的<code>shell</code>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Program Files\\MongoDB\\Server\\4.0\\bin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-9a7788b9970d1cbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br> 管理员身份打开<code>cmd</code>，输入<code>mongo</code>，即可打开<code>mongo shell</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-4d7807089fea4e83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><code>mongoDB</code>数据库连接成功，默认是<code>27017</code>端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br></pre></td></tr></table></figure>\n\n<p>参考：<br><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows-unattended/#start-your-mongodb-database\" target=\"_blank\" rel=\"noopener\">https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows-unattended/#start-your-mongodb-database</a></p>\n"},{"title":"（二）egg-js与前端打通做到前后端分离","_content":"**此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。**\n\n思路是：首先给前端启动一个服务，用`http-server` 或者 `webpack-dev-server`\n              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。\n**一：http-server  启动一个前端服务**\n\n新建一个前端项目：\n```\nmkdir http-server-test\ncd http-server-test\nnpm install http-server -g\n```\n新建一个`test.html`页面，随便写个hello world,然后运行\n```\nhttp-server\n```\n访问`http://127.0.0.1:8080/test.html` 得到下面页面\n![](https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n前端`http server`就启动好了。\n\n**二：前端项目通过webpack工具+react前端框架打包出js,css文件**\n\n1.进到http-server-test目录,`npm init`一路回车即可\n```\nnpm init\n```\n2.安装相关依赖\n```\n//babel编译js相关\nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev\n```\n```\n//css文件处理相关\nnpm install css-loader style-loader less-loader postcss-loader less --save-dev\n```\n```\n//将css达成独立的css文件\n//加上@next是为了防止出错，遇到了这个坑\nnpm install extract-text-webpack-plugin@next --save-dev\n```\n```\n//安装react框架相关\nnpm install react react-dom --save \n```\n```\n//webpack打包文件相关依赖\nnpm install webpack -g\nnpm install webpack --save-dev\n//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下\nnpm install webpack-cli --save-dev       \n```\n3.配置babel,新建一个`.babelrc`文件，写入如下代码\n```\n{\n    \"presets\":[\"es2015\",\"react\"]\n}\n```\n4.配置webpack文件，新建`webpack.config.js`文件，写入如下代码：\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n    context:path.resolve(__dirname,''),\n    entry:{\n        main:'./src/index.jsx'\n    },\n    output:{\n        path:path.resolve(__dirname,'dist/'),\n        filename:'index.js'\n    },\n    module:{\n        rules:[\n            {\n                test:/\\.jsx$/,\n                use:'babel-loader'\n            },\n            {\n                test:/\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: \"style-loader\",\n                    use: [\"css-loader\",\"less-loader\"]\n                  })\n            }\n        ]\n    },\n    plugins:[\n        new webpack.DefinePlugin({\n            'process.env.NODE_ENV':JSON.stringify('development'),\n            __DEV__:true\n        }),\n        new ExtractTextPlugin('index.css'),\n    ]\n}\n```\n5.继续丰富目录，目路结构（`dist`目录是`webpack`打包自动生成的文件，不需要手动创建）如下：\n![](https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//src/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>hello</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"../dist/index.js\"></script>\n</body>\n</html>\n```\n```\n//src/index.jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport HelloComponent from '../components/hello.jsx'\nimport './index.less'\n\nReactDOM.render(\n    <div className=\"app-box\">\n        <HelloComponent />\n    </div>,\n    document.getElementById('app')\n);\n```\n```\n//src/index.less\n.app-box{\n    width:200px;\n    height: 400px;\n    margin:50px auto;\n    border:1px solid #ccc;\n}\n```\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\n\nexport default class HelloComponent extends React.Component{\n    render(){\n        return(\n            <div className=\"hello-box\">hello world</div>\n        );\n    }\n}\n```\n```\n//components/hello.less\n.hello-box{\n    color:#f00;\n}\n```\n6.运行webpack打包出文件\n```\nwebpack --watch\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**三：将打包出来的css，js文件通过script src=\"\"链接到egg.js的模板文件中**\n\n打开上一节新建的egg项目\n![](https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//app/controller/home.js\nconst Controller = require('egg').Controller;\nclass HomeController extends Controller{\n    async index(){\n       await this.ctx.render('home/home.tpl');\n    }\n}\nmodule.exports = HomeController;\n```\n```\n//app/view/home/home.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"http://127.0.0.1:8080/dist/index.css\" />\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"http://127.0.0.1:8080/dist/index.js\"></script>\n  </body>\n</html>\n```\n最后命令行运行：\n```\nnpm run dev\n```\n访问`http://127.0.0.1:7001/`\n![](https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意：前端的服务http-server,以及egg的服务都要开启。**\n\n结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。\n","source":"_posts/（二）egg-js与前端打通做到前后端分离.md","raw":"---\ntitle: （二）egg-js与前端打通做到前后端分离\n---\n**此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。**\n\n思路是：首先给前端启动一个服务，用`http-server` 或者 `webpack-dev-server`\n              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。\n**一：http-server  启动一个前端服务**\n\n新建一个前端项目：\n```\nmkdir http-server-test\ncd http-server-test\nnpm install http-server -g\n```\n新建一个`test.html`页面，随便写个hello world,然后运行\n```\nhttp-server\n```\n访问`http://127.0.0.1:8080/test.html` 得到下面页面\n![](https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n前端`http server`就启动好了。\n\n**二：前端项目通过webpack工具+react前端框架打包出js,css文件**\n\n1.进到http-server-test目录,`npm init`一路回车即可\n```\nnpm init\n```\n2.安装相关依赖\n```\n//babel编译js相关\nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev\n```\n```\n//css文件处理相关\nnpm install css-loader style-loader less-loader postcss-loader less --save-dev\n```\n```\n//将css达成独立的css文件\n//加上@next是为了防止出错，遇到了这个坑\nnpm install extract-text-webpack-plugin@next --save-dev\n```\n```\n//安装react框架相关\nnpm install react react-dom --save \n```\n```\n//webpack打包文件相关依赖\nnpm install webpack -g\nnpm install webpack --save-dev\n//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下\nnpm install webpack-cli --save-dev       \n```\n3.配置babel,新建一个`.babelrc`文件，写入如下代码\n```\n{\n    \"presets\":[\"es2015\",\"react\"]\n}\n```\n4.配置webpack文件，新建`webpack.config.js`文件，写入如下代码：\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n    context:path.resolve(__dirname,''),\n    entry:{\n        main:'./src/index.jsx'\n    },\n    output:{\n        path:path.resolve(__dirname,'dist/'),\n        filename:'index.js'\n    },\n    module:{\n        rules:[\n            {\n                test:/\\.jsx$/,\n                use:'babel-loader'\n            },\n            {\n                test:/\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: \"style-loader\",\n                    use: [\"css-loader\",\"less-loader\"]\n                  })\n            }\n        ]\n    },\n    plugins:[\n        new webpack.DefinePlugin({\n            'process.env.NODE_ENV':JSON.stringify('development'),\n            __DEV__:true\n        }),\n        new ExtractTextPlugin('index.css'),\n    ]\n}\n```\n5.继续丰富目录，目路结构（`dist`目录是`webpack`打包自动生成的文件，不需要手动创建）如下：\n![](https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//src/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>hello</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"../dist/index.js\"></script>\n</body>\n</html>\n```\n```\n//src/index.jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport HelloComponent from '../components/hello.jsx'\nimport './index.less'\n\nReactDOM.render(\n    <div className=\"app-box\">\n        <HelloComponent />\n    </div>,\n    document.getElementById('app')\n);\n```\n```\n//src/index.less\n.app-box{\n    width:200px;\n    height: 400px;\n    margin:50px auto;\n    border:1px solid #ccc;\n}\n```\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\n\nexport default class HelloComponent extends React.Component{\n    render(){\n        return(\n            <div className=\"hello-box\">hello world</div>\n        );\n    }\n}\n```\n```\n//components/hello.less\n.hello-box{\n    color:#f00;\n}\n```\n6.运行webpack打包出文件\n```\nwebpack --watch\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**三：将打包出来的css，js文件通过script src=\"\"链接到egg.js的模板文件中**\n\n打开上一节新建的egg项目\n![](https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//app/controller/home.js\nconst Controller = require('egg').Controller;\nclass HomeController extends Controller{\n    async index(){\n       await this.ctx.render('home/home.tpl');\n    }\n}\nmodule.exports = HomeController;\n```\n```\n//app/view/home/home.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"http://127.0.0.1:8080/dist/index.css\" />\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"http://127.0.0.1:8080/dist/index.js\"></script>\n  </body>\n</html>\n```\n最后命令行运行：\n```\nnpm run dev\n```\n访问`http://127.0.0.1:7001/`\n![](https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意：前端的服务http-server,以及egg的服务都要开启。**\n\n结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。\n","slug":"（二）egg-js与前端打通做到前后端分离","published":1,"date":"2019-09-13T09:08:37.382Z","updated":"2019-09-13T09:08:37.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh742000vwsl64uwnnsfz","content":"<p><strong>此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。</strong></p>\n<p>思路是：首先给前端启动一个服务，用<code>http-server</code> 或者 <code>webpack-dev-server</code><br>              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。<br><strong>一：http-server  启动一个前端服务</strong></p>\n<p>新建一个前端项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir http-server-test</span><br><span class=\"line\">cd http-server-test</span><br><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n\n<p>新建一个<code>test.html</code>页面，随便写个hello world,然后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:8080/test.html</code> 得到下面页面<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>前端<code>http server</code>就启动好了。</p>\n<p><strong>二：前端项目通过webpack工具+react前端框架打包出js,css文件</strong></p>\n<p>1.进到http-server-test目录,<code>npm init</code>一路回车即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>2.安装相关依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//babel编译js相关</span><br><span class=\"line\">npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css文件处理相关</span><br><span class=\"line\">npm install css-loader style-loader less-loader postcss-loader less --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将css达成独立的css文件</span><br><span class=\"line\">//加上@next是为了防止出错，遇到了这个坑</span><br><span class=\"line\">npm install extract-text-webpack-plugin@next --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装react框架相关</span><br><span class=\"line\">npm install react react-dom --save</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack打包文件相关依赖</span><br><span class=\"line\">npm install webpack -g</span><br><span class=\"line\">npm install webpack --save-dev</span><br><span class=\"line\">//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下</span><br><span class=\"line\">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>3.配置babel,新建一个<code>.babelrc</code>文件，写入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.配置webpack文件，新建<code>webpack.config.js</code>文件，写入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    context:path.resolve(__dirname,&apos;&apos;),</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        main:&apos;./src/index.jsx&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:path.resolve(__dirname,&apos;dist/&apos;),</span><br><span class=\"line\">        filename:&apos;index.js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.jsx$/,</span><br><span class=\"line\">                use:&apos;babel-loader&apos;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.less$/,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                    use: [&quot;css-loader&quot;,&quot;less-loader&quot;]</span><br><span class=\"line\">                  &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            &apos;process.env.NODE_ENV&apos;:JSON.stringify(&apos;development&apos;),</span><br><span class=\"line\">            __DEV__:true</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new ExtractTextPlugin(&apos;index.css&apos;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.继续丰富目录，目路结构（<code>dist</code>目录是<code>webpack</code>打包自动生成的文件，不需要手动创建）如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import HelloComponent from &apos;../components/hello.jsx&apos;</span><br><span class=\"line\">import &apos;./index.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div className=&quot;app-box&quot;&gt;</span><br><span class=\"line\">        &lt;HelloComponent /&gt;</span><br><span class=\"line\">    &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.less</span><br><span class=\"line\">.app-box&#123;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">    margin:50px auto;</span><br><span class=\"line\">    border:1px solid #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;hello world&lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.less</span><br><span class=\"line\">.hello-box&#123;</span><br><span class=\"line\">    color:#f00;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.运行webpack打包出文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --watch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>三：将打包出来的css，js文件通过script src=””链接到egg.js的模板文件中</strong></p>\n<p>打开上一节新建的egg项目<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/home.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\">       await this.ctx.render(&apos;home/home.tpl&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/home/home.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://127.0.0.1:8080/dist/index.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://127.0.0.1:8080/dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后命令行运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:7001/</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>注意：前端的服务http-server,以及egg的服务都要开启。</strong></p>\n<p>结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。</strong></p>\n<p>思路是：首先给前端启动一个服务，用<code>http-server</code> 或者 <code>webpack-dev-server</code><br>              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。<br><strong>一：http-server  启动一个前端服务</strong></p>\n<p>新建一个前端项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir http-server-test</span><br><span class=\"line\">cd http-server-test</span><br><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n\n<p>新建一个<code>test.html</code>页面，随便写个hello world,然后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:8080/test.html</code> 得到下面页面<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>前端<code>http server</code>就启动好了。</p>\n<p><strong>二：前端项目通过webpack工具+react前端框架打包出js,css文件</strong></p>\n<p>1.进到http-server-test目录,<code>npm init</code>一路回车即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>2.安装相关依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//babel编译js相关</span><br><span class=\"line\">npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css文件处理相关</span><br><span class=\"line\">npm install css-loader style-loader less-loader postcss-loader less --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将css达成独立的css文件</span><br><span class=\"line\">//加上@next是为了防止出错，遇到了这个坑</span><br><span class=\"line\">npm install extract-text-webpack-plugin@next --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装react框架相关</span><br><span class=\"line\">npm install react react-dom --save</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack打包文件相关依赖</span><br><span class=\"line\">npm install webpack -g</span><br><span class=\"line\">npm install webpack --save-dev</span><br><span class=\"line\">//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下</span><br><span class=\"line\">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>3.配置babel,新建一个<code>.babelrc</code>文件，写入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.配置webpack文件，新建<code>webpack.config.js</code>文件，写入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    context:path.resolve(__dirname,&apos;&apos;),</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        main:&apos;./src/index.jsx&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:path.resolve(__dirname,&apos;dist/&apos;),</span><br><span class=\"line\">        filename:&apos;index.js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.jsx$/,</span><br><span class=\"line\">                use:&apos;babel-loader&apos;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.less$/,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                    use: [&quot;css-loader&quot;,&quot;less-loader&quot;]</span><br><span class=\"line\">                  &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            &apos;process.env.NODE_ENV&apos;:JSON.stringify(&apos;development&apos;),</span><br><span class=\"line\">            __DEV__:true</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new ExtractTextPlugin(&apos;index.css&apos;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.继续丰富目录，目路结构（<code>dist</code>目录是<code>webpack</code>打包自动生成的文件，不需要手动创建）如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import HelloComponent from &apos;../components/hello.jsx&apos;</span><br><span class=\"line\">import &apos;./index.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div className=&quot;app-box&quot;&gt;</span><br><span class=\"line\">        &lt;HelloComponent /&gt;</span><br><span class=\"line\">    &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.less</span><br><span class=\"line\">.app-box&#123;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">    margin:50px auto;</span><br><span class=\"line\">    border:1px solid #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;hello world&lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.less</span><br><span class=\"line\">.hello-box&#123;</span><br><span class=\"line\">    color:#f00;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.运行webpack打包出文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --watch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>三：将打包出来的css，js文件通过script src=””链接到egg.js的模板文件中</strong></p>\n<p>打开上一节新建的egg项目<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/home.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\">       await this.ctx.render(&apos;home/home.tpl&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/home/home.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://127.0.0.1:8080/dist/index.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://127.0.0.1:8080/dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后命令行运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:7001/</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>注意：前端的服务http-server,以及egg的服务都要开启。</strong></p>\n<p>结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。</p>\n"},{"title":"（一）egg-js快速人门，跑出hello-world","_content":"一：什么是egg.js?\n\negg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。\n\n二：脚手架快速生成项目\n\n1.系统和环境：windows + node 8以上\n\n2.脚手架命令，快速初始化生成项目\n\n```\n\nnpm i egg-init -g\negg-init egg-myProject --type=simple\ncd egg-myProject\nnpm i\n\n```\n\n3.启动项目\n\n```\n\nnpm run dev\n\n```\n\n4.浏览器中打开http://127.0.0.1:7001：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三：不用脚手架，逐步搭建，熟悉项目目录结构\n\n1.初始化目录结构\n\n```\n\nmkdir egg-my-example\ncd egg-my-example\nnpm init\n\n```\n\nnpm init之后一路回车即可，然后安装egg  egg-bin:\n\n```\n\nnpm i egg --save\nnpm i egg-bin --save-dev\n\n```\n\n2.找到package.json文件添加\n\n```\n\n\"scripts\": {\n\n    \"dev\": \"egg-bin dev\"\n\n  },\n\n```\n\n3.编写controller文件，router路由，添加配置文件config\n\n在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js\n\n在项目 egg-my-example 目录下app文件夹新建router.js文件\n\n在项目 egg-my-example 目录下新建与app同级的config文件夹，（**注意：config文件夹跟app同级目录**），新建config.default.js文件\n\n```\n\n//app/controllter/home.js\n\nconst Controller = require('egg').Controller;\n\nclass HomeController extends Controller{\n\n    async index(){\n\n        this.ctx.body = \"hello world\";\n\n    }\n\n}\n\nmodule.exports = HomeController;\n\n```\n\n```\n\n//app/router.js\n\nmodule.exports = app => {\n\n  const { router, controller } = app;\n\n  router.get('/',controller.home.index);\n\n  router.get('/list',controller.news.list);\n\n}\n\n```\n\n```\n\n//config/congif.default.js\n\nexports.keys = '123456790';  //key是自己的cookie信息\n\n```\n\n整体项目目路结构如下：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.运行项目\n\n```\n\nnpm run dev\n\n```\n\n5.浏览器打开   http://127.0.0.1:7001\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。\n\n6.接下来可以继续编写view模板文件\n使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks\n```\nnpm i egg-view-nunjucks --save\n```\n开启插件：（config目录下新建plugin.js文件）\n```\n//config/plugin.js\nexports.nunjucks = {\n    enable:true,\n    package:'egg-view-nunjucks'\n}\n```\n添加view模板配置\n```\n//config/config.default.js\nexports.view = {\n    defaultViewEngine:'nunjucks',\n    mapping:{\n        '.tpl':'nunjucks'\n    }\n}\n```\n7.为一个列表页编写模板文件\n在app目录下新建一个view文件夹，将所有模板文件放到view下\n```\n//app/view/news/list.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n        <li class=\"item\">\n          <a href=\"{{ item.url }}\">{{ item.title }}</a>\n        </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n添加controller,router\n```\n//app/controller/news.js\nconst Controller = require('egg').Controller;\nclass NewsController extends Controller {\n   async list() {\n    const dataList = {\n      list: [\n        { id: 1, title: 'this is news 1', url: '/news/1' },\n        { id: 2, title: 'this is news 2', url: '/news/2' }\n      ]\n    };\n    await this.ctx.render('news/list.tpl', dataList);\n}\nmodule.exports = NewsController;\n```\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n}\n```\n8.浏览器中打开http://127.0.0.1:7001/list\n![image.png](https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：[https://eggjs.org/zh-cn/intro/quickstart.html](https://eggjs.org/zh-cn/intro/quickstart.html)\n","source":"_posts/（一）egg-js快速人门，跑出hello-world.md","raw":"---\ntitle: （一）egg-js快速人门，跑出hello-world\n---\n一：什么是egg.js?\n\negg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。\n\n二：脚手架快速生成项目\n\n1.系统和环境：windows + node 8以上\n\n2.脚手架命令，快速初始化生成项目\n\n```\n\nnpm i egg-init -g\negg-init egg-myProject --type=simple\ncd egg-myProject\nnpm i\n\n```\n\n3.启动项目\n\n```\n\nnpm run dev\n\n```\n\n4.浏览器中打开http://127.0.0.1:7001：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n三：不用脚手架，逐步搭建，熟悉项目目录结构\n\n1.初始化目录结构\n\n```\n\nmkdir egg-my-example\ncd egg-my-example\nnpm init\n\n```\n\nnpm init之后一路回车即可，然后安装egg  egg-bin:\n\n```\n\nnpm i egg --save\nnpm i egg-bin --save-dev\n\n```\n\n2.找到package.json文件添加\n\n```\n\n\"scripts\": {\n\n    \"dev\": \"egg-bin dev\"\n\n  },\n\n```\n\n3.编写controller文件，router路由，添加配置文件config\n\n在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js\n\n在项目 egg-my-example 目录下app文件夹新建router.js文件\n\n在项目 egg-my-example 目录下新建与app同级的config文件夹，（**注意：config文件夹跟app同级目录**），新建config.default.js文件\n\n```\n\n//app/controllter/home.js\n\nconst Controller = require('egg').Controller;\n\nclass HomeController extends Controller{\n\n    async index(){\n\n        this.ctx.body = \"hello world\";\n\n    }\n\n}\n\nmodule.exports = HomeController;\n\n```\n\n```\n\n//app/router.js\n\nmodule.exports = app => {\n\n  const { router, controller } = app;\n\n  router.get('/',controller.home.index);\n\n  router.get('/list',controller.news.list);\n\n}\n\n```\n\n```\n\n//config/congif.default.js\n\nexports.keys = '123456790';  //key是自己的cookie信息\n\n```\n\n整体项目目路结构如下：\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.运行项目\n\n```\n\nnpm run dev\n\n```\n\n5.浏览器打开   http://127.0.0.1:7001\n\n![image](http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。\n\n6.接下来可以继续编写view模板文件\n使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks\n```\nnpm i egg-view-nunjucks --save\n```\n开启插件：（config目录下新建plugin.js文件）\n```\n//config/plugin.js\nexports.nunjucks = {\n    enable:true,\n    package:'egg-view-nunjucks'\n}\n```\n添加view模板配置\n```\n//config/config.default.js\nexports.view = {\n    defaultViewEngine:'nunjucks',\n    mapping:{\n        '.tpl':'nunjucks'\n    }\n}\n```\n7.为一个列表页编写模板文件\n在app目录下新建一个view文件夹，将所有模板文件放到view下\n```\n//app/view/news/list.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n        <li class=\"item\">\n          <a href=\"{{ item.url }}\">{{ item.title }}</a>\n        </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n添加controller,router\n```\n//app/controller/news.js\nconst Controller = require('egg').Controller;\nclass NewsController extends Controller {\n   async list() {\n    const dataList = {\n      list: [\n        { id: 1, title: 'this is news 1', url: '/news/1' },\n        { id: 2, title: 'this is news 2', url: '/news/2' }\n      ]\n    };\n    await this.ctx.render('news/list.tpl', dataList);\n}\nmodule.exports = NewsController;\n```\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n}\n```\n8.浏览器中打开http://127.0.0.1:7001/list\n![image.png](https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n参考：[https://eggjs.org/zh-cn/intro/quickstart.html](https://eggjs.org/zh-cn/intro/quickstart.html)\n","slug":"（一）egg-js快速人门，跑出hello-world","published":1,"date":"2019-09-13T02:18:13.127Z","updated":"2019-09-13T02:18:13.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh743000wwsl6xuoj1qqq","content":"<p>一：什么是egg.js?</p>\n<p>egg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。</p>\n<p>二：脚手架快速生成项目</p>\n<p>1.系统和环境：windows + node 8以上</p>\n<p>2.脚手架命令，快速初始化生成项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg-init -g</span><br><span class=\"line\">egg-init egg-myProject --type=simple</span><br><span class=\"line\">cd egg-myProject</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>3.启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>4.浏览器中打开<a href=\"http://127.0.0.1:7001：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001：</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>三：不用脚手架，逐步搭建，熟悉项目目录结构</p>\n<p>1.初始化目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir egg-my-example</span><br><span class=\"line\">cd egg-my-example</span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>npm init之后一路回车即可，然后安装egg  egg-bin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg --save</span><br><span class=\"line\">npm i egg-bin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>2.找到package.json文件添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;dev&quot;: &quot;egg-bin dev&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>3.编写controller文件，router路由，添加配置文件config</p>\n<p>在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js</p>\n<p>在项目 egg-my-example 目录下app文件夹新建router.js文件</p>\n<p>在项目 egg-my-example 目录下新建与app同级的config文件夹，（<strong>注意：config文件夹跟app同级目录</strong>），新建config.default.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/controllter/home.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.ctx.body = &quot;hello world&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/router.js</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; router, controller &#125; = app;</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//config/congif.default.js</span><br><span class=\"line\"></span><br><span class=\"line\">exports.keys = &apos;123456790&apos;;  //key是自己的cookie信息</span><br></pre></td></tr></table></figure>\n\n<p>整体项目目路结构如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>4.运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>5.浏览器打开   <a href=\"http://127.0.0.1:7001\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。</p>\n<p>6.接下来可以继续编写view模板文件<br>使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i egg-view-nunjucks --save</span><br></pre></td></tr></table></figure>\n\n<p>开启插件：（config目录下新建plugin.js文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/plugin.js</span><br><span class=\"line\">exports.nunjucks = &#123;</span><br><span class=\"line\">    enable:true,</span><br><span class=\"line\">    package:&apos;egg-view-nunjucks&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加view模板配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/config.default.js</span><br><span class=\"line\">exports.view = &#123;</span><br><span class=\"line\">    defaultViewEngine:&apos;nunjucks&apos;,</span><br><span class=\"line\">    mapping:&#123;</span><br><span class=\"line\">        &apos;.tpl&apos;:&apos;nunjucks&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.为一个列表页编写模板文件<br>在app目录下新建一个view文件夹，将所有模板文件放到view下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/news/list.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/public/css/news.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;ul class=&quot;news-view view&quot;&gt;</span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">        &lt;li class=&quot;item&quot;&gt;</span><br><span class=\"line\">          &lt;a href=&quot;&#123;&#123; item.url &#125;&#125;&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加controller,router</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/news.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class NewsController extends Controller &#123;</span><br><span class=\"line\">   async list() &#123;</span><br><span class=\"line\">    const dataList = &#123;</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123; id: 1, title: &apos;this is news 1&apos;, url: &apos;/news/1&apos; &#125;,</span><br><span class=\"line\">        &#123; id: 2, title: &apos;this is news 2&apos;, url: &apos;/news/2&apos; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    await this.ctx.render(&apos;news/list.tpl&apos;, dataList);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = NewsController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>8.浏览器中打开<a href=\"http://127.0.0.1:7001/list\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001/list</a><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>参考：<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\" target=\"_blank\" rel=\"noopener\">https://eggjs.org/zh-cn/intro/quickstart.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一：什么是egg.js?</p>\n<p>egg.js是nodejs 的一个框架，是基于koa框架的基础上整合的一套上层框架，既定的目录结构，开发者只需要基于MVC模式，根据项目规范的目录结构，专注于编写相应的controller,service,router,view,config配置，以及plugin插件可扩展。</p>\n<p>二：脚手架快速生成项目</p>\n<p>1.系统和环境：windows + node 8以上</p>\n<p>2.脚手架命令，快速初始化生成项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg-init -g</span><br><span class=\"line\">egg-init egg-myProject --type=simple</span><br><span class=\"line\">cd egg-myProject</span><br><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>3.启动项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>4.浏览器中打开<a href=\"http://127.0.0.1:7001：\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001：</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-c1513a29035577df?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>三：不用脚手架，逐步搭建，熟悉项目目录结构</p>\n<p>1.初始化目录结构</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">mkdir egg-my-example</span><br><span class=\"line\">cd egg-my-example</span><br><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>npm init之后一路回车即可，然后安装egg  egg-bin:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm i egg --save</span><br><span class=\"line\">npm i egg-bin --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>2.找到package.json文件添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &quot;dev&quot;: &quot;egg-bin dev&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n\n<p>3.编写controller文件，router路由，添加配置文件config</p>\n<p>在项目 egg-my-example 目录下新建app文件夹，新建controller文件夹，新建文件home.js</p>\n<p>在项目 egg-my-example 目录下app文件夹新建router.js文件</p>\n<p>在项目 egg-my-example 目录下新建与app同级的config文件夹，（<strong>注意：config文件夹跟app同级目录</strong>），新建config.default.js文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/controllter/home.js</span><br><span class=\"line\"></span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\"></span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        this.ctx.body = &quot;hello world&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//app/router.js</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; router, controller &#125; = app;</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\"></span><br><span class=\"line\">  router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//config/congif.default.js</span><br><span class=\"line\"></span><br><span class=\"line\">exports.keys = &apos;123456790&apos;;  //key是自己的cookie信息</span><br></pre></td></tr></table></figure>\n\n<p>整体项目目路结构如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-0ecc46ba30717a76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>4.运行项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>5.浏览器打开   <a href=\"http://127.0.0.1:7001\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001</a></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5541401-9b6d73ffd42914a5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image\"></p>\n<p>如此一个简单的hello world就完成了，手动新建项目过程中一定要注意目路结构，egg根据既定的项目目录，开发者可以专注编写controller等业务代码，快速完成项目。</p>\n<p>6.接下来可以继续编写view模板文件<br>使用 Nunjucks来渲染，安装对应的插件 egg-view-nunjucks</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i egg-view-nunjucks --save</span><br></pre></td></tr></table></figure>\n\n<p>开启插件：（config目录下新建plugin.js文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/plugin.js</span><br><span class=\"line\">exports.nunjucks = &#123;</span><br><span class=\"line\">    enable:true,</span><br><span class=\"line\">    package:&apos;egg-view-nunjucks&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加view模板配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//config/config.default.js</span><br><span class=\"line\">exports.view = &#123;</span><br><span class=\"line\">    defaultViewEngine:&apos;nunjucks&apos;,</span><br><span class=\"line\">    mapping:&#123;</span><br><span class=\"line\">        &apos;.tpl&apos;:&apos;nunjucks&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>7.为一个列表页编写模板文件<br>在app目录下新建一个view文件夹，将所有模板文件放到view下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/news/list.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/public/css/news.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;ul class=&quot;news-view view&quot;&gt;</span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">        &lt;li class=&quot;item&quot;&gt;</span><br><span class=\"line\">          &lt;a href=&quot;&#123;&#123; item.url &#125;&#125;&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/a&gt;</span><br><span class=\"line\">        &lt;/li&gt;</span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    &lt;/ul&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加controller,router</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/news.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class NewsController extends Controller &#123;</span><br><span class=\"line\">   async list() &#123;</span><br><span class=\"line\">    const dataList = &#123;</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123; id: 1, title: &apos;this is news 1&apos;, url: &apos;/news/1&apos; &#125;,</span><br><span class=\"line\">        &#123; id: 2, title: &apos;this is news 2&apos;, url: &apos;/news/2&apos; &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    await this.ctx.render(&apos;news/list.tpl&apos;, dataList);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = NewsController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>8.浏览器中打开<a href=\"http://127.0.0.1:7001/list\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7001/list</a><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-f58625a0f97b7553.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"image.png\"></p>\n<p>参考：<a href=\"https://eggjs.org/zh-cn/intro/quickstart.html\" target=\"_blank\" rel=\"noopener\">https://eggjs.org/zh-cn/intro/quickstart.html</a></p>\n"},{"title":"（三）egg作为后端接口，get,post,jsonp，给前端调用","_content":"上一篇讲了前后端分离，`egg`作为接口段提供接口服务，现在说一下最基本的，常用的几个请求，`post，get，jsonp`请求该如何做。\n\n**（一）get请求**\n\n打开上一篇文章讲到的`egg`项目`（ egg-my-example）`，找到`router`文件，添加如下路由：\n\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n}\n```\n此时新建一个`/list`接口，到`controller`里面找到`news`文件，新建一个`list`的方法\n```\n//app/controller/news.js\nconst Controller = require('egg').Controller;\nclass NewsController extends Controller {\n    async list() {\n        const dataList = await this.other();\n        this.ctx.body = {\n            code:0,\n            masg:'news list success',\n            data:dataList\n        };\n    }\n\n    async other() {\n        return {\n            list: [\n                { id: 1, title: 'this is news 1', url: '/news/1' },\n                { id: 2, title: 'this is news 2', url: '/news/2' }\n            ]\n        }\n    }\n}\nmodule.exports = NewsController;\n```\n现在启动项目：`npm run dev`，看到如下请求数据返回：\n![](https://upload-images.jianshu.io/upload_images/5541401-40352faa76134e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n此时接口已经准备就绪，切到上一个前端项目里面`http-server-test`，在这里请求`/list`接口：\n\n```\n//因为用到了async,await，所以配置babel的presets的stage-0\n//.babelrc\n{\n    \"presets\":[\"es2015\",\"react\",\"stage-0\"]\n}\n```\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\nimport axios from 'axios'\n\nexport default class HelloComponent extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlistData:[]\n\t\t}\n\t}\n\n\tasync componentDidMount(){\n\t\tawait axios.get('/list')\n\t\t.then((res) => {\n\t\t\tconst listData = res.data.data.list;\n\t\t\tconsole.log(listData);\n\t\t\tthis.setState({\n\t\t\t\tlistData\n\t\t\t});\n\t\t});\n\t}\n\n    render(){\n    \tconst listData = this.state.listData;\n    \tlet ele = listData.map((item) => {\n    \t\treturn <p key={item.id}>{item.title}:{item.url}</p>\n    \t})\n        return(\n            <div className=\"hello-box\">\n            \t<div className=\"hello-list\">{ele}</div>\n            </div>\n        );\n    }\n}\n```\n如此一个`get`请求结束了，现在打包我们的前端项目，运行`npm run build`将打包好的项目`js,css`链接复制到`egg`项目的/路径下的`view`里面，即如下代码：\n```\n//app/view/home/home.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"http://127.0.0.1:8080/dist/index.css\" />\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"http://127.0.0.1:8080/dist/index.js\"></script>\n  </body>\n</html>\n```\n最后打开浏览器输入`http://127.0.0.1:7001/`，即可看到效果：\n![](https://upload-images.jianshu.io/upload_images/5541401-b7f91ca0d14b573d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个`get`请求就做完了。\n\n（二）如法炮制post请求\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n   router.post('/form',controller.form.post);\n}\n```\n```\n//app/controller/form.js\nconst Controller = require('egg').Controller;\nclass FormController extends Controller {\n    async post(){\n        this.ctx.body = {\n            code:0,\n            masg:'form submit success'\n        }\n    }\n}\nmodule.exports = FormController;\n```\n切到前端项目http-erver-test中\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\nimport axios from 'axios'\n\nexport default class HelloComponent extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlistData:[]\n\t\t}\n\t}\n\n\tasync componentDidMount(){\n\t\tawait axios.get('/list')\n\t\t.then((res) => {\n\t\t\tconst listData = res.data.data.list;\n\t\t\tconsole.log(listData);\n\t\t\tthis.setState({\n\t\t\t\tlistData\n\t\t\t});\n\t\t});\n\t}\n\n\tsubmitForm(){\n\t\taxios.post('/form',{\n\t\t\thello:document.getElementById('input').value,\n\t\t\tnow:new Date().getTime()\n\t\t})\n\t\t.then((res) => {\n\t\t\talert(res.data.masg);\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n\n    render(){\n    \tconst listData = this.state.listData;\n    \tlet ele = listData.map((item) => {\n    \t\treturn <p key={item.id}>{item.title}:{item.url}</p>\n    \t})\n        return(\n            <div className=\"hello-box\">\n            \t<div className=\"hello-list\">{ele}</div>\n            \t<form>\n            \t\t<input type=\"text\" name=\"hello\" id=\"input\" />\n            \t\t<input type=\"button\" onClick={this.submitForm} value=\"提交\" />\n            \t</form>\n            </div>\n        );\n    }\n}\n```\n最后再重新npm run build打包http-server-test项目即可:\n![](https://upload-images.jianshu.io/upload_images/5541401-0e70a6bf69394591.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个post请求就完成了。\n\n（三）jsonp请求\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n   router.post('/form',controller.form.post);\n   router.get('/demo/count.json',app.jsonp(),controller.demo.count);\n}\n```\n```\n// app/demo/count.json\n{\n    \"errcode\":\"0\",\n    \"msg\":\"success\",\n    \"data\":[\n        {\n            \"id\":1,\n            \"title\":\"hello\"\n        },\n        {\n            \"id\":2,\n            \"title\":\"world\"\n        }\n    ]\n}\n```\n```\n// app/controller/demo.js\nconst Controller = require('egg').Controller;\nclass DemoJsonp extends Controller{\n    async count(){\n        this.ctx.body = {\n            data:[\n                {\n                    \"id\":1,\n                    \"title\":\"hello\"\n                },\n                {\n                    \"id\":2,\n                    \"title\":\"world\"\n                }\n            ]\n        };\n    }\n}\nmodule.exports = DemoJsonp;\n```\n其实我们这里并没有跨域，只是类比一下，跟get其实一样。\n\n![](https://upload-images.jianshu.io/upload_images/5541401-a39079ffe455ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这一阶段就结束了，由浅到深，慢慢来：）\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/（三）egg作为后端接口，get,post,jsonp，给前端调用.md","raw":"---\ntitle: （三）egg作为后端接口，get,post,jsonp，给前端调用\n---\n上一篇讲了前后端分离，`egg`作为接口段提供接口服务，现在说一下最基本的，常用的几个请求，`post，get，jsonp`请求该如何做。\n\n**（一）get请求**\n\n打开上一篇文章讲到的`egg`项目`（ egg-my-example）`，找到`router`文件，添加如下路由：\n\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n}\n```\n此时新建一个`/list`接口，到`controller`里面找到`news`文件，新建一个`list`的方法\n```\n//app/controller/news.js\nconst Controller = require('egg').Controller;\nclass NewsController extends Controller {\n    async list() {\n        const dataList = await this.other();\n        this.ctx.body = {\n            code:0,\n            masg:'news list success',\n            data:dataList\n        };\n    }\n\n    async other() {\n        return {\n            list: [\n                { id: 1, title: 'this is news 1', url: '/news/1' },\n                { id: 2, title: 'this is news 2', url: '/news/2' }\n            ]\n        }\n    }\n}\nmodule.exports = NewsController;\n```\n现在启动项目：`npm run dev`，看到如下请求数据返回：\n![](https://upload-images.jianshu.io/upload_images/5541401-40352faa76134e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n此时接口已经准备就绪，切到上一个前端项目里面`http-server-test`，在这里请求`/list`接口：\n\n```\n//因为用到了async,await，所以配置babel的presets的stage-0\n//.babelrc\n{\n    \"presets\":[\"es2015\",\"react\",\"stage-0\"]\n}\n```\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\nimport axios from 'axios'\n\nexport default class HelloComponent extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlistData:[]\n\t\t}\n\t}\n\n\tasync componentDidMount(){\n\t\tawait axios.get('/list')\n\t\t.then((res) => {\n\t\t\tconst listData = res.data.data.list;\n\t\t\tconsole.log(listData);\n\t\t\tthis.setState({\n\t\t\t\tlistData\n\t\t\t});\n\t\t});\n\t}\n\n    render(){\n    \tconst listData = this.state.listData;\n    \tlet ele = listData.map((item) => {\n    \t\treturn <p key={item.id}>{item.title}:{item.url}</p>\n    \t})\n        return(\n            <div className=\"hello-box\">\n            \t<div className=\"hello-list\">{ele}</div>\n            </div>\n        );\n    }\n}\n```\n如此一个`get`请求结束了，现在打包我们的前端项目，运行`npm run build`将打包好的项目`js,css`链接复制到`egg`项目的/路径下的`view`里面，即如下代码：\n```\n//app/view/home/home.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"http://127.0.0.1:8080/dist/index.css\" />\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"http://127.0.0.1:8080/dist/index.js\"></script>\n  </body>\n</html>\n```\n最后打开浏览器输入`http://127.0.0.1:7001/`，即可看到效果：\n![](https://upload-images.jianshu.io/upload_images/5541401-b7f91ca0d14b573d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个`get`请求就做完了。\n\n（二）如法炮制post请求\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n   router.post('/form',controller.form.post);\n}\n```\n```\n//app/controller/form.js\nconst Controller = require('egg').Controller;\nclass FormController extends Controller {\n    async post(){\n        this.ctx.body = {\n            code:0,\n            masg:'form submit success'\n        }\n    }\n}\nmodule.exports = FormController;\n```\n切到前端项目http-erver-test中\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\nimport axios from 'axios'\n\nexport default class HelloComponent extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tlistData:[]\n\t\t}\n\t}\n\n\tasync componentDidMount(){\n\t\tawait axios.get('/list')\n\t\t.then((res) => {\n\t\t\tconst listData = res.data.data.list;\n\t\t\tconsole.log(listData);\n\t\t\tthis.setState({\n\t\t\t\tlistData\n\t\t\t});\n\t\t});\n\t}\n\n\tsubmitForm(){\n\t\taxios.post('/form',{\n\t\t\thello:document.getElementById('input').value,\n\t\t\tnow:new Date().getTime()\n\t\t})\n\t\t.then((res) => {\n\t\t\talert(res.data.masg);\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t})\n\t}\n\n    render(){\n    \tconst listData = this.state.listData;\n    \tlet ele = listData.map((item) => {\n    \t\treturn <p key={item.id}>{item.title}:{item.url}</p>\n    \t})\n        return(\n            <div className=\"hello-box\">\n            \t<div className=\"hello-list\">{ele}</div>\n            \t<form>\n            \t\t<input type=\"text\" name=\"hello\" id=\"input\" />\n            \t\t<input type=\"button\" onClick={this.submitForm} value=\"提交\" />\n            \t</form>\n            </div>\n        );\n    }\n}\n```\n最后再重新npm run build打包http-server-test项目即可:\n![](https://upload-images.jianshu.io/upload_images/5541401-0e70a6bf69394591.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n一个post请求就完成了。\n\n（三）jsonp请求\n```\n//app/router.js\nmodule.exports = app => {\n   const { router, controller } = app; \n   router.get('/',controller.home.index);\n   router.get('/list',controller.news.list);\n   router.post('/form',controller.form.post);\n   router.get('/demo/count.json',app.jsonp(),controller.demo.count);\n}\n```\n```\n// app/demo/count.json\n{\n    \"errcode\":\"0\",\n    \"msg\":\"success\",\n    \"data\":[\n        {\n            \"id\":1,\n            \"title\":\"hello\"\n        },\n        {\n            \"id\":2,\n            \"title\":\"world\"\n        }\n    ]\n}\n```\n```\n// app/controller/demo.js\nconst Controller = require('egg').Controller;\nclass DemoJsonp extends Controller{\n    async count(){\n        this.ctx.body = {\n            data:[\n                {\n                    \"id\":1,\n                    \"title\":\"hello\"\n                },\n                {\n                    \"id\":2,\n                    \"title\":\"world\"\n                }\n            ]\n        };\n    }\n}\nmodule.exports = DemoJsonp;\n```\n其实我们这里并没有跨域，只是类比一下，跟get其实一样。\n\n![](https://upload-images.jianshu.io/upload_images/5541401-a39079ffe455ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这一阶段就结束了，由浅到深，慢慢来：）\n\n\n\n\n\n\n\n\n\n\n\n","slug":"（三）egg作为后端接口，get,post,jsonp，给前端调用","published":1,"date":"2019-09-13T02:18:12.645Z","updated":"2019-09-13T02:18:12.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh744000xwsl6mbcfp1hm","content":"<p>上一篇讲了前后端分离，<code>egg</code>作为接口段提供接口服务，现在说一下最基本的，常用的几个请求，<code>post，get，jsonp</code>请求该如何做。</p>\n<p><strong>（一）get请求</strong></p>\n<p>打开上一篇文章讲到的<code>egg</code>项目<code>（ egg-my-example）</code>，找到<code>router</code>文件，添加如下路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时新建一个<code>/list</code>接口，到<code>controller</code>里面找到<code>news</code>文件，新建一个<code>list</code>的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/news.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class NewsController extends Controller &#123;</span><br><span class=\"line\">    async list() &#123;</span><br><span class=\"line\">        const dataList = await this.other();</span><br><span class=\"line\">        this.ctx.body = &#123;</span><br><span class=\"line\">            code:0,</span><br><span class=\"line\">            masg:&apos;news list success&apos;,</span><br><span class=\"line\">            data:dataList</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    async other() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123; id: 1, title: &apos;this is news 1&apos;, url: &apos;/news/1&apos; &#125;,</span><br><span class=\"line\">                &#123; id: 2, title: &apos;this is news 2&apos;, url: &apos;/news/2&apos; &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = NewsController;</span><br></pre></td></tr></table></figure>\n\n<p>现在启动项目：<code>npm run dev</code>，看到如下请求数据返回：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-40352faa76134e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>此时接口已经准备就绪，切到上一个前端项目里面<code>http-server-test</code>，在这里请求<code>/list</code>接口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//因为用到了async,await，所以配置babel的presets的stage-0</span><br><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;,&quot;stage-0&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">\tconstructor(props)&#123;</span><br><span class=\"line\">\t\tsuper(props);</span><br><span class=\"line\">\t\tthis.state = &#123;</span><br><span class=\"line\">\t\t\tlistData:[]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tasync componentDidMount()&#123;</span><br><span class=\"line\">\t\tawait axios.get(&apos;/list&apos;)</span><br><span class=\"line\">\t\t.then((res) =&gt; &#123;</span><br><span class=\"line\">\t\t\tconst listData = res.data.data.list;</span><br><span class=\"line\">\t\t\tconsole.log(listData);</span><br><span class=\"line\">\t\t\tthis.setState(&#123;</span><br><span class=\"line\">\t\t\t\tlistData</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">    \tconst listData = this.state.listData;</span><br><span class=\"line\">    \tlet ele = listData.map((item) =&gt; &#123;</span><br><span class=\"line\">    \t\treturn &lt;p key=&#123;item.id&#125;&gt;&#123;item.title&#125;:&#123;item.url&#125;&lt;/p&gt;</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;</span><br><span class=\"line\">            \t&lt;div className=&quot;hello-list&quot;&gt;&#123;ele&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此一个<code>get</code>请求结束了，现在打包我们的前端项目，运行<code>npm run build</code>将打包好的项目<code>js,css</code>链接复制到<code>egg</code>项目的/路径下的<code>view</code>里面，即如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/home/home.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://127.0.0.1:8080/dist/index.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://127.0.0.1:8080/dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后打开浏览器输入<code>http://127.0.0.1:7001/</code>，即可看到效果：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-b7f91ca0d14b573d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>一个<code>get</code>请求就做完了。</p>\n<p>（二）如法炮制post请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">   router.post(&apos;/form&apos;,controller.form.post);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/form.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class FormController extends Controller &#123;</span><br><span class=\"line\">    async post()&#123;</span><br><span class=\"line\">        this.ctx.body = &#123;</span><br><span class=\"line\">            code:0,</span><br><span class=\"line\">            masg:&apos;form submit success&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = FormController;</span><br></pre></td></tr></table></figure>\n\n<p>切到前端项目http-erver-test中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">\tconstructor(props)&#123;</span><br><span class=\"line\">\t\tsuper(props);</span><br><span class=\"line\">\t\tthis.state = &#123;</span><br><span class=\"line\">\t\t\tlistData:[]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tasync componentDidMount()&#123;</span><br><span class=\"line\">\t\tawait axios.get(&apos;/list&apos;)</span><br><span class=\"line\">\t\t.then((res) =&gt; &#123;</span><br><span class=\"line\">\t\t\tconst listData = res.data.data.list;</span><br><span class=\"line\">\t\t\tconsole.log(listData);</span><br><span class=\"line\">\t\t\tthis.setState(&#123;</span><br><span class=\"line\">\t\t\t\tlistData</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsubmitForm()&#123;</span><br><span class=\"line\">\t\taxios.post(&apos;/form&apos;,&#123;</span><br><span class=\"line\">\t\t\thello:document.getElementById(&apos;input&apos;).value,</span><br><span class=\"line\">\t\t\tnow:new Date().getTime()</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.then((res) =&gt; &#123;</span><br><span class=\"line\">\t\t\talert(res.data.masg);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.catch((err) =&gt; &#123;</span><br><span class=\"line\">\t\t\tconsole.log(err);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">    \tconst listData = this.state.listData;</span><br><span class=\"line\">    \tlet ele = listData.map((item) =&gt; &#123;</span><br><span class=\"line\">    \t\treturn &lt;p key=&#123;item.id&#125;&gt;&#123;item.title&#125;:&#123;item.url&#125;&lt;/p&gt;</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;</span><br><span class=\"line\">            \t&lt;div className=&quot;hello-list&quot;&gt;&#123;ele&#125;&lt;/div&gt;</span><br><span class=\"line\">            \t&lt;form&gt;</span><br><span class=\"line\">            \t\t&lt;input type=&quot;text&quot; name=&quot;hello&quot; id=&quot;input&quot; /&gt;</span><br><span class=\"line\">            \t\t&lt;input type=&quot;button&quot; onClick=&#123;this.submitForm&#125; value=&quot;提交&quot; /&gt;</span><br><span class=\"line\">            \t&lt;/form&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后再重新npm run build打包http-server-test项目即可:<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-0e70a6bf69394591.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>一个post请求就完成了。</p>\n<p>（三）jsonp请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">   router.post(&apos;/form&apos;,controller.form.post);</span><br><span class=\"line\">   router.get(&apos;/demo/count.json&apos;,app.jsonp(),controller.demo.count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app/demo/count.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;errcode&quot;:&quot;0&quot;,</span><br><span class=\"line\">    &quot;msg&quot;:&quot;success&quot;,</span><br><span class=\"line\">    &quot;data&quot;:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;id&quot;:1,</span><br><span class=\"line\">            &quot;title&quot;:&quot;hello&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;id&quot;:2,</span><br><span class=\"line\">            &quot;title&quot;:&quot;world&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app/controller/demo.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class DemoJsonp extends Controller&#123;</span><br><span class=\"line\">    async count()&#123;</span><br><span class=\"line\">        this.ctx.body = &#123;</span><br><span class=\"line\">            data:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;id&quot;:1,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;hello&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;id&quot;:2,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;world&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = DemoJsonp;</span><br></pre></td></tr></table></figure>\n\n<p>其实我们这里并没有跨域，只是类比一下，跟get其实一样。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a39079ffe455ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>这一阶段就结束了，由浅到深，慢慢来：）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇讲了前后端分离，<code>egg</code>作为接口段提供接口服务，现在说一下最基本的，常用的几个请求，<code>post，get，jsonp</code>请求该如何做。</p>\n<p><strong>（一）get请求</strong></p>\n<p>打开上一篇文章讲到的<code>egg</code>项目<code>（ egg-my-example）</code>，找到<code>router</code>文件，添加如下路由：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时新建一个<code>/list</code>接口，到<code>controller</code>里面找到<code>news</code>文件，新建一个<code>list</code>的方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/news.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class NewsController extends Controller &#123;</span><br><span class=\"line\">    async list() &#123;</span><br><span class=\"line\">        const dataList = await this.other();</span><br><span class=\"line\">        this.ctx.body = &#123;</span><br><span class=\"line\">            code:0,</span><br><span class=\"line\">            masg:&apos;news list success&apos;,</span><br><span class=\"line\">            data:dataList</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    async other() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            list: [</span><br><span class=\"line\">                &#123; id: 1, title: &apos;this is news 1&apos;, url: &apos;/news/1&apos; &#125;,</span><br><span class=\"line\">                &#123; id: 2, title: &apos;this is news 2&apos;, url: &apos;/news/2&apos; &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = NewsController;</span><br></pre></td></tr></table></figure>\n\n<p>现在启动项目：<code>npm run dev</code>，看到如下请求数据返回：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-40352faa76134e6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>此时接口已经准备就绪，切到上一个前端项目里面<code>http-server-test</code>，在这里请求<code>/list</code>接口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//因为用到了async,await，所以配置babel的presets的stage-0</span><br><span class=\"line\">//.babelrc</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;,&quot;stage-0&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">\tconstructor(props)&#123;</span><br><span class=\"line\">\t\tsuper(props);</span><br><span class=\"line\">\t\tthis.state = &#123;</span><br><span class=\"line\">\t\t\tlistData:[]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tasync componentDidMount()&#123;</span><br><span class=\"line\">\t\tawait axios.get(&apos;/list&apos;)</span><br><span class=\"line\">\t\t.then((res) =&gt; &#123;</span><br><span class=\"line\">\t\t\tconst listData = res.data.data.list;</span><br><span class=\"line\">\t\t\tconsole.log(listData);</span><br><span class=\"line\">\t\t\tthis.setState(&#123;</span><br><span class=\"line\">\t\t\t\tlistData</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">    \tconst listData = this.state.listData;</span><br><span class=\"line\">    \tlet ele = listData.map((item) =&gt; &#123;</span><br><span class=\"line\">    \t\treturn &lt;p key=&#123;item.id&#125;&gt;&#123;item.title&#125;:&#123;item.url&#125;&lt;/p&gt;</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;</span><br><span class=\"line\">            \t&lt;div className=&quot;hello-list&quot;&gt;&#123;ele&#125;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如此一个<code>get</code>请求结束了，现在打包我们的前端项目，运行<code>npm run build</code>将打包好的项目<code>js,css</code>链接复制到<code>egg</code>项目的/路径下的<code>view</code>里面，即如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/home/home.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://127.0.0.1:8080/dist/index.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://127.0.0.1:8080/dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后打开浏览器输入<code>http://127.0.0.1:7001/</code>，即可看到效果：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-b7f91ca0d14b573d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>一个<code>get</code>请求就做完了。</p>\n<p>（二）如法炮制post请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">   router.post(&apos;/form&apos;,controller.form.post);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/form.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class FormController extends Controller &#123;</span><br><span class=\"line\">    async post()&#123;</span><br><span class=\"line\">        this.ctx.body = &#123;</span><br><span class=\"line\">            code:0,</span><br><span class=\"line\">            masg:&apos;form submit success&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = FormController;</span><br></pre></td></tr></table></figure>\n\n<p>切到前端项目http-erver-test中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\">import axios from &apos;axios&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">\tconstructor(props)&#123;</span><br><span class=\"line\">\t\tsuper(props);</span><br><span class=\"line\">\t\tthis.state = &#123;</span><br><span class=\"line\">\t\t\tlistData:[]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tasync componentDidMount()&#123;</span><br><span class=\"line\">\t\tawait axios.get(&apos;/list&apos;)</span><br><span class=\"line\">\t\t.then((res) =&gt; &#123;</span><br><span class=\"line\">\t\t\tconst listData = res.data.data.list;</span><br><span class=\"line\">\t\t\tconsole.log(listData);</span><br><span class=\"line\">\t\t\tthis.setState(&#123;</span><br><span class=\"line\">\t\t\t\tlistData</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsubmitForm()&#123;</span><br><span class=\"line\">\t\taxios.post(&apos;/form&apos;,&#123;</span><br><span class=\"line\">\t\t\thello:document.getElementById(&apos;input&apos;).value,</span><br><span class=\"line\">\t\t\tnow:new Date().getTime()</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.then((res) =&gt; &#123;</span><br><span class=\"line\">\t\t\talert(res.data.masg);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t.catch((err) =&gt; &#123;</span><br><span class=\"line\">\t\t\tconsole.log(err);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">    \tconst listData = this.state.listData;</span><br><span class=\"line\">    \tlet ele = listData.map((item) =&gt; &#123;</span><br><span class=\"line\">    \t\treturn &lt;p key=&#123;item.id&#125;&gt;&#123;item.title&#125;:&#123;item.url&#125;&lt;/p&gt;</span><br><span class=\"line\">    \t&#125;)</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;</span><br><span class=\"line\">            \t&lt;div className=&quot;hello-list&quot;&gt;&#123;ele&#125;&lt;/div&gt;</span><br><span class=\"line\">            \t&lt;form&gt;</span><br><span class=\"line\">            \t\t&lt;input type=&quot;text&quot; name=&quot;hello&quot; id=&quot;input&quot; /&gt;</span><br><span class=\"line\">            \t\t&lt;input type=&quot;button&quot; onClick=&#123;this.submitForm&#125; value=&quot;提交&quot; /&gt;</span><br><span class=\"line\">            \t&lt;/form&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后再重新npm run build打包http-server-test项目即可:<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-0e70a6bf69394591.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>一个post请求就完成了。</p>\n<p>（三）jsonp请求</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/router.js</span><br><span class=\"line\">module.exports = app =&gt; &#123;</span><br><span class=\"line\">   const &#123; router, controller &#125; = app; </span><br><span class=\"line\">   router.get(&apos;/&apos;,controller.home.index);</span><br><span class=\"line\">   router.get(&apos;/list&apos;,controller.news.list);</span><br><span class=\"line\">   router.post(&apos;/form&apos;,controller.form.post);</span><br><span class=\"line\">   router.get(&apos;/demo/count.json&apos;,app.jsonp(),controller.demo.count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app/demo/count.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;errcode&quot;:&quot;0&quot;,</span><br><span class=\"line\">    &quot;msg&quot;:&quot;success&quot;,</span><br><span class=\"line\">    &quot;data&quot;:[</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;id&quot;:1,</span><br><span class=\"line\">            &quot;title&quot;:&quot;hello&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;id&quot;:2,</span><br><span class=\"line\">            &quot;title&quot;:&quot;world&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// app/controller/demo.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class DemoJsonp extends Controller&#123;</span><br><span class=\"line\">    async count()&#123;</span><br><span class=\"line\">        this.ctx.body = &#123;</span><br><span class=\"line\">            data:[</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;id&quot;:1,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;hello&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    &quot;id&quot;:2,</span><br><span class=\"line\">                    &quot;title&quot;:&quot;world&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = DemoJsonp;</span><br></pre></td></tr></table></figure>\n\n<p>其实我们这里并没有跨域，只是类比一下，跟get其实一样。</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a39079ffe455ef4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p>这一阶段就结束了，由浅到深，慢慢来：）</p>\n"},{"title":"（二）egg-js与前端打通，做到前后端分离","_content":"**此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。**\n\n思路是：首先给前端启动一个服务，用`http-server` 或者 `webpack-dev-server`\n              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。\n**一：http-server  启动一个前端服务**\n\n新建一个前端项目：\n```\nmkdir http-server-test\ncd http-server-test\nnpm install http-server -g\n```\n新建一个`test.html`页面，随便写个hello world,然后运行\n```\nhttp-server\n```\n访问`http://127.0.0.1:8080/test.html` 得到下面页面\n![](https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n前端`http server`就启动好了。\n\n**二：前端项目通过webpack工具+react前端框架打包出js,css文件**\n\n1.进到http-server-test目录,`npm init`一路回车即可\n```\nnpm init\n```\n2.安装相关依赖\n```\n//babel编译js相关\nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev\n```\n```\n//css文件处理相关\nnpm install css-loader style-loader less-loader postcss-loader less --save-dev\n```\n```\n//将css达成独立的css文件\n//加上@next是为了防止出错，遇到了这个坑\nnpm install extract-text-webpack-plugin@next --save-dev\n```\n```\n//安装react框架相关\nnpm install react react-dom --save \n```\n```\n//webpack打包文件相关依赖\nnpm install webpack -g\nnpm install webpack --save-dev\n//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下\nnpm install webpack-cli --save-dev       \n```\n3.配置babel,新建一个`.babelrc`文件，写入如下代码\n```\n{\n    \"presets\":[\"es2015\",\"react\"]\n}\n```\n4.配置webpack文件，新建`webpack.config.js`文件，写入如下代码：\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n    context:path.resolve(__dirname,''),\n    entry:{\n        main:'./src/index.jsx'\n    },\n    output:{\n        path:path.resolve(__dirname,'dist/'),\n        filename:'index.js'\n    },\n    module:{\n        rules:[\n            {\n                test:/\\.jsx$/,\n                use:'babel-loader'\n            },\n            {\n                test:/\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: \"style-loader\",\n                    use: [\"css-loader\",\"less-loader\"]\n                  })\n            }\n        ]\n    },\n    plugins:[\n        new webpack.DefinePlugin({\n            'process.env.NODE_ENV':JSON.stringify('development'),\n            __DEV__:true\n        }),\n        new ExtractTextPlugin('index.css'),\n    ]\n}\n```\n5.继续丰富目录，目路结构（`dist`目录是`webpack`打包自动生成的文件，不需要手动创建）如下：\n![](https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//src/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>hello</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"../dist/index.js\"></script>\n</body>\n</html>\n```\n```\n//src/index.jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport HelloComponent from '../components/hello.jsx'\nimport './index.less'\n\nReactDOM.render(\n    <div className=\"app-box\">\n        <HelloComponent />\n    </div>,\n    document.getElementById('app')\n);\n```\n```\n//src/index.less\n.app-box{\n    width:200px;\n    height: 400px;\n    margin:50px auto;\n    border:1px solid #ccc;\n}\n```\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\n\nexport default class HelloComponent extends React.Component{\n    render(){\n        return(\n            <div className=\"hello-box\">hello world</div>\n        );\n    }\n}\n```\n```\n//components/hello.less\n.hello-box{\n    color:#f00;\n}\n```\n6.运行webpack打包出文件\n```\nwebpack --watch\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**三：将打包出来的css，js文件通过script src=\"\"链接到egg.js的模板文件中**\n\n打开上一节新建的egg项目\n![](https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//app/controller/home.js\nconst Controller = require('egg').Controller;\nclass HomeController extends Controller{\n    async index(){\n       await this.ctx.render('home/home.tpl');\n    }\n}\nmodule.exports = HomeController;\n```\n```\n//app/view/home/home.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"http://127.0.0.1:8080/dist/index.css\" />\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"http://127.0.0.1:8080/dist/index.js\"></script>\n  </body>\n</html>\n```\n最后命令行运行：\n```\nnpm run dev\n```\n访问`http://127.0.0.1:7001/`\n![](https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意：前端的服务http-server,以及egg的服务都要开启。**\n\n结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。\n","source":"_posts/（二）egg-js与前端打通，做到前后端分离.md","raw":"---\ntitle: （二）egg-js与前端打通，做到前后端分离\n---\n**此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。**\n\n思路是：首先给前端启动一个服务，用`http-server` 或者 `webpack-dev-server`\n              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。\n**一：http-server  启动一个前端服务**\n\n新建一个前端项目：\n```\nmkdir http-server-test\ncd http-server-test\nnpm install http-server -g\n```\n新建一个`test.html`页面，随便写个hello world,然后运行\n```\nhttp-server\n```\n访问`http://127.0.0.1:8080/test.html` 得到下面页面\n![](https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n前端`http server`就启动好了。\n\n**二：前端项目通过webpack工具+react前端框架打包出js,css文件**\n\n1.进到http-server-test目录,`npm init`一路回车即可\n```\nnpm init\n```\n2.安装相关依赖\n```\n//babel编译js相关\nnpm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev\n```\n```\n//css文件处理相关\nnpm install css-loader style-loader less-loader postcss-loader less --save-dev\n```\n```\n//将css达成独立的css文件\n//加上@next是为了防止出错，遇到了这个坑\nnpm install extract-text-webpack-plugin@next --save-dev\n```\n```\n//安装react框架相关\nnpm install react react-dom --save \n```\n```\n//webpack打包文件相关依赖\nnpm install webpack -g\nnpm install webpack --save-dev\n//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下\nnpm install webpack-cli --save-dev       \n```\n3.配置babel,新建一个`.babelrc`文件，写入如下代码\n```\n{\n    \"presets\":[\"es2015\",\"react\"]\n}\n```\n4.配置webpack文件，新建`webpack.config.js`文件，写入如下代码：\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nmodule.exports = {\n    context:path.resolve(__dirname,''),\n    entry:{\n        main:'./src/index.jsx'\n    },\n    output:{\n        path:path.resolve(__dirname,'dist/'),\n        filename:'index.js'\n    },\n    module:{\n        rules:[\n            {\n                test:/\\.jsx$/,\n                use:'babel-loader'\n            },\n            {\n                test:/\\.less$/,\n                use: ExtractTextPlugin.extract({\n                    fallback: \"style-loader\",\n                    use: [\"css-loader\",\"less-loader\"]\n                  })\n            }\n        ]\n    },\n    plugins:[\n        new webpack.DefinePlugin({\n            'process.env.NODE_ENV':JSON.stringify('development'),\n            __DEV__:true\n        }),\n        new ExtractTextPlugin('index.css'),\n    ]\n}\n```\n5.继续丰富目录，目路结构（`dist`目录是`webpack`打包自动生成的文件，不需要手动创建）如下：\n![](https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//src/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>hello</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"../dist/index.js\"></script>\n</body>\n</html>\n```\n```\n//src/index.jsx\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport HelloComponent from '../components/hello.jsx'\nimport './index.less'\n\nReactDOM.render(\n    <div className=\"app-box\">\n        <HelloComponent />\n    </div>,\n    document.getElementById('app')\n);\n```\n```\n//src/index.less\n.app-box{\n    width:200px;\n    height: 400px;\n    margin:50px auto;\n    border:1px solid #ccc;\n}\n```\n```\n//components/hello.jsx\nimport React from 'react'\nimport './hello.less'\n\nexport default class HelloComponent extends React.Component{\n    render(){\n        return(\n            <div className=\"hello-box\">hello world</div>\n        );\n    }\n}\n```\n```\n//components/hello.less\n.hello-box{\n    color:#f00;\n}\n```\n6.运行webpack打包出文件\n```\nwebpack --watch\n```\n![](https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**三：将打包出来的css，js文件通过script src=\"\"链接到egg.js的模板文件中**\n\n打开上一节新建的egg项目\n![](https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n```\n//app/controller/home.js\nconst Controller = require('egg').Controller;\nclass HomeController extends Controller{\n    async index(){\n       await this.ctx.render('home/home.tpl');\n    }\n}\nmodule.exports = HomeController;\n```\n```\n//app/view/home/home.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"http://127.0.0.1:8080/dist/index.css\" />\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"http://127.0.0.1:8080/dist/index.js\"></script>\n  </body>\n</html>\n```\n最后命令行运行：\n```\nnpm run dev\n```\n访问`http://127.0.0.1:7001/`\n![](https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n![](https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n**注意：前端的服务http-server,以及egg的服务都要开启。**\n\n结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。\n","slug":"（二）egg-js与前端打通，做到前后端分离","published":1,"date":"2019-09-13T02:18:13.159Z","updated":"2019-09-13T02:18:13.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh745000ywsl68zw4nwq1","content":"<p><strong>此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。</strong></p>\n<p>思路是：首先给前端启动一个服务，用<code>http-server</code> 或者 <code>webpack-dev-server</code><br>              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。<br><strong>一：http-server  启动一个前端服务</strong></p>\n<p>新建一个前端项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir http-server-test</span><br><span class=\"line\">cd http-server-test</span><br><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n\n<p>新建一个<code>test.html</code>页面，随便写个hello world,然后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:8080/test.html</code> 得到下面页面<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>前端<code>http server</code>就启动好了。</p>\n<p><strong>二：前端项目通过webpack工具+react前端框架打包出js,css文件</strong></p>\n<p>1.进到http-server-test目录,<code>npm init</code>一路回车即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>2.安装相关依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//babel编译js相关</span><br><span class=\"line\">npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css文件处理相关</span><br><span class=\"line\">npm install css-loader style-loader less-loader postcss-loader less --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将css达成独立的css文件</span><br><span class=\"line\">//加上@next是为了防止出错，遇到了这个坑</span><br><span class=\"line\">npm install extract-text-webpack-plugin@next --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装react框架相关</span><br><span class=\"line\">npm install react react-dom --save</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack打包文件相关依赖</span><br><span class=\"line\">npm install webpack -g</span><br><span class=\"line\">npm install webpack --save-dev</span><br><span class=\"line\">//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下</span><br><span class=\"line\">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>3.配置babel,新建一个<code>.babelrc</code>文件，写入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.配置webpack文件，新建<code>webpack.config.js</code>文件，写入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    context:path.resolve(__dirname,&apos;&apos;),</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        main:&apos;./src/index.jsx&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:path.resolve(__dirname,&apos;dist/&apos;),</span><br><span class=\"line\">        filename:&apos;index.js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.jsx$/,</span><br><span class=\"line\">                use:&apos;babel-loader&apos;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.less$/,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                    use: [&quot;css-loader&quot;,&quot;less-loader&quot;]</span><br><span class=\"line\">                  &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            &apos;process.env.NODE_ENV&apos;:JSON.stringify(&apos;development&apos;),</span><br><span class=\"line\">            __DEV__:true</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new ExtractTextPlugin(&apos;index.css&apos;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.继续丰富目录，目路结构（<code>dist</code>目录是<code>webpack</code>打包自动生成的文件，不需要手动创建）如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import HelloComponent from &apos;../components/hello.jsx&apos;</span><br><span class=\"line\">import &apos;./index.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div className=&quot;app-box&quot;&gt;</span><br><span class=\"line\">        &lt;HelloComponent /&gt;</span><br><span class=\"line\">    &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.less</span><br><span class=\"line\">.app-box&#123;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">    margin:50px auto;</span><br><span class=\"line\">    border:1px solid #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;hello world&lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.less</span><br><span class=\"line\">.hello-box&#123;</span><br><span class=\"line\">    color:#f00;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.运行webpack打包出文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --watch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>三：将打包出来的css，js文件通过script src=””链接到egg.js的模板文件中</strong></p>\n<p>打开上一节新建的egg项目<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/home.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\">       await this.ctx.render(&apos;home/home.tpl&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/home/home.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://127.0.0.1:8080/dist/index.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://127.0.0.1:8080/dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后命令行运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:7001/</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>注意：前端的服务http-server,以及egg的服务都要开启。</strong></p>\n<p>结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>此文的目的是：让egg作为中间接口层，只出接口，前端做页面渲染，搞成前后端分离。</strong></p>\n<p>思路是：首先给前端启动一个服务，用<code>http-server</code> 或者 <code>webpack-dev-server</code><br>              后端启动一个服务，将前端代码打包之后的js,css文件通过script，link的方式引入到egg的模板文件里去。<br><strong>一：http-server  启动一个前端服务</strong></p>\n<p>新建一个前端项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir http-server-test</span><br><span class=\"line\">cd http-server-test</span><br><span class=\"line\">npm install http-server -g</span><br></pre></td></tr></table></figure>\n\n<p>新建一个<code>test.html</code>页面，随便写个hello world,然后运行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http-server</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:8080/test.html</code> 得到下面页面<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1359667d1e1b6583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>前端<code>http server</code>就启动好了。</p>\n<p><strong>二：前端项目通过webpack工具+react前端框架打包出js,css文件</strong></p>\n<p>1.进到http-server-test目录,<code>npm init</code>一路回车即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure>\n\n<p>2.安装相关依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//babel编译js相关</span><br><span class=\"line\">npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//css文件处理相关</span><br><span class=\"line\">npm install css-loader style-loader less-loader postcss-loader less --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将css达成独立的css文件</span><br><span class=\"line\">//加上@next是为了防止出错，遇到了这个坑</span><br><span class=\"line\">npm install extract-text-webpack-plugin@next --save-dev</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//安装react框架相关</span><br><span class=\"line\">npm install react react-dom --save</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//webpack打包文件相关依赖</span><br><span class=\"line\">npm install webpack -g</span><br><span class=\"line\">npm install webpack --save-dev</span><br><span class=\"line\">//因为直接webpack打包的时候报错说是webpack-cli是独立出来的，所以也要安装一下</span><br><span class=\"line\">npm install webpack-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>3.配置babel,新建一个<code>.babelrc</code>文件，写入如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>4.配置webpack文件，新建<code>webpack.config.js</code>文件，写入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const webpack = require(&apos;webpack&apos;);</span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    context:path.resolve(__dirname,&apos;&apos;),</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        main:&apos;./src/index.jsx&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output:&#123;</span><br><span class=\"line\">        path:path.resolve(__dirname,&apos;dist/&apos;),</span><br><span class=\"line\">        filename:&apos;index.js&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    module:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.jsx$/,</span><br><span class=\"line\">                use:&apos;babel-loader&apos;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:/\\.less$/,</span><br><span class=\"line\">                use: ExtractTextPlugin.extract(&#123;</span><br><span class=\"line\">                    fallback: &quot;style-loader&quot;,</span><br><span class=\"line\">                    use: [&quot;css-loader&quot;,&quot;less-loader&quot;]</span><br><span class=\"line\">                  &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins:[</span><br><span class=\"line\">        new webpack.DefinePlugin(&#123;</span><br><span class=\"line\">            &apos;process.env.NODE_ENV&apos;:JSON.stringify(&apos;development&apos;),</span><br><span class=\"line\">            __DEV__:true</span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        new ExtractTextPlugin(&apos;index.css&apos;),</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5.继续丰富目录，目路结构（<code>dist</code>目录是<code>webpack</code>打包自动生成的文件，不需要手动创建）如下：<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-1db7ffea8265f5b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.html</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class=\"line\">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</span><br><span class=\"line\">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;../dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import ReactDOM from &apos;react-dom&apos;</span><br><span class=\"line\">import HelloComponent from &apos;../components/hello.jsx&apos;</span><br><span class=\"line\">import &apos;./index.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &lt;div className=&quot;app-box&quot;&gt;</span><br><span class=\"line\">        &lt;HelloComponent /&gt;</span><br><span class=\"line\">    &lt;/div&gt;,</span><br><span class=\"line\">    document.getElementById(&apos;app&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//src/index.less</span><br><span class=\"line\">.app-box&#123;</span><br><span class=\"line\">    width:200px;</span><br><span class=\"line\">    height: 400px;</span><br><span class=\"line\">    margin:50px auto;</span><br><span class=\"line\">    border:1px solid #ccc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.jsx</span><br><span class=\"line\">import React from &apos;react&apos;</span><br><span class=\"line\">import &apos;./hello.less&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class HelloComponent extends React.Component&#123;</span><br><span class=\"line\">    render()&#123;</span><br><span class=\"line\">        return(</span><br><span class=\"line\">            &lt;div className=&quot;hello-box&quot;&gt;hello world&lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//components/hello.less</span><br><span class=\"line\">.hello-box&#123;</span><br><span class=\"line\">    color:#f00;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>6.运行webpack打包出文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack --watch</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5541401-97ad22738e484256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>三：将打包出来的css，js文件通过script src=””链接到egg.js的模板文件中</strong></p>\n<p>打开上一节新建的egg项目<br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-8fc3f058914e0b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/controller/home.js</span><br><span class=\"line\">const Controller = require(&apos;egg&apos;).Controller;</span><br><span class=\"line\">class HomeController extends Controller&#123;</span><br><span class=\"line\">    async index()&#123;</span><br><span class=\"line\">       await this.ctx.render(&apos;home/home.tpl&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = HomeController;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//app/view/home/home.tpl</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;Hacker News&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;http://127.0.0.1:8080/dist/index.css&quot; /&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body&gt;</span><br><span class=\"line\">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script src=&quot;http://127.0.0.1:8080/dist/index.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>最后命令行运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n\n<p>访问<code>http://127.0.0.1:7001/</code><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-10c475e52b8b1090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br><img src=\"https://upload-images.jianshu.io/upload_images/5541401-a7d5744f6ab71544.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n<p><strong>注意：前端的服务http-server,以及egg的服务都要开启。</strong></p>\n<p>结语：如此便实现egg.js负责接口服务，前端做前端的事，前后端分离。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-09-02T02:39:00.392Z","updated":"2019-09-02T01:57:11.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0hwh74a000zwsl6tgerdt4x","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}